"""
–ú–æ–¥—É–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–≤—è–∑–∫–∞–º–∏ —Ç–æ–≤–∞—Ä–æ–≤ (bundles).
–ü–æ–∑–≤–æ–ª—è–µ—Ç —Ä–∞–∑–±–∏–≤–∞—Ç—å –∫–æ–º–ø–ª–µ–∫—Ç–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∫–æ–º–ø–ª–µ–∫—Ç—É—é—â–∏–µ.
"""

import json
import os
from datetime import datetime
from typing import Dict, List, Optional, Any
from loguru import logger


class BundleManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–≤—è–∑–∫–∞–º–∏ —Ç–æ–≤–∞—Ä–æ–≤."""
    
    def __init__(self, bundles_file: str = "product_bundles.json"):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞.
        
        Args:
            bundles_file: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å–æ —Å–≤—è–∑–∫–∞–º–∏
        """
        self.bundles_file = bundles_file
        self.bundles: Dict[str, Any] = self._load_bundles()
    
    def _load_bundles(self) -> Dict[str, Any]:
        """
        –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–≤—è–∑–∫–∏ –∏–∑ —Ñ–∞–π–ª–∞.
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å–æ —Å–≤—è–∑–∫–∞–º–∏
        """
        if not os.path.exists(self.bundles_file):
            logger.info(f"üì¶ –§–∞–π–ª {self.bundles_file} –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π")
            return {"bundles": {}}
        
        try:
            with open(self.bundles_file, 'r', encoding='utf-8') as f:
                data = json.load(f)
                logger.info(f"üì¶ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å–≤—è–∑–æ–∫: {len(data.get('bundles', {}))}")
                return data
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {self.bundles_file}: {e}")
            return {"bundles": {}}
    
    def _save_bundles(self) -> bool:
        """
        –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–≤—è–∑–∫–∏ –≤ —Ñ–∞–π–ª.
        
        Returns:
            True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            with open(self.bundles_file, 'w', encoding='utf-8') as f:
                json.dump(self.bundles, f, ensure_ascii=False, indent=2)
            logger.info(f"üíæ –°–≤—è–∑–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {self.bundles_file}")
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è {self.bundles_file}: {e}")
            return False
    
    def has_bundle(self, product_name: str) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Å–≤—è–∑–∫–∞ –¥–ª—è —Ç–æ–≤–∞—Ä–∞.
        
        Args:
            product_name: –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
            
        Returns:
            True –µ—Å–ª–∏ —Å–≤—è–∑–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        """
        return product_name in self.bundles.get("bundles", {})
    
    def get_bundle(self, product_name: str) -> Optional[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Å–≤—è–∑–∫—É –¥–ª—è —Ç–æ–≤–∞—Ä–∞.
        
        Args:
            product_name: –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å–æ —Å–≤—è–∑–∫–æ–π –∏–ª–∏ None
        """
        bundle = self.bundles.get("bundles", {}).get(product_name)
        if bundle:
            # –û–±–Ω–æ–≤–ª—è–µ–º last_used
            bundle["last_used"] = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            self._save_bundles()
            logger.info(f"üì¶ –ù–∞–π–¥–µ–Ω–∞ —Å–≤—è–∑–∫–∞ –¥–ª—è '{product_name[:50]}...'")
        return bundle
    
    def create_bundle(
        self, 
        product_name: str, 
        components: List[Dict[str, Any]], 
        total_price: float
    ) -> bool:
        """
        –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Å–≤—è–∑–∫—É.
        
        Args:
            product_name: –ù–∞–∑–≤–∞–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
            components: –°–ø–∏—Å–æ–∫ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
            total_price: –û–±—â–∞—è —Ü–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞
            
        Returns:
            True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É–º–º—É
        components_total = sum(c.get("price", 0) for c in components)
        if abs(components_total - total_price) > 0.01:  # –î–æ–ø—É—Å—Ç–∏–º–∞—è –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å
            logger.error(f"‚ùå –°—É–º–º–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ ({components_total}) != –æ–±—â–∞—è —Ü–µ–Ω–∞ ({total_price})")
            return False
        
        now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        
        bundle = {
            "original_name": product_name,
            "components": components,
            "total_price": total_price,
            "components_count": len(components),
            "created_at": now,
            "last_used": now
        }
        
        if "bundles" not in self.bundles:
            self.bundles["bundles"] = {}
        
        self.bundles["bundles"][product_name] = bundle
        
        if self._save_bundles():
            logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Å–≤—è–∑–∫–∞ –¥–ª—è '{product_name[:50]}...' ({len(components)} –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤)")
            return True
        
        return False
    
    def delete_bundle(self, product_name: str) -> bool:
        """
        –£–¥–∞–ª–∏—Ç—å —Å–≤—è–∑–∫—É.
        
        Args:
            product_name: –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
            
        Returns:
            True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ
        """
        if product_name in self.bundles.get("bundles", {}):
            del self.bundles["bundles"][product_name]
            self._save_bundles()
            logger.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∞ —Å–≤—è–∑–∫–∞ –¥–ª—è '{product_name[:50]}...'")
            return True
        
        logger.warning(f"‚ö†Ô∏è –°–≤—è–∑–∫–∞ –¥–ª—è '{product_name[:50]}...' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return False
    
    def get_all_bundles(self) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Å–≤—è–∑–∫–∏.
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å –≤—Å–µ—Ö —Å–≤—è–∑–æ–∫
        """
        return self.bundles.get("bundles", {})
    
    def get_stats(self) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Å–≤—è–∑–∫–∞–º.
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        """
        bundles = self.bundles.get("bundles", {})
        total_components = sum(
            bundle.get("components_count", 0) 
            for bundle in bundles.values()
        )
        
        return {
            "total_bundles": len(bundles),
            "total_components": total_components,
            "avg_components": total_components / len(bundles) if bundles else 0
        }


def create_bundle_item(
    original_item: Dict[str, Any],
    components: List[Dict[str, Any]]
) -> Dict[str, Any]:
    """
    –°–æ–∑–¥–∞—Ç—å item —Å –º–µ—Ç–∫–æ–π bundle –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ item.
    
    Args:
        original_item: –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π item –∏–∑ –∑–∞–∫–∞–∑–∞
        components: –°–ø–∏—Å–æ–∫ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–≤—è–∑–∫–∏
        
    Returns:
        Item —Å –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–º–∏ –ø–æ–ª—è–º–∏ bundle
    """
    bundle_item = original_item.copy()
    bundle_item["is_bundle"] = True
    bundle_item["bundle_key"] = original_item["name"]
    bundle_item["components"] = components
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –∫–∞–∂–¥—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
    for component in bundle_item["components"]:
        if "status" not in component:
            component["status"] = original_item.get("status", "")
    
    logger.debug(f"üì¶ –°–æ–∑–¥–∞–Ω bundle item: {len(components)} –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤")
    return bundle_item
