"""
–ú–æ–¥—É–ª—å –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ —Å–ø–∞—Ä—Å–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã.
"""

import json
from pathlib import Path
from datetime import datetime
from loguru import logger


class DataExporter:
    """–ö–ª–∞—Å—Å –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤."""
    
    def __init__(self, output_dir: str = "."):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —ç–∫—Å–ø–æ—Ä—Ç—ë—Ä–∞.
        
        Args:
            output_dir: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
        """
        self.output_dir = Path(output_dir)
        self.output_dir.mkdir(parents=True, exist_ok=True)
    
    def export_to_json(self, orders_data: list, filename: str | None = None) -> str:
        """
        –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –≤ JSON —Ñ–∞–π–ª.
        
        Args:
            orders_data: –°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ —Å –¥–∞–Ω–Ω—ã–º–∏
            filename: –ò–º—è —Ñ–∞–π–ª–∞ (–µ—Å–ª–∏ None, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è ozon_orders.json)
        
        Returns:
            –ü—É—Ç—å –∫ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É
        """
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –µ–¥–∏–Ω—ã–π —Ñ–∞–π–ª ozon_orders.json –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            if filename is None:
                filename = "ozon_orders.json"
            
            # –ü–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
            filepath = self.output_dir / filename
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
            export_data = {
                'export_date': datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                'total_orders': len(orders_data),
                'orders': orders_data
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            total_items = sum(order.get('items_count', 0) for order in orders_data)
            total_amount = sum(order.get('total_amount', 0) for order in orders_data)
            
            export_data['statistics'] = {
                'total_items': total_items,
                'total_amount': total_amount,
                'total_positions': sum(len(order.get('items', [])) for order in orders_data)
            }
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ JSON —Å –∫—Ä–∞—Å–∏–≤—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
            with open(filepath, 'w', encoding='utf-8') as f:
                json.dump(export_data, f, ensure_ascii=False, indent=2)
            
            logger.info(f"‚úÖ –î–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ JSON: {filepath}")
            logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {len(orders_data)} –∑–∞–∫–∞–∑–æ–≤, {total_items} —Ç–æ–≤–∞—Ä–æ–≤, {total_amount:.2f} ‚ÇΩ")
            
            return str(filepath)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –≤ JSON: {e}")
            raise
    
    def export_summary(self, orders_data: list) -> dict:
        """
        –°–æ–∑–¥–∞—ë—Ç —Å–≤–æ–¥–∫—É –ø–æ –∑–∞–∫–∞–∑–∞–º.
        
        Args:
            orders_data: –°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ —Å –¥–∞–Ω–Ω—ã–º–∏
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        """
        if not orders_data:
            return {}
        
        # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
        status_stats = {}
        for order in orders_data:
            for item in order.get('items', []):
                status = item.get('status', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                if status not in status_stats:
                    status_stats[status] = {
                        'count': 0,
                        'quantity': 0,
                        'total_amount': 0
                    }
                status_stats[status]['count'] += 1
                status_stats[status]['quantity'] += item.get('quantity', 0)
                status_stats[status]['total_amount'] += item.get('price', 0) * item.get('quantity', 0)
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        summary = {
            'total_orders': len(orders_data),
            'total_items': sum(order.get('items_count', 0) for order in orders_data),
            'total_positions': sum(len(order.get('items', [])) for order in orders_data),
            'total_amount': sum(order.get('total_amount', 0) for order in orders_data),
            'status_breakdown': status_stats,
            'date_range': {
                'from': min((order.get('date', '') for order in orders_data), default=''),
                'to': max((order.get('date', '') for order in orders_data), default='')
            }
        }
        
        return summary


def export_orders(orders_data: list, output_dir: str = ".") -> str:
    """
    –ë—ã—Å—Ç—Ä–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –∑–∞–∫–∞–∑–æ–≤ –≤ JSON.
    
    Args:
        orders_data: –°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤
        output_dir: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    
    Returns:
        –ü—É—Ç—å –∫ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É
    """
    exporter = DataExporter(output_dir)
    return exporter.export_to_json(orders_data)


if __name__ == "__main__":
    # –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    test_data = [
        {
            'order_number': '12345-0001',
            'date': '01.10.2025',
            'total_amount': 1500.0,
            'items_count': 3,
            'items': [
                {'name': '–¢–æ–≤–∞—Ä 1', 'quantity': 2, 'price': 500.0, 'status': '–ø–æ–ª—É—á–µ–Ω'},
                {'name': '–¢–æ–≤–∞—Ä 2', 'quantity': 1, 'price': 500.0, 'status': '–ø–æ–ª—É—á–µ–Ω'}
            ]
        }
    ]
    
    exporter = DataExporter()
    filepath = exporter.export_to_json(test_data, 'test_orders.json')
    print(f"–§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {filepath}")
    
    summary = exporter.export_summary(test_data)
    print(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {summary}")
