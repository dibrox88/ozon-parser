"""
–¢–µ—Å—Ç —Ä–∞–∑–±–∏–≤–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã (bundle splitting).
"""

import json
from pathlib import Path
from bundle_manager import BundleManager, create_bundle_item
from loguru import logger

def test_bundle_creation():
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Å–≤—è–∑–∫–∏."""
    logger.info("=== –¢–µ—Å—Ç 1: –°–æ–∑–¥–∞–Ω–∏–µ —Å–≤—è–∑–∫–∏ ===")
    
    # –°–æ–∑–¥–∞—ë–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è —Ç–µ—Å—Ç–æ–≤
    test_file = "test_bundles.json"
    bm = BundleManager(bundles_file=test_file)
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    components = [
        {"mapped_name": "–¢–æ–≤–∞—Ä –ê", "mapped_type": "–¢–∏–ø 1", "price": 5000},
        {"mapped_name": "–¢–æ–≤–∞—Ä –ë", "mapped_type": "–¢–∏–ø 2", "price": 7000},
        {"mapped_name": "–¢–æ–≤–∞—Ä –í", "mapped_type": "–¢–∏–ø 3", "price": 3000}
    ]
    
    total_price = 15000
    product_name = "–ö–æ–º–ø–ª–µ–∫—Ç XYZ"
    
    # –°–æ–∑–¥–∞—ë–º —Å–≤—è–∑–∫—É
    result = bm.create_bundle(product_name, components, total_price)
    
    assert result == True, "–°–≤—è–∑–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω–∞"
    assert bm.has_bundle(product_name), "–°–≤—è–∑–∫–∞ –¥–æ–ª–∂–Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω
    assert Path(test_file).exists(), "–§–∞–π–ª —Å–≤—è–∑–æ–∫ –¥–æ–ª–∂–µ–Ω —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å"
    
    logger.success("‚úÖ –¢–µ—Å—Ç 1 –ø—Ä–æ–π–¥–µ–Ω: —Å–≤—è–∑–∫–∞ —Å–æ–∑–¥–∞–Ω–∞")
    
    # –û—á–∏—Å—Ç–∫–∞
    Path(test_file).unlink()


def test_bundle_retrieval():
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤—è–∑–∫–∏."""
    logger.info("=== –¢–µ—Å—Ç 2: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤—è–∑–∫–∏ ===")
    
    test_file = "test_bundles.json"
    bm = BundleManager(bundles_file=test_file)
    
    components = [
        {"mapped_name": "–ö–æ–º–ø–æ–Ω–µ–Ω—Ç 1", "mapped_type": "–¢–∏–ø X", "price": 8000},
        {"mapped_name": "–ö–æ–º–ø–æ–Ω–µ–Ω—Ç 2", "mapped_type": "–¢–∏–ø Y", "price": 2000}
    ]
    
    product_name = "–ù–∞–±–æ—Ä ABC"
    bm.create_bundle(product_name, components, 10000)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–≤—è–∑–∫—É
    bundle = bm.get_bundle(product_name)
    
    assert bundle is not None, "–°–≤—è–∑–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–∞–π–¥–µ–Ω–∞"
    assert bundle['original_name'] == product_name
    assert len(bundle['components']) == 2
    assert bundle['total_price'] == 10000
    assert bundle['components_count'] == 2
    
    logger.success("‚úÖ –¢–µ—Å—Ç 2 –ø—Ä–æ–π–¥–µ–Ω: —Å–≤—è–∑–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞")
    
    # –û—á–∏—Å—Ç–∫–∞
    Path(test_file).unlink()


def test_bundle_validation():
    """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å—É–º–º—ã —Ü–µ–Ω."""
    logger.info("=== –¢–µ—Å—Ç 3: –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—É–º–º—ã ===")
    
    test_file = "test_bundles.json"
    bm = BundleManager(bundles_file=test_file)
    
    # –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—É–º–º–∞
    components = [
        {"mapped_name": "–¢–æ–≤–∞—Ä 1", "mapped_type": "–¢–∏–ø A", "price": 5000},
        {"mapped_name": "–¢–æ–≤–∞—Ä 2", "mapped_type": "–¢–∏–ø B", "price": 6000}
    ]
    
    product_name = "–û—à–∏–±–æ—á–Ω—ã–π –Ω–∞–±–æ—Ä"
    result = bm.create_bundle(product_name, components, 20000)  # –°—É–º–º–∞ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç!
    
    assert result == False, "–°–≤—è–∑–∫–∞ —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—É–º–º–æ–π –Ω–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω–∞"
    assert not bm.has_bundle(product_name), "–°–≤—è–∑–∫–∞ –Ω–µ –¥–æ–ª–∂–Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å"
    
    logger.success("‚úÖ –¢–µ—Å—Ç 3 –ø—Ä–æ–π–¥–µ–Ω: –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç")
    
    # –û—á–∏—Å—Ç–∫–∞ (–µ—Å–ª–∏ —Ñ–∞–π–ª –±—ã–ª —Å–æ–∑–¥–∞–Ω)
    if Path(test_file).exists():
        Path(test_file).unlink()


def test_create_bundle_item():
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è bundle item."""
    logger.info("=== –¢–µ—Å—Ç 4: –°–æ–∑–¥–∞–Ω–∏–µ bundle item ===")
    
    original_item = {
        "name": "–ù–∞–±–æ—Ä –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤",
        "price": 12000,
        "quantity": 2,
        "status": "–ø–æ–ª—É—á–µ–Ω"
    }
    
    components = [
        {"mapped_name": "–ú–æ–ª–æ—Ç–æ–∫", "mapped_type": "–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã", "price": 3000},
        {"mapped_name": "–û—Ç–≤—ë—Ä—Ç–∫–∞", "mapped_type": "–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã", "price": 2000},
        {"mapped_name": "–ü–ª–æ—Å–∫–æ–≥—É–±—Ü—ã", "mapped_type": "–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã", "price": 7000}
    ]
    
    bundle_item = create_bundle_item(original_item, components)
    
    assert bundle_item['is_bundle'] == True
    assert bundle_item['bundle_key'] == "–ù–∞–±–æ—Ä –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"
    assert len(bundle_item['components']) == 3
    assert bundle_item['components'][0]['status'] == '–ø–æ–ª—É—á–µ–Ω'
    assert bundle_item['price'] == 12000
    assert bundle_item['quantity'] == 2
    
    logger.success("‚úÖ –¢–µ—Å—Ç 4 –ø—Ä–æ–π–¥–µ–Ω: bundle item —Å–æ–∑–¥–∞–Ω")


def test_bundle_stats():
    """–¢–µ—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."""
    logger.info("=== –¢–µ—Å—Ç 5: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ===")
    
    test_file = "test_bundles.json"
    bm = BundleManager(bundles_file=test_file)
    
    # –°–æ–∑–¥–∞—ë–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–≤—è–∑–æ–∫
    bm.create_bundle("–ù–∞–±–æ—Ä 1", [
        {"mapped_name": "A", "mapped_type": "T1", "price": 5000},
        {"mapped_name": "B", "mapped_type": "T2", "price": 5000}
    ], 10000)
    
    bm.create_bundle("–ù–∞–±–æ—Ä 2", [
        {"mapped_name": "C", "mapped_type": "T3", "price": 3000},
        {"mapped_name": "D", "mapped_type": "T4", "price": 4000},
        {"mapped_name": "E", "mapped_type": "T5", "price": 3000}
    ], 10000)
    
    stats = bm.get_stats()
    
    assert stats['total_bundles'] == 2
    assert stats['total_components'] == 5
    assert stats['avg_components'] == 2.5
    
    logger.success("‚úÖ –¢–µ—Å—Ç 5 –ø—Ä–æ–π–¥–µ–Ω: —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
    
    # –û—á–∏—Å—Ç–∫–∞
    Path(test_file).unlink()


def test_schema_parsing():
    """–¢–µ—Å—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ö–µ–º—ã."""
    logger.info("=== –¢–µ—Å—Ç 6: –ü–∞—Ä—Å–∏–Ω–≥ —Å—Ö–µ–º—ã ===")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã —Å—Ö–µ–º—ã
    test_cases = [
        ("2-3-5", [2, 3, 5]),
        ("1", [1]),
        ("10-20-30-40", [10, 20, 30, 40]),
        ("2-2-2", [2, 2, 2])
    ]
    
    for schema, expected in test_cases:
        parts = schema.split('-')
        type_numbers = [int(p) for p in parts]
        assert type_numbers == expected, f"–°—Ö–µ–º–∞ {schema} –¥–æ–ª–∂–Ω–∞ –ø–∞—Ä—Å–∏—Ç—å—Å—è –≤ {expected}"
    
    logger.success("‚úÖ –¢–µ—Å—Ç 6 –ø—Ä–æ–π–¥–µ–Ω: –ø–∞—Ä—Å–∏–Ω–≥ —Å—Ö–µ–º—ã —Ä–∞–±–æ—Ç–∞–µ—Ç")


def run_all_tests():
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Ç–µ—Å—Ç—ã."""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ bundle splitting...")
    
    try:
        test_bundle_creation()
        test_bundle_retrieval()
        test_bundle_validation()
        test_create_bundle_item()
        test_bundle_stats()
        test_schema_parsing()
        
        logger.success("=" * 50)
        logger.success("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´!")
        logger.success("=" * 50)
        
    except AssertionError as e:
        logger.error(f"‚ùå –¢–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω: {e}")
        raise
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö: {e}")
        raise


if __name__ == "__main__":
    run_all_tests()
