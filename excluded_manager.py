"""
–ú–æ–¥—É–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏—Å–∫–ª—é—á—ë–Ω–Ω—ã–º–∏ –∑–∞–∫–∞–∑–∞–º–∏.
"""

import json
from pathlib import Path
from datetime import datetime
from typing import List, Set, Optional
from loguru import logger


class ExcludedOrdersManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å–ø–∏—Å–∫–æ–º –∏—Å–∫–ª—é—á—ë–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤."""
    
    EXCLUDED_FILE = "excluded_orders.json"
    
    def __init__(self, excluded_file: Optional[str] = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è.
        
        Args:
            excluded_file: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –∏—Å–∫–ª—é—á—ë–Ω–Ω—ã–º–∏ –∑–∞–∫–∞–∑–∞–º–∏
        """
        self.excluded_file = excluded_file or self.EXCLUDED_FILE
        self.excluded_orders: Set[str] = self._load_excluded()
    
    def _load_excluded(self) -> Set[str]:
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∏—Å–∫–ª—é—á—ë–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤."""
        try:
            if Path(self.excluded_file).exists():
                with open(self.excluded_file, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                    excluded = set(data.get('excluded_orders', []))
                    logger.info(f"üìã –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∏—Å–∫–ª—é—á—ë–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤: {len(excluded)}")
                    return excluded
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏—Å–∫–ª—é—á—ë–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã: {e}")
        
        return set()
    
    def _save_excluded(self) -> bool:
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∏—Å–∫–ª—é—á—ë–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤."""
        try:
            data = {
                "excluded_orders": sorted(list(self.excluded_orders)),
                "last_updated": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                "description": "–°–ø–∏—Å–æ–∫ –∏—Å–∫–ª—é—á—ë–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ (order_number), –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –±—É–¥—É—Ç –ø–∞—Ä—Å–∏—Ç—å—Å—è"
            }
            
            with open(self.excluded_file, 'w', encoding='utf-8') as f:
                json.dump(data, f, ensure_ascii=False, indent=2)
            
            logger.info(f"‚úÖ –°–ø–∏—Å–æ–∫ –∏—Å–∫–ª—é—á—ë–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {len(self.excluded_orders)} –∑–∞–∫–∞–∑–æ–≤")
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å–∫–ª—é—á—ë–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤: {e}")
            return False
    
    def add_excluded(self, order_number: str) -> bool:
        """
        –î–æ–±–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑ –≤ —Å–ø–∏—Å–æ–∫ –∏—Å–∫–ª—é—á—ë–Ω–Ω—ã—Ö.
        
        Args:
            order_number: –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è
            
        Returns:
            True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω
        """
        if order_number in self.excluded_orders:
            logger.warning(f"‚ö†Ô∏è –ó–∞–∫–∞–∑ {order_number} —É–∂–µ –≤ —Å–ø–∏—Å–∫–µ –∏—Å–∫–ª—é—á—ë–Ω–Ω—ã—Ö")
            return False
        
        self.excluded_orders.add(order_number)
        logger.info(f"‚ûï –î–æ–±–∞–≤–ª–µ–Ω –≤ –∏—Å–∫–ª—é—á—ë–Ω–Ω—ã–µ: {order_number}")
        
        return self._save_excluded()
    
    def remove_excluded(self, order_number: str) -> bool:
        """
        –£–¥–∞–ª–∏—Ç—å –∑–∞–∫–∞–∑ –∏–∑ —Å–ø–∏—Å–∫–∞ –∏—Å–∫–ª—é—á—ë–Ω–Ω—ã—Ö.
        
        Args:
            order_number: –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
            
        Returns:
            True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω
        """
        if order_number not in self.excluded_orders:
            logger.warning(f"‚ö†Ô∏è –ó–∞–∫–∞–∑ {order_number} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –∏—Å–∫–ª—é—á—ë–Ω–Ω—ã—Ö")
            return False
        
        self.excluded_orders.remove(order_number)
        logger.info(f"‚ûñ –£–¥–∞–ª—ë–Ω –∏–∑ –∏—Å–∫–ª—é—á—ë–Ω–Ω—ã—Ö: {order_number}")
        
        return self._save_excluded()
    
    def is_excluded(self, order_number: str) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –∏—Å–∫–ª—é—á—ë–Ω –ª–∏ –∑–∞–∫–∞–∑.
        
        Args:
            order_number: –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞
            
        Returns:
            True –µ—Å–ª–∏ –∑–∞–∫–∞–∑ –∏—Å–∫–ª—é—á—ë–Ω
        """
        return order_number in self.excluded_orders
    
    def get_excluded_list(self) -> List[str]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∏—Å–∫–ª—é—á—ë–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤."""
        return sorted(list(self.excluded_orders))
    
    def get_count(self) -> int:
        """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–∫–ª—é—á—ë–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤."""
        return len(self.excluded_orders)
    
    def clear_excluded(self) -> bool:
        """
        –û—á–∏—Å—Ç–∏—Ç—å –≤–µ—Å—å —Å–ø–∏—Å–æ–∫ –∏—Å–∫–ª—é—á—ë–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.
        
        Returns:
            True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω
        """
        if not self.excluded_orders:
            logger.info("‚ÑπÔ∏è –°–ø–∏—Å–æ–∫ –∏—Å–∫–ª—é—á—ë–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ —É–∂–µ –ø—É—Å—Ç")
            return True
        
        count = len(self.excluded_orders)
        self.excluded_orders.clear()
        logger.info(f"üóëÔ∏è –û—á–∏—â–µ–Ω —Å–ø–∏—Å–æ–∫ –∏—Å–∫–ª—é—á—ë–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤: –±—ã–ª–æ {count} –∑–∞–∫–∞–∑–æ–≤")
        
        return self._save_excluded()
    
    def filter_orders(self, orders_data: list) -> tuple[list, list]:
        """
        –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –∏—Å–∫–ª—é—á—ë–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã –∏–∑ —Å–ø–∏—Å–∫–∞.
        
        Args:
            orders_data: –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤
            
        Returns:
            –ö–æ—Ä—Ç–µ–∂ (–Ω–µ_–∏—Å–∫–ª—é—á—ë–Ω–Ω—ã–µ_–∑–∞–∫–∞–∑—ã, –∏—Å–∫–ª—é—á—ë–Ω–Ω—ã–µ_–∑–∞–∫–∞–∑—ã)
        """
        valid_orders = []
        excluded_orders = []
        
        for order in orders_data:
            order_number = order.get('order_number', '')
            
            if self.is_excluded(order_number):
                excluded_orders.append(order)
                logger.debug(f"‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∏—Å–∫–ª—é—á—ë–Ω–Ω—ã–π –∑–∞–∫–∞–∑: {order_number}")
            else:
                valid_orders.append(order)
        
        if excluded_orders:
            logger.info(f"‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ –∏—Å–∫–ª—é—á—ë–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤: {len(excluded_orders)}")
        
        return valid_orders, excluded_orders
