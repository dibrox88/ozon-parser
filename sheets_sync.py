"""
–ú–æ–¥—É–ª—å –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∑–∞–∫–∞–∑–æ–≤ —Å Google Sheets.
MVP –≤–µ—Ä—Å–∏—è: –±–∞–∑–æ–≤–∞—è –∑–∞–ø–∏—Å—å –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤.
"""

import gspread
from google.oauth2.service_account import Credentials
from loguru import logger
from typing import List, Dict, Optional, Any, cast
from config import Config
from notifier import sync_send_message


class SheetsSynchronizer:
    """–ö–ª–∞—Å—Å –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∑–∞–∫–∞–∑–æ–≤ —Å Google Sheets."""
    
    SCOPES = [
        'https://www.googleapis.com/auth/spreadsheets',
        'https://www.googleapis.com/auth/drive'
    ]
    
    # –ú–∞–ø–ø–∏–Ω–≥ —Å—Ç–∞—Ç—É—Å–æ–≤ –¥–ª—è —Å—Ç–æ–ª–±—Ü–∞ D
    STATUS_MAPPING = {
        '–ø–æ–ª—É—á–µ–Ω': 'TRUE',      # –ì–∞–ª–æ—á–∫–∞
        '–∑–∞–±—Ä–∞—Ç—å': 'FALSE',     # –ù–µ—Ç –≥–∞–ª–æ—á–∫–∏ (—è–≤–Ω–æ FALSE)
        '–≤ –ø—É—Ç–∏': '–≤ –ø—É—Ç–∏',     # –¢–µ–∫—Å—Ç
        '–æ—Ç–º–µ–Ω–µ–Ω': '–æ—Ç–º–µ–Ω–µ–Ω'    # –¢–µ–∫—Å—Ç
    }
    
    # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Å—Ç–∞—Ç—É—Å–æ–≤ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –º–∞–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è)
    STATUS_PRIORITY = {
        'TRUE': 1,      # –ø–æ–ª—É—á–µ–Ω ‚Üí TRUE
        'FALSE': 2,     # –∑–∞–±—Ä–∞—Ç—å ‚Üí FALSE
        '–≤ –ø—É—Ç–∏': 3,
        '–æ—Ç–º–µ–Ω–µ–Ω': 4
    }
    
    def __init__(self, credentials_file: str):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ç–æ—Ä–∞.
        
        Args:
            credentials_file: –ü—É—Ç—å –∫ JSON —Ñ–∞–π–ª—É —Å credentials –æ—Ç Google
        """
        self.credentials_file = credentials_file
        self.client: Optional[gspread.Client] = None
        self.spreadsheet: Optional[gspread.Spreadsheet] = None
        self.worksheet: Optional[gspread.Worksheet] = None
        
    def connect(self) -> bool:
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets API —Å –ø—Ä–∞–≤–∞–º–∏ –∑–∞–ø–∏—Å–∏."""
        try:
            logger.info("üîÑ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets (–∑–∞–ø–∏—Å—å)...")
            creds = Credentials.from_service_account_file(
                self.credentials_file,
                scopes=self.SCOPES
            )
            self.client = gspread.authorize(creds)
            logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ (—Ä–µ–∂–∏–º –∑–∞–ø–∏—Å–∏)")
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            return False
    
    def open_sync_worksheet(self, spreadsheet_url: str, gid: str) -> bool:
        """
        –û—Ç–∫—Ä—ã—Ç—å –ª–∏—Å—Ç –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø–æ GID.
        
        Args:
            spreadsheet_url: URL —Ç–∞–±–ª–∏—Ü—ã
            gid: ID –ª–∏—Å—Ç–∞
            
        Returns:
            True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            if self.client is None:
                raise RuntimeError("–ö–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –í—ã–∑–æ–≤–∏—Ç–µ connect() —Å–Ω–∞—á–∞–ª–∞.")
            
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
            self.spreadsheet = self.client.open_by_url(spreadsheet_url)
            
            # –ò—â–µ–º –ª–∏—Å—Ç –ø–æ GID
            for ws in self.spreadsheet.worksheets():
                if str(ws.id) == str(gid):
                    self.worksheet = ws
                    logger.info(f"üìÑ –û—Ç–∫—Ä—ã—Ç –ª–∏—Å—Ç: {ws.title} (gid={gid})")
                    return True
            
            logger.error(f"‚ùå –õ–∏—Å—Ç —Å gid={gid} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –ª–∏—Å—Ç–∞: {e}")
            return False
    
    def ensure_buffer_rows(self, last_used_row: int, buffer_size: int = 1000) -> None:
        """
        –£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –µ—Å—Ç—å –±—É—Ñ–µ—Ä –ø—É—Å—Ç—ã—Ö —Å—Ç—Ä–æ–∫.
        
        Args:
            last_used_row: –ù–æ–º–µ—Ä –ø–æ—Å–ª–µ–¥–Ω–µ–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
            buffer_size: –†–∞–∑–º–µ—Ä –±—É—Ñ–µ—Ä–∞ –ø—É—Å—Ç—ã—Ö —Å—Ç—Ä–æ–∫ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1000)
        """
        try:
            if self.worksheet is None:
                return
            
            current_rows = self.worksheet.row_count
            required_rows = last_used_row + buffer_size
            
            if current_rows < required_rows:
                rows_to_add = required_rows - current_rows
                self.worksheet.add_rows(rows_to_add)
                logger.info(f"‚ûï –î–æ–±–∞–≤–ª–µ–Ω–æ {rows_to_add} –ø—É—Å—Ç—ã—Ö —Å—Ç—Ä–æ–∫ (–≤—Å–µ–≥–æ: {current_rows + rows_to_add}, –±—É—Ñ–µ—Ä: {buffer_size})")
            else:
                logger.debug(f"‚úì –ë—É—Ñ–µ—Ä –ø—É—Å—Ç—ã—Ö —Å—Ç—Ä–æ–∫ –¥–æ—Å—Ç–∞—Ç–æ—á–µ–Ω ({current_rows - last_used_row} —Å—Ç—Ä–æ–∫ –ø–æ—Å–ª–µ –¥–∞–Ω–Ω—ã—Ö)")
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏: {e}")
    
    def get_existing_orders(self) -> List[str]:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö order_number –∏–∑ —Å—Ç–æ–ª–±—Ü–∞ B.
        
        Returns:
            –°–ø–∏—Å–æ–∫ –Ω–æ–º–µ—Ä–æ–≤ –∑–∞–∫–∞–∑–æ–≤
        """
        try:
            if self.worksheet is None:
                return []
            
            # –ß–∏—Ç–∞–µ–º —Å—Ç–æ–ª–±–µ—Ü B (order_number)
            column_b = self.worksheet.col_values(2)  # 2 = —Å—Ç–æ–ª–±–µ—Ü B
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –ø—É—Å—Ç—ã–µ –∏ –∑–∞–≥–æ–ª–æ–≤–∫–∏, –ø—Ä–∏–≤–æ–¥–∏–º –∫ —Å—Ç—Ä–æ–∫–∞–º
            existing_orders: List[str] = [
                str(order_num) for order_num in column_b 
                if order_num and str(order_num) not in ['order_number', '–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞', '']
            ]
            
            logger.info(f"üìã –ù–∞–π–¥–µ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–∫–∞–∑–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü–µ: {len(existing_orders)}")
            return existing_orders
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–∫–∞–∑–æ–≤: {e}")
            return []
    
    def get_order_data(self, order_number: str) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∑–∞–∫–∞–∑–∞ –∏–∑ Google Sheets.
        
        Args:
            order_number: –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –∑–∞–∫–∞–∑–∞: {
                'order_number': str,
                'rows': List[Dict],  # –°–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫ —Å –¥–∞–Ω–Ω—ã–º–∏
                'start_row': int,    # –ù–æ–º–µ—Ä –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ
                'end_row': int       # –ù–æ–º–µ—Ä –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–æ–∫–∏
            }
        """
        try:
            if self.worksheet is None:
                return {}
            
            # –ß–∏—Ç–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ (—Å—Ç–æ–ª–±—Ü—ã A-I)
            all_data = self.worksheet.get_all_values()
            
            order_rows = []
            start_row = None
            end_row = None
            
            for idx, row in enumerate(all_data, start=1):
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
                if len(row) < 2:
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–æ–ª–±–µ—Ü B (order_number)
                if len(row) > 1 and str(row[1]) == str(order_number):
                    if start_row is None:
                        start_row = idx
                    
                    end_row = idx
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
                    order_rows.append({
                        'row_number': idx,
                        'date': row[0] if len(row) > 0 else '',
                        'order_number': row[1] if len(row) > 1 else '',
                        'source': row[2] if len(row) > 2 else '',
                        'status': row[3] if len(row) > 3 else '',
                        'formula': row[4] if len(row) > 4 else '',
                        'price': row[5] if len(row) > 5 else '',
                        'mapped_name': row[6] if len(row) > 6 else '',
                        'mapped_type': row[7] if len(row) > 7 else '',
                        'reserved': row[8] if len(row) > 8 else ''
                    })
            
            if not order_rows:
                logger.debug(f"–ó–∞–∫–∞–∑ {order_number} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü–µ")
                return {}
            
            logger.debug(f"–ù–∞–π–¥–µ–Ω –∑–∞–∫–∞–∑ {order_number}: {len(order_rows)} —Å—Ç—Ä–æ–∫ (—Å—Ç—Ä–æ–∫–∏ {start_row}-{end_row})")
            
            return {
                'order_number': order_number,
                'rows': order_rows,
                'start_row': start_row,
                'end_row': end_row,
                'total_rows': len(order_rows)
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞ {order_number}: {e}")
            return {}
    
    def compare_orders(self, json_order: Dict, sheets_order: Dict) -> Dict[str, Any]:
        """
        –°—Ä–∞–≤–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –∏–∑ JSON —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ Google Sheets.
        
        Args:
            json_order: –î–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –∏–∑ JSON
            sheets_order: –î–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –∏–∑ Sheets (—Ä–µ–∑—É–ª—å—Ç–∞—Ç get_order_data)
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è: {
                'has_changes': bool,
                'changes': List[str],  # –°–ø–∏—Å–æ–∫ –æ–ø–∏—Å–∞–Ω–∏–π –∏–∑–º–µ–Ω–µ–Ω–∏–π
                'details': Dict  # –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
            }
        """
        try:
            changes = []
            details = {}
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏ –∏–∑ Sheets –ø–æ mapped_name –∏ status
            sheets_items = {}
            for row in sheets_order.get('rows', []):
                key = f"{row['mapped_name']}|{row['status']}"
                if key not in sheets_items:
                    sheets_items[key] = 0
                sheets_items[key] += 1  # –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ (= quantity)
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ç–æ–≤–∞—Ä—ã –∏–∑ JSON
            json_items = {}
            for item in json_order.get('items', []):
                mapped_name = item.get('mapped_name', item.get('name', ''))
                status = self.STATUS_MAPPING.get(item.get('status', ''), item.get('status', ''))
                quantity = item.get('quantity', 1)
                
                key = f"{mapped_name}|{status}"
                json_items[key] = {
                    'quantity': quantity,
                    'price': item.get('price', 0),
                    'mapped_name': mapped_name,
                    'status': status
                }
            
            # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º
            all_keys = set(sheets_items.keys()) | set(json_items.keys())
            
            for key in all_keys:
                sheets_qty = sheets_items.get(key, 0)
                json_item = json_items.get(key)
                json_qty = json_item['quantity'] if json_item else 0
                
                if sheets_qty != json_qty:
                    name, status = key.split('|', 1)
                    
                    if sheets_qty == 0:
                        # –ù–æ–≤—ã–π —Ç–æ–≤–∞—Ä
                        changes.append(f"‚ûï –î–æ–±–∞–≤–ª–µ–Ω: {name} ({status}) x{json_qty}")
                        details.setdefault('added', []).append({
                            'mapped_name': name,
                            'status': status,
                            'quantity': json_qty,
                            'price': json_item['price'] if json_item else 0
                        })
                    elif json_qty == 0:
                        # –£–¥–∞–ª—ë–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä
                        changes.append(f"‚ûñ –£–¥–∞–ª—ë–Ω: {name} ({status}) x{sheets_qty}")
                        details.setdefault('removed', []).append({
                            'mapped_name': name,
                            'status': status,
                            'quantity': sheets_qty
                        })
                    else:
                        # –ò–∑–º–µ–Ω–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                        changes.append(f"üîÑ –ò–∑–º–µ–Ω–µ–Ω–æ: {name} ({status}) {sheets_qty} ‚Üí {json_qty}")
                        details.setdefault('modified', []).append({
                            'mapped_name': name,
                            'status': status,
                            'old_quantity': sheets_qty,
                            'new_quantity': json_qty,
                            'price': json_item['price'] if json_item else 0
                        })
            
            has_changes = len(changes) > 0
            
            if has_changes:
                logger.info(f"üîç –ù–∞–π–¥–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∑–∞–∫–∞–∑–µ {json_order.get('order_number')}: {len(changes)} –∏–∑–º–µ–Ω–µ–Ω–∏–π")
            
            return {
                'has_changes': has_changes,
                'changes': changes,
                'details': details
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤: {e}")
            return {
                'has_changes': False,
                'changes': [],
                'details': {}
            }
    
    def update_order(self, order: Dict, sheets_data: Dict) -> bool:
        """
        –û–±–Ω–æ–≤–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∑–∞–∫–∞–∑ –≤ Google Sheets.
        –£–¥–∞–ª—è–µ—Ç —Å—Ç–∞—Ä—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏ –≤—Å—Ç–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–µ –Ω–∞ –∏—Ö –º–µ—Å—Ç–æ.
        
        Args:
            order: –î–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –∏–∑ JSON
            sheets_data: –î–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –∏–∑ Sheets (—Ä–µ–∑—É–ª—å—Ç–∞—Ç get_order_data)
            
        Returns:
            True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ, False –µ—Å–ª–∏ –æ—à–∏–±–∫–∞
        """
        try:
            if not sheets_data or self.worksheet is None:
                return False
            
            order_number = order.get('order_number', '')
            start_row = sheets_data.get('start_row')
            old_row_count = sheets_data.get('total_rows', 0)
            
            if start_row is None:
                logger.error(f"‚ùå –ù–µ —É–∫–∞–∑–∞–Ω–∞ –Ω–∞—á–∞–ª—å–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_number}")
                return False
            
            logger.info(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ {order_number} (—Å—Ç—Ä–æ–∫–∏ {start_row}-{start_row + old_row_count - 1})")
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            new_rows = self.prepare_rows_from_order(order)
            new_rows = self.group_and_sort_rows(new_rows)
            new_rows = self.add_sum_formulas(new_rows, start_row)
            new_row_count = len(new_rows)
            
            logger.info(f"   –°—Ç–∞—Ä—ã—Ö —Å—Ç—Ä–æ–∫: {old_row_count}, –Ω–æ–≤—ã—Ö —Å—Ç—Ä–æ–∫: {new_row_count}")
            
            # –ï—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
            if new_row_count > old_row_count:
                # –ù—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å—Ç—Ä–æ–∫–∏
                rows_to_add = new_row_count - old_row_count
                logger.info(f"   ‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ {rows_to_add} —Å—Ç—Ä–æ–∫")
                for _ in range(rows_to_add):
                    self.worksheet.insert_row([], index=start_row)
                
            elif new_row_count < old_row_count:
                # –ù—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å —Å—Ç—Ä–æ–∫–∏
                rows_to_delete = old_row_count - new_row_count
                logger.info(f"   ‚ûñ –£–¥–∞–ª–µ–Ω–∏–µ {rows_to_delete} —Å—Ç—Ä–æ–∫")
                # –£–¥–∞–ª—è–µ–º —Å –∫–æ–Ω—Ü–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
                delete_start = start_row + new_row_count
                for _ in range(rows_to_delete):
                    self.worksheet.delete_rows(delete_start)
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            start_cell = f"A{start_row}"
            self.worksheet.update(range_name=start_cell, values=new_rows, value_input_option='USER_ENTERED')  # type: ignore[arg-type]
            logger.info(f"   ‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ {new_row_count} —Å—Ç—Ä–æ–∫")
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã
            self.add_group_borders(start_row, new_row_count, new_rows)
            
            logger.info(f"‚úÖ –ó–∞–∫–∞–∑ {order_number} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞: {e}")
            return False
    
    def prepare_rows_from_order(self, order: Dict) -> List[List]:
        """
        –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –∑–∞–ø–∏—Å–∏ –∏–∑ –æ–¥–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞.
        –†–∞–∑–≤–µ—Ä–Ω—É—Ç—å quantity –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏.
        
        Args:
            order: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –∑–∞–∫–∞–∑–∞
            
        Returns:
            –°–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫ –¥–ª—è –∑–∞–ø–∏—Å–∏
        """
        rows = []
        order_number = order.get('order_number', '')
        date = order.get('date', '')
        
        for item in order.get('items', []):
            quantity = item.get('quantity', 1)
            price = item.get('price', 0)
            status = item.get('status', '')
            mapped_name = item.get('mapped_name', item.get('name', ''))
            mapped_type = item.get('mapped_type', '')
            
            # –°–æ–∑–¥–∞—ë–º quantity –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ —Å—Ç—Ä–æ–∫
            for _ in range(quantity):
                row = [
                    date,                                      # A: –¥–∞—Ç–∞
                    order_number,                              # B: order_number
                    "–û–∑–æ–Ω",                                    # C: –≤—Å–µ–≥–¥–∞ "–û–∑–æ–Ω"
                    self.STATUS_MAPPING.get(status, status),  # D: status
                    "",                                        # E: —Ñ–æ—Ä–º—É–ª–∞ (–¥–æ–±–∞–≤–∏–º –ø–æ–∑–∂–µ)
                    price,                                     # F: price
                    mapped_name,                               # G: mapped_name
                    mapped_type,                               # H: mapped_type
                    ""                                         # I: –ø—É—Å—Ç–æ–π (—Ä–µ–∑–µ—Ä–≤)
                ]
                rows.append(row)
        
        logger.debug(f"–ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ {len(rows)} —Å—Ç—Ä–æ–∫ –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_number}")
        return rows
    
    def group_and_sort_rows(self, all_rows: List[List]) -> List[List]:
        """
        –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∞—Ç—å –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—Ä–æ–∫–∏: order_number ‚Üí mapped_name ‚Üí status.
        
        Args:
            all_rows: –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å—Ç—Ä–æ–∫ –¥–ª—è –∑–∞–ø–∏—Å–∏
            
        Returns:
            –û—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫
        """
        if not all_rows:
            return all_rows
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º: —Å–Ω–∞—á–∞–ª–∞ –ø–æ order_number (col B), –ø–æ—Ç–æ–º –ø–æ mapped_name (col G), –ø–æ—Ç–æ–º –ø–æ status (col D)
        def sort_key(row):
            order_number = row[1] if len(row) > 1 else ''  # B: order_number
            mapped_name = row[6] if len(row) > 6 else ''   # G: mapped_name
            status = row[3] if len(row) > 3 else ''        # D: status
            
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Å—Ç–∞—Ç—É—Å–∞
            status_priority = self.STATUS_PRIORITY.get(status, 999)
            
            return (order_number, mapped_name.lower(), status_priority)
        
        sorted_rows = sorted(all_rows, key=sort_key)
        logger.info(f"üîÑ –°—Ç—Ä–æ–∫–∏ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø–æ order_number ‚Üí mapped_name ‚Üí status")
        
        return sorted_rows
    
    def add_sum_formulas(self, sorted_rows: List[List], start_row: int) -> List[List]:
        """
        –î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ä–º—É–ª—ã SUM –≤ —Å—Ç–æ–ª–±–µ—Ü E –¥–ª—è –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã –∑–∞–∫–∞–∑–∞.
        
        Args:
            sorted_rows: –û—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
            start_row: –ù–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏ –Ω–∞—á–∞–ª–∞ –∑–∞–ø–∏—Å–∏
            
        Returns:
            –°—Ç—Ä–æ–∫–∏ —Å –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–º–∏ —Ñ–æ—Ä–º—É–ª–∞–º–∏
        """
        if not sorted_rows:
            return sorted_rows
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ order_number (–∫–æ–ª–æ–Ω–∫–∞ B, –∏–Ω–¥–µ–∫—Å 1)
        current_order = None
        group_start_idx = 0
        
        for idx, row in enumerate(sorted_rows):
            order_num = row[1] if len(row) > 1 else ''  # B: order_number
            
            # –ï—Å–ª–∏ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –Ω–æ–≤–∞—è –≥—Ä—É–ø–ø–∞ –∑–∞–∫–∞–∑–∞
            if order_num != current_order:
                # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º—É–ª—É –¥–ª—è –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≥—Ä—É–ø–ø—ã
                if current_order is not None and group_start_idx < idx:
                    formula_row = start_row + group_start_idx
                    end_formula_row = start_row + idx - 1
                    formula = f"=SUM(F{formula_row}:F{end_formula_row})"
                    sorted_rows[group_start_idx][4] = formula  # E: —Ñ–æ—Ä–º—É–ª–∞
                
                # –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É
                current_order = order_num
                group_start_idx = idx
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º—É–ª—É –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –≥—Ä—É–ø–ø—ã
        if current_order is not None and group_start_idx < len(sorted_rows):
            formula_row = start_row + group_start_idx
            end_formula_row = start_row + len(sorted_rows) - 1
            formula = f"=SUM(F{formula_row}:F{end_formula_row})"
            sorted_rows[group_start_idx][4] = formula  # E: —Ñ–æ—Ä–º—É–ª–∞
        
        logger.info(f"‚ûï –î–æ–±–∞–≤–ª–µ–Ω—ã —Ñ–æ—Ä–º—É–ª—ã SUM –¥–ª—è –≥—Ä—É–ø–ø –∑–∞–∫–∞–∑–æ–≤")
        
        return sorted_rows
    
    def add_group_borders(self, start_row: int, num_rows: int, sorted_rows: List[List]) -> None:
        """
        –î–æ–±–∞–≤–∏—Ç—å –≥—Ä–∞–Ω–∏—Ü—ã:
        1. –í–µ—Ä—Ö–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞ 1px –¥–ª—è –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏ –∫–∞–∂–¥–æ–≥–æ –∑–∞–∫–∞–∑–∞ (A-I)
        2. –ù–∏–∂–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞ 2px –º–µ–∂–¥—É –≥—Ä—É–ø–ø–∞–º–∏ —Ç–æ–≤–∞—Ä–æ–≤ (G-I)
        
        Args:
            start_row: –ù–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏ –Ω–∞—á–∞–ª–∞ –¥–∞–Ω–Ω—ã—Ö
            num_rows: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫
            sorted_rows: –û—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≥—Ä–∞–Ω–∏—Ü
        """
        try:
            if self.worksheet is None or not sorted_rows:
                return
            
            requests = []
            
            # 1. –ù–∞—Ö–æ–¥–∏–º –≥—Ä–∞–Ω–∏—Ü—ã –∑–∞–∫–∞–∑–æ–≤ (–¥–ª—è –≤–µ—Ä—Ö–Ω–µ–π –ª–∏–Ω–∏–∏ 1px)
            order_borders = []
            current_order = None
            
            for idx, row in enumerate(sorted_rows):
                order_num = row[1] if len(row) > 1 else ''  # B: order_number
                
                # –ï—Å–ª–∏ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑
                if order_num != current_order:
                    order_borders.append(start_row + idx)
                    current_order = order_num
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤–µ—Ä—Ö–Ω–∏–µ –≥—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –∑–∞–∫–∞–∑–æ–≤ (A-I, 1px)
            for border_row in order_borders:
                request = {
                    "updateBorders": {
                        "range": {
                            "sheetId": self.worksheet.id,
                            "startRowIndex": border_row - 1,  # -1 –¥–ª—è 0-–∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏
                            "endRowIndex": border_row,
                            "startColumnIndex": 0,  # A
                            "endColumnIndex": 9     # I (–Ω–µ –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ)
                        },
                        "top": {
                            "style": "SOLID",
                            "width": 1,
                            "color": {"red": 0, "green": 0, "blue": 0}
                        }
                    }
                }
                requests.append(request)
            
            logger.info(f"ÔøΩ –î–æ–±–∞–≤–ª–µ–Ω—ã –≤–µ—Ä—Ö–Ω–∏–µ –≥—Ä–∞–Ω–∏—Ü—ã –¥–ª—è {len(order_borders)} –∑–∞–∫–∞–∑–æ–≤")
            
            # 2. –ù–∞—Ö–æ–¥–∏–º –≥—Ä–∞–Ω–∏—Ü—ã –≥—Ä—É–ø–ø —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ mapped_name (–¥–ª—è –Ω–∏–∂–Ω–µ–π –ª–∏–Ω–∏–∏ 2px)
            group_borders = []
            current_name = None
            current_order = None
            
            for idx, row in enumerate(sorted_rows):
                order_num = row[1] if len(row) > 1 else ''  # B: order_number
                mapped_name = row[6] if len(row) > 6 else ''  # G: mapped_name
                
                # –ï—Å–ª–∏ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –Ω–æ–≤–∞—è –≥—Ä—É–ø–ø–∞ —Ç–æ–≤–∞—Ä–æ–≤ (–Ω–æ –Ω–µ –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑)
                if mapped_name != current_name and current_name is not None and order_num == current_order:
                    # –ì—Ä–∞–Ω–∏—Ü–∞ –ø–æ—Å–ª–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≥—Ä—É–ø–ø—ã
                    group_borders.append(start_row + idx - 1)
                
                current_name = mapped_name
                current_order = order_num
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∏–∂–Ω–∏–µ –≥—Ä–∞–Ω–∏—Ü—ã –º–µ–∂–¥—É –≥—Ä—É–ø–ø–∞–º–∏ —Ç–æ–≤–∞—Ä–æ–≤ (G-I, 2px)
            for border_row in group_borders:
                request = {
                    "updateBorders": {
                        "range": {
                            "sheetId": self.worksheet.id,
                            "startRowIndex": border_row - 1,  # -1 –¥–ª—è 0-–∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏
                            "endRowIndex": border_row,
                            "startColumnIndex": 6,  # G
                            "endColumnIndex": 9      # I (–Ω–µ –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ)
                        },
                        "bottom": {
                            "style": "SOLID",
                            "width": 1,
                            "color": {"red": 0, "green": 0, "blue": 0}
                        }
                    }
                }
                requests.append(request)
            
            logger.info(f"üî≤ –î–æ–±–∞–≤–ª–µ–Ω—ã –Ω–∏–∂–Ω–∏–µ –≥—Ä–∞–Ω–∏—Ü—ã –º–µ–∂–¥—É {len(group_borders)} –≥—Ä—É–ø–ø–∞–º–∏ —Ç–æ–≤–∞—Ä–æ–≤")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º batch –∑–∞–ø—Ä–æ—Å
            if requests and self.spreadsheet:
                self.spreadsheet.batch_update({"requests": requests})
                logger.info(f"‚úÖ –ü—Ä–∏–º–µ–Ω–µ–Ω—ã –≥—Ä–∞–Ω–∏—Ü—ã: {len(order_borders)} –∑–∞–∫–∞–∑–æ–≤ + {len(group_borders)} –≥—Ä—É–ø–ø —Ç–æ–≤–∞—Ä–æ–≤")
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –≥—Ä–∞–Ω–∏—Ü—ã: {e}")
            # –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É
    
    def sync_orders(self, orders_data: Dict[str, Any]) -> bool:
        """
        –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∑–∞–∫–∞–∑—ã —Å Google Sheets (MVP –≤–µ—Ä—Å–∏—è).
        
        Args:
            orders_data: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –∑–∞–∫–∞–∑–æ–≤ –∏–∑ ozon_orders.json
            
        Returns:
            True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            logger.info("üîÑ –ù–∞—á–∏–Ω–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –∑–∞–∫–∞–∑–æ–≤ —Å Google Sheets...")
            sync_send_message("üîÑ <b>–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å Google Sheets...</b>")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–∫–∞–∑—ã
            existing_orders = self.get_existing_orders()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–∫–∞–∑—ã –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è
            orders_list = orders_data.get('orders', [])
            updated_orders = []
            
            for order in orders_list:
                order_number = order.get('order_number')
                
                # –ï—Å–ª–∏ –∑–∞–∫–∞–∑ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è
                if order_number in existing_orders:
                    logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–∫–∞–∑–∞ {order_number} –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è...")
                    
                    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Sheets
                    sheets_data = self.get_order_data(order_number)
                    
                    if sheets_data:
                        # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º
                        comparison = self.compare_orders(order, sheets_data)
                        
                        if comparison['has_changes']:
                            logger.warning(f"‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∑–∞–∫–∞–∑–µ {order_number}")
                            
                            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram
                            changes_text = "\n".join([f"  ‚Ä¢ {change}" for change in comparison['changes'][:5]])
                            if len(comparison['changes']) > 5:
                                changes_text += f"\n  ‚Ä¢ ... –µ—â—ë {len(comparison['changes']) - 5} –∏–∑–º–µ–Ω–µ–Ω–∏–π"
                            
                            sync_send_message(
                                f"‚ö†Ô∏è <b>–ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∑–∞–∫–∞–∑–µ {order_number}:</b>\n{changes_text}\n\n"
                                f"üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ..."
                            )
                            
                            # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫–∞–∑
                            if self.update_order(order, sheets_data):
                                updated_orders.append(order_number)
                                sync_send_message(f"‚úÖ –ó–∞–∫–∞–∑ {order_number} –æ–±–Ω–æ–≤–ª—ë–Ω")
                            else:
                                sync_send_message(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∑–∞–∫–∞–∑ {order_number}")
            
            if updated_orders:
                logger.info(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤: {len(updated_orders)}")
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –Ω–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã
            new_orders = [
                order for order in orders_list
                if order.get('order_number') not in existing_orders
            ]
            
            # –ï—Å–ª–∏ –Ω–µ—Ç –Ω–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π, –Ω–∏ –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤
            if not new_orders and not updated_orders:
                logger.info("‚úÖ –ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏")
                sync_send_message("‚úÖ –ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏")
                return True
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã - –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö
            if new_orders:
                logger.info(f"üì¶ –ù–∞–π–¥–µ–Ω–æ –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤: {len(new_orders)}")
                sync_send_message(f"üì¶ <b>–ù–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤:</b> {len(new_orders)}")
                
                # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏
                all_rows = []
                for order in new_orders:
                    rows = self.prepare_rows_from_order(order)
                    all_rows.extend(rows)
                
                logger.info(f"üìù –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: {len(all_rows)}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ worksheet –Ω–µ None
                if self.worksheet is None:
                    raise RuntimeError("Worksheet –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                
                # –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –≤ —Å—Ç–æ–ª–±—Ü–µ A
                column_a = self.worksheet.col_values(1)
                last_row = len([cell for cell in column_a if isinstance(cell, str) and cell.strip()]) + 1
                
                logger.info(f"üìç –ù–∞—á–∞–ª–æ –∑–∞–ø–∏—Å–∏ —Å —Å—Ç—Ä–æ–∫–∏: {last_row}")
                
                # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏
                all_rows = self.group_and_sort_rows(all_rows)
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º—É–ª—ã SUM
                all_rows = self.add_sum_formulas(all_rows, last_row)
                
                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                if all_rows:
                    start_cell = f"A{last_row}"
                    # type: ignore –¥–ª—è gspread API
                    self.worksheet.update(range_name=start_cell, values=all_rows, value_input_option='USER_ENTERED')  # type: ignore[arg-type]
                    
                    logger.info(f"‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ {len(all_rows)} —Å—Ç—Ä–æ–∫ –≤ —Ç–∞–±–ª–∏—Ü—É")
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã –º–µ–∂–¥—É –≥—Ä—É–ø–ø–∞–º–∏
                    self.add_group_borders(last_row, len(all_rows), all_rows)
                    
                    # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –µ—Å—Ç—å –±—É—Ñ–µ—Ä –ø—É—Å—Ç—ã—Ö —Å—Ç—Ä–æ–∫ –ø–æ—Å–ª–µ –¥–∞–Ω–Ω—ã—Ö
                    last_used_row = last_row + len(all_rows) - 1
                    self.ensure_buffer_rows(last_used_row, buffer_size=1000)
                    
                    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    summary_parts = []
                    if updated_orders:
                        summary_parts.append(f"üîÑ <b>–û–±–Ω–æ–≤–ª–µ–Ω–æ:</b> {len(updated_orders)}")
                    summary_parts.append(f"‚ûï <b>–î–æ–±–∞–≤–ª–µ–Ω–æ:</b> {len(new_orders)}")
                    summary_parts.append(f"üìù <b>–ó–∞–ø–∏—Å–∞–Ω–æ —Å—Ç—Ä–æ–∫:</b> {len(all_rows)}")
                    
                    sync_send_message("‚úÖ " + "\n".join(summary_parts))
            elif updated_orders:
                # –ë—ã–ª–∏ —Ç–æ–ª—å–∫–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, –±–µ–∑ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö
                sync_send_message(f"‚úÖ <b>–û–±–Ω–æ–≤–ª–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤:</b> {len(updated_orders)}")
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")
            sync_send_message(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")
            return False


def sync_to_sheets(orders_json_path: str = "ozon_orders.json") -> bool:
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∑–∞–∫–∞–∑–æ–≤ —Å Google Sheets.
    
    Args:
        orders_json_path: –ü—É—Ç—å –∫ JSON —Ñ–∞–π–ª—É —Å –∑–∞–∫–∞–∑–∞–º–∏
        
    Returns:
        True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ
    """
    try:
        import json
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ JSON
        with open(orders_json_path, 'r', encoding='utf-8') as f:
            orders_data = json.load(f)
        
        logger.info(f"üìÇ –ó–∞–≥—Ä—É–∂–µ–Ω JSON: {orders_json_path}")
        logger.info(f"üìä –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: {orders_data.get('total_orders', 0)}")
        
        # –°–æ–∑–¥–∞—ë–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ç–æ—Ä
        sync = SheetsSynchronizer(Config.GOOGLE_CREDENTIALS_FILE)
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è
        if not sync.connect():
            return False
        
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –ª–∏—Å—Ç –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        if not sync.open_sync_worksheet(Config.GOOGLE_SHEETS_URL, Config.GOOGLE_SHEETS_SYNC_GID):
            return False
        
        # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º
        return sync.sync_orders(orders_data)
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")
        return False
