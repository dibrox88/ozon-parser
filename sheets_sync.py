"""
–ú–æ–¥—É–ª—å –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∑–∞–∫–∞–∑–æ–≤ —Å Google Sheets.
MVP –≤–µ—Ä—Å–∏—è: –±–∞–∑–æ–≤–∞—è –∑–∞–ø–∏—Å—å –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤.
"""

import gspread
from google.oauth2.service_account import Credentials
from loguru import logger
from typing import List, Dict, Optional
from config import Config
from notifier import sync_send_message


class SheetsSynchronizer:
    """–ö–ª–∞—Å—Å –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∑–∞–∫–∞–∑–æ–≤ —Å Google Sheets."""
    
    SCOPES = [
        'https://www.googleapis.com/auth/spreadsheets',
        'https://www.googleapis.com/auth/drive'
    ]
    
    # –ú–∞–ø–ø–∏–Ω–≥ —Å—Ç–∞—Ç—É—Å–æ–≤ –¥–ª—è —Å—Ç–æ–ª–±—Ü–∞ D
    STATUS_MAPPING = {
        '–ø–æ–ª—É—á–µ–Ω': 'TRUE',      # –ì–∞–ª–æ—á–∫–∞
        '–∑–∞–±—Ä–∞—Ç—å': 'FALSE',     # –ù–µ—Ç –≥–∞–ª–æ—á–∫–∏ (—è–≤–Ω–æ FALSE)
        '–≤ –ø—É—Ç–∏': '–≤ –ø—É—Ç–∏',     # –¢–µ–∫—Å—Ç
        '–æ—Ç–º–µ–Ω–µ–Ω': '–æ—Ç–º–µ–Ω–µ–Ω'    # –¢–µ–∫—Å—Ç
    }
    
    def __init__(self, credentials_file: str):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ç–æ—Ä–∞.
        
        Args:
            credentials_file: –ü—É—Ç—å –∫ JSON —Ñ–∞–π–ª—É —Å credentials –æ—Ç Google
        """
        self.credentials_file = credentials_file
        self.client: Optional[gspread.Client] = None
        self.spreadsheet = None
        self.worksheet = None
        
    def connect(self) -> bool:
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets API —Å –ø—Ä–∞–≤–∞–º–∏ –∑–∞–ø–∏—Å–∏."""
        try:
            logger.info("üîÑ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets (–∑–∞–ø–∏—Å—å)...")
            creds = Credentials.from_service_account_file(
                self.credentials_file,
                scopes=self.SCOPES
            )
            self.client = gspread.authorize(creds)
            logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ (—Ä–µ–∂–∏–º –∑–∞–ø–∏—Å–∏)")
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            return False
    
    def open_sync_worksheet(self, spreadsheet_url: str, gid: str) -> bool:
        """
        –û—Ç–∫—Ä—ã—Ç—å –ª–∏—Å—Ç –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø–æ GID.
        
        Args:
            spreadsheet_url: URL —Ç–∞–±–ª–∏—Ü—ã
            gid: ID –ª–∏—Å—Ç–∞
            
        Returns:
            True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            if self.client is None:
                raise RuntimeError("–ö–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –í—ã–∑–æ–≤–∏—Ç–µ connect() —Å–Ω–∞—á–∞–ª–∞.")
            
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
            self.spreadsheet = self.client.open_by_url(spreadsheet_url)
            
            # –ò—â–µ–º –ª–∏—Å—Ç –ø–æ GID
            for ws in self.spreadsheet.worksheets():
                if str(ws.id) == str(gid):
                    self.worksheet = ws
                    logger.info(f"üìÑ –û—Ç–∫—Ä—ã—Ç –ª–∏—Å—Ç: {ws.title} (gid={gid})")
                    return True
            
            logger.error(f"‚ùå –õ–∏—Å—Ç —Å gid={gid} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –ª–∏—Å—Ç–∞: {e}")
            return False
    
    def get_existing_orders(self) -> List[str]:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö order_number –∏–∑ —Å—Ç–æ–ª–±—Ü–∞ B.
        
        Returns:
            –°–ø–∏—Å–æ–∫ –Ω–æ–º–µ—Ä–æ–≤ –∑–∞–∫–∞–∑–æ–≤
        """
        try:
            if self.worksheet is None:
                return []
            
            # –ß–∏—Ç–∞–µ–º —Å—Ç–æ–ª–±–µ—Ü B (order_number)
            column_b = self.worksheet.col_values(2)  # 2 = —Å—Ç–æ–ª–±–µ—Ü B
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –ø—É—Å—Ç—ã–µ –∏ –∑–∞–≥–æ–ª–æ–≤–∫–∏
            existing_orders = [
                order_num for order_num in column_b 
                if order_num and order_num not in ['order_number', '–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞', '']
            ]
            
            logger.info(f"üìã –ù–∞–π–¥–µ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–∫–∞–∑–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü–µ: {len(existing_orders)}")
            return existing_orders
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–∫–∞–∑–æ–≤: {e}")
            return []
    
    def prepare_rows_from_order(self, order: Dict) -> List[List]:
        """
        –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –∑–∞–ø–∏—Å–∏ –∏–∑ –æ–¥–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞.
        –†–∞–∑–≤–µ—Ä–Ω—É—Ç—å quantity –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏.
        
        Args:
            order: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –∑–∞–∫–∞–∑–∞
            
        Returns:
            –°–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫ –¥–ª—è –∑–∞–ø–∏—Å–∏
        """
        rows = []
        order_number = order.get('order_number', '')
        date = order.get('date', '')
        
        for item in order.get('items', []):
            quantity = item.get('quantity', 1)
            price = item.get('price', 0)
            status = item.get('status', '')
            mapped_name = item.get('mapped_name', item.get('name', ''))
            mapped_type = item.get('mapped_type', '')
            
            # –°–æ–∑–¥–∞—ë–º quantity –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ —Å—Ç—Ä–æ–∫
            for _ in range(quantity):
                row = [
                    date,                                      # A: –¥–∞—Ç–∞
                    order_number,                              # B: order_number
                    "–û–∑–æ–Ω",                                    # C: –≤—Å–µ–≥–¥–∞ "–û–∑–æ–Ω"
                    self.STATUS_MAPPING.get(status, status),  # D: status
                    "",                                        # E: —Ñ–æ—Ä–º—É–ª–∞ (–¥–æ–±–∞–≤–∏–º –ø–æ–∑–∂–µ)
                    price,                                     # F: price
                    mapped_name,                               # G: mapped_name
                    mapped_type,                               # H: mapped_type
                    ""                                         # I: –ø—É—Å—Ç–æ–π (—Ä–µ–∑–µ—Ä–≤)
                ]
                rows.append(row)
        
        logger.debug(f"–ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ {len(rows)} —Å—Ç—Ä–æ–∫ –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_number}")
        return rows
    
    def sync_orders(self, orders_data: List[Dict]) -> bool:
        """
        –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∑–∞–∫–∞–∑—ã —Å Google Sheets (MVP –≤–µ—Ä—Å–∏—è).
        
        Args:
            orders_data: –°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ –∏–∑ ozon_orders.json
            
        Returns:
            True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            logger.info("üîÑ –ù–∞—á–∏–Ω–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –∑–∞–∫–∞–∑–æ–≤ —Å Google Sheets...")
            sync_send_message("üîÑ <b>–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å Google Sheets...</b>")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–∫–∞–∑—ã
            existing_orders = self.get_existing_orders()
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –Ω–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã
            new_orders = [
                order for order in orders_data['orders']
                if order.get('order_number') not in existing_orders
            ]
            
            if not new_orders:
                logger.info("‚úÖ –ù–µ—Ç –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è")
                sync_send_message("‚úÖ –ù–µ—Ç –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è")
                return True
            
            logger.info(f"üì¶ –ù–∞–π–¥–µ–Ω–æ –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤: {len(new_orders)}")
            sync_send_message(f"üì¶ <b>–ù–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤:</b> {len(new_orders)}")
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏
            all_rows = []
            for order in new_orders:
                rows = self.prepare_rows_from_order(order)
                all_rows.extend(rows)
            
            logger.info(f"üìù –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: {len(all_rows)}")
            
            # –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –≤ —Å—Ç–æ–ª–±—Ü–µ A
            column_a = self.worksheet.col_values(1)
            last_row = len([cell for cell in column_a if cell.strip()]) + 1
            
            logger.info(f"üìç –ù–∞—á–∞–ª–æ –∑–∞–ø–∏—Å–∏ —Å —Å—Ç—Ä–æ–∫–∏: {last_row}")
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            if all_rows:
                start_cell = f"A{last_row}"
                self.worksheet.update(start_cell, all_rows, value_input_option='USER_ENTERED')
                
                logger.info(f"‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ {len(all_rows)} —Å—Ç—Ä–æ–∫ –≤ —Ç–∞–±–ª–∏—Ü—É")
                sync_send_message(f"‚úÖ <b>–ó–∞–ø–∏—Å–∞–Ω–æ —Å—Ç—Ä–æ–∫:</b> {len(all_rows)}\n<b>–ù–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤:</b> {len(new_orders)}")
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")
            sync_send_message(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")
            return False


def sync_to_sheets(orders_json_path: str = "ozon_orders.json") -> bool:
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∑–∞–∫–∞–∑–æ–≤ —Å Google Sheets.
    
    Args:
        orders_json_path: –ü—É—Ç—å –∫ JSON —Ñ–∞–π–ª—É —Å –∑–∞–∫–∞–∑–∞–º–∏
        
    Returns:
        True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ
    """
    try:
        import json
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ JSON
        with open(orders_json_path, 'r', encoding='utf-8') as f:
            orders_data = json.load(f)
        
        logger.info(f"üìÇ –ó–∞–≥—Ä—É–∂–µ–Ω JSON: {orders_json_path}")
        logger.info(f"üìä –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: {orders_data.get('total_orders', 0)}")
        
        # –°–æ–∑–¥–∞—ë–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ç–æ—Ä
        sync = SheetsSynchronizer(Config.GOOGLE_CREDENTIALS_FILE)
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è
        if not sync.connect():
            return False
        
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –ª–∏—Å—Ç –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        if not sync.open_sync_worksheet(Config.GOOGLE_SHEETS_URL, Config.GOOGLE_SHEETS_SYNC_GID):
            return False
        
        # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º
        return sync.sync_orders(orders_data)
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")
        return False
