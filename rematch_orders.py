"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–µ—Ä–µ—Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º JSON —Ñ–∞–π–ª–µ.
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—É—é –ª–æ–≥–∏–∫—É —Å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º —á–µ—Ä–µ–∑ Telegram.
"""

import json
import sys
from pathlib import Path
from datetime import datetime
from loguru import logger

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
Path('logs').mkdir(exist_ok=True)
logger.add(
    "logs/rematch_{time}.log",
    rotation="1 day",
    retention="7 days",
    level="INFO",
    format="{time:YYYY-MM-DD HH:mm:ss} | {level} | {message}"
)

from config import Config
from sheets_manager import SheetsManager
from product_matcher import ProductMatcher, match_product_interactive
from notifier import sync_send_message


def load_orders_json(filename: str) -> dict:
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞–∫–∞–∑—ã –∏–∑ JSON —Ñ–∞–π–ª–∞."""
    try:
        with open(filename, 'r', encoding='utf-8') as f:
            data = json.load(f)
        logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω JSON: {filename}")
        return data
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ JSON: {e}")
        return {}


def save_orders_json(data: dict, filename: str) -> bool:
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã –≤ JSON —Ñ–∞–π–ª."""
    try:
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
        logger.info(f"‚úÖ –°–æ—Ö—Ä–∞–Ω—ë–Ω –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π JSON: {filename}")
        return True
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è JSON: {e}")
        return False


def extract_unique_items(orders_data: dict) -> list:
    """–ò–∑–≤–ª–µ—á—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –∑–∞–∫–∞–∑–æ–≤."""
    unique_items = {}
    
    for order in orders_data.get('orders', []):
        for item in order.get('items', []):
            # –°–æ–∑–¥–∞—ë–º –∫–ª—é—á: –Ω–∞–∑–≤–∞–Ω–∏–µ + —Ü–≤–µ—Ç
            key = f"{item['name']}|{item.get('color', '')}"
            
            if key not in unique_items:
                unique_items[key] = {
                    'name': item['name'],
                    'color': item.get('color', ''),
                    'quantity': item.get('quantity', 1),
                    'price': item.get('price', 0)
                }
    
    logger.info(f"üìã –ò–∑–≤–ª–µ—á–µ–Ω–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤: {len(unique_items)}")
    return list(unique_items.values())


def rematch_orders(orders_data: dict, matcher: ProductMatcher) -> dict:
    """
    –ü–µ—Ä–µ—Å–æ–ø–æ—Å—Ç–∞–≤–∏—Ç—å –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –≤ –∑–∞–∫–∞–∑–∞—Ö —Å –Ω–æ–≤–æ–π –ª–æ–≥–∏–∫–æ–π.
    
    Args:
        orders_data: –î–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–æ–≤ –∏–∑ JSON
        matcher: –û–±—ä–µ–∫—Ç ProductMatcher
        
    Returns:
        –û–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–æ–≤
    """
    logger.info("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –ø–µ—Ä–µ—Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤...")
    sync_send_message("üîÑ <b>–ù–∞—á–∏–Ω–∞–µ–º –ø–µ—Ä–µ—Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤</b>\n\n–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º —á–µ—Ä–µ–∑ Telegram.")
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
    unique_items = extract_unique_items(orders_data)
    
    # –°–æ–∑–¥–∞—ë–º –∫–∞—Ä—Ç—É —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–π –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
    mapping_cache = {}
    
    logger.info(f"üì¶ –ë—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤: {len(unique_items)}")
    sync_send_message(f"üì¶ <b>–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤:</b> {len(unique_items)}\n\n–ù–∞—á–∏–Ω–∞–µ–º —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ...")
    
    # –°–æ–ø–æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ç–æ–≤–∞—Ä
    for idx, item in enumerate(unique_items, 1):
        logger.info(f"\n[{idx}/{len(unique_items)}] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º: {item['name']}")
        sync_send_message(f"üîÑ [{idx}/{len(unique_items)}] {item['name'][:50]}...")
        
        # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ (auto_mode=False –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
        mapped_name, mapped_type = match_product_interactive(item, matcher, auto_mode=False)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–µ—à
        key = f"{item['name']}|{item.get('color', '')}"
        mapping_cache[key] = {
            'mapped_name': mapped_name,
            'mapped_type': mapped_type
        }
        
        logger.info(f"‚úÖ [{idx}/{len(unique_items)}] {item['name']} ‚Üí {mapped_name} ({mapped_type})")
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∫–æ –≤—Å–µ–º —Ç–æ–≤–∞—Ä–∞–º –≤ –∑–∞–∫–∞–∑–∞—Ö
    logger.info("\nüìù –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∫–æ –≤—Å–µ–º —Ç–æ–≤–∞—Ä–∞–º...")
    updated_orders_data = orders_data.copy()
    
    for order in updated_orders_data.get('orders', []):
        for item in order.get('items', []):
            key = f"{item['name']}|{item.get('color', '')}"
            
            if key in mapping_cache:
                item['mapped_name'] = mapping_cache[key]['mapped_name']
                item['mapped_type'] = mapping_cache[key]['mapped_type']
    
    logger.info("‚úÖ –ü–µ—Ä–µ—Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    sync_send_message("‚úÖ <b>–ü–µ—Ä–µ—Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!</b>\n\n–í—Å–µ —Ç–æ–≤–∞—Ä—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã.")
    
    return updated_orders_data


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    try:
        logger.info("=" * 60)
        logger.info("–ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ –ø–µ—Ä–µ—Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤")
        logger.info("=" * 60)
        
        sync_send_message("üöÄ <b>–ó–∞–ø—É—Å–∫ –ø–µ—Ä–µ—Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤</b>\n\n–ë—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω —Ñ–∞–π–ª:\nozon_orders_2025-10-06_00-49-56.json")
        
        # –ü—É—Ç—å –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É JSON (–∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–æ—Å—Ç—É–ø–Ω—ã–π)
        json_file = "ozon_orders_2025-10-06_00-49-56.json"
        
        if not Path(json_file).exists():
            logger.error(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {json_file}")
            sync_send_message(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {json_file}")
            return
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–∫–∞–∑—ã
        orders_data = load_orders_json(json_file)
        if not orders_data:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–æ–≤")
            return
        
        logger.info(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤: {orders_data.get('total_orders', 0)}")
        logger.info(f"üì¶ –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: {orders_data.get('statistics', {}).get('total_items', 0)}")
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Google Sheets
        logger.info("üîÑ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets...")
        sync_send_message("üîÑ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets...")
        
        sheets = SheetsManager(Config.GOOGLE_CREDENTIALS_FILE)
        if not sheets.connect():
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Google Sheets")
            sync_send_message("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets")
            return
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤ (—Ç–µ–ø–µ—Ä—å —Å 4 —Å—Ç–æ–ª–±—Ü–∞–º–∏)
        catalog_products = sheets.load_products_from_sheet(
            Config.GOOGLE_SHEETS_URL,
            columns_range="A:AU"
        )
        
        if not catalog_products:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤")
            sync_send_message("‚ùå –ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤ –ø—É—Å—Ç")
            return
        
        logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞: {len(catalog_products)}")
        sync_send_message(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞: {len(catalog_products)}")
        
        # –°–æ–∑–¥–∞—ë–º matcher (–æ—á–∏—Å—Ç–∏–º —Å—Ç–∞—Ä—ã–π –∫–µ—à —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–π –¥–ª—è —á–∏—Å—Ç–æ–≥–æ —Ç–µ—Å—Ç–∞)
        matcher = ProductMatcher(
            catalog_products,
            mappings_file="product_mappings_new.json"  # –ù–æ–≤—ã–π —Ñ–∞–π–ª –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        )
        
        # –ü–µ—Ä–µ—Å–æ–ø–æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä—ã
        updated_orders = rematch_orders(orders_data, matcher)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π JSON
        output_file = f"ozon_orders_rematched_{datetime.now().strftime('%Y-%m-%d_%H-%M-%S')}.json"
        if save_orders_json(updated_orders, output_file):
            logger.info(f"‚úÖ –û–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {output_file}")
            sync_send_message(f"‚úÖ <b>–ì–æ—Ç–æ–≤–æ!</b>\n\n–û–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤:\n{output_file}")
        
        logger.info("=" * 60)
        logger.info("–†–∞–±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        logger.info("=" * 60)
        
    except KeyboardInterrupt:
        logger.info("‚ö†Ô∏è –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sync_send_message("‚ö†Ô∏è –†–∞–±–æ—Ç–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(0)
    except Exception as e:
        logger.exception(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sync_send_message(f"‚ùå <b>–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞</b>\n\n{str(e)}")
        sys.exit(1)


if __name__ == '__main__':
    main()
