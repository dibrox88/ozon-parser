"""
Telegram –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞—Ä—Å–µ—Ä–æ–º Ozon.
–ü–æ–∑–≤–æ–ª—è–µ—Ç –∑–∞–ø—É—Å–∫–∞—Ç—å –ø–∞—Ä—Å–∏–Ω–≥ –≤—Ä—É—á–Ω—É—é —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—ã.
"""

import asyncio
import subprocess
import os
from datetime import datetime
from telegram import Update, BotCommand
from telegram.ext import Application, CommandHandler, ContextTypes
from loguru import logger
from config import Config

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞
parsing_in_progress = False
last_parse_time = None


async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /start - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥."""
    welcome_message = (
        "ü§ñ <b>Ozon Parser Bot</b>\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n"
        "/parse - –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–∞—Ä—Å–∏–Ω–≥ –≤—Ä—É—á–Ω—É—é\n"
        "/status - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –ø–∞—Ä—Å–µ—Ä–∞\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n\n"
        "‚è∞ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫: –∫–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç (9:00-21:00 –ú–°–ö)"
    )
    await update.message.reply_text(welcome_message, parse_mode='HTML')


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /help - —Å–ø—Ä–∞–≤–∫–∞."""
    help_message = (
        "‚ÑπÔ∏è <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:</b>\n\n"
        "<b>/parse</b> - –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–∞—Ä—Å–∏–Ω–≥ Ozon –∑–∞–∫–∞–∑–æ–≤ –≤—Ä—É—á–Ω—É—é\n"
        "  ‚Ä¢ –ü–∞—Ä—Å–∏—Ç –Ω–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã\n"
        "  ‚Ä¢ –û–±–Ω–æ–≤–ª—è–µ—Ç Google Sheets\n"
        "  ‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ö–æ–¥–µ —Ä–∞–±–æ—Ç—ã\n\n"
        "<b>/status</b> - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–∞—Ä—Å–µ—Ä–∞\n"
        "  ‚Ä¢ –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç, –∑–∞–ø—É—â–µ–Ω –ª–∏ –ø–∞—Ä—Å–µ—Ä —Å–µ–π—á–∞—Å\n"
        "  ‚Ä¢ –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—É—Å–∫–∞\n\n"
        "<b>/help</b> - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n\n"
        "‚ö†Ô∏è <b>–í–∞–∂–Ω–æ:</b>\n"
        "‚Ä¢ –ü–∞—Ä—Å–µ—Ä –Ω–µ–ª—å–∑—è –∑–∞–ø—É—Å—Ç–∏—Ç—å, –µ—Å–ª–∏ –æ–Ω —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç\n"
        "‚Ä¢ Cookies –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–ª—è—Ç—å –∫–∞–∂–¥—ã–µ 3-7 –¥–Ω–µ–π"
    )
    await update.message.reply_text(help_message, parse_mode='HTML')


async def status_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /status - –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –ø–∞—Ä—Å–µ—Ä–∞."""
    global parsing_in_progress, last_parse_time
    
    if parsing_in_progress:
        status_message = (
            "‚è≥ <b>–ü–∞—Ä—Å–µ—Ä –†–ê–ë–û–¢–ê–ï–¢</b>\n\n"
            "–î–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞."
        )
    else:
        if last_parse_time:
            time_ago = datetime.now() - last_parse_time
            hours = int(time_ago.total_seconds() // 3600)
            minutes = int((time_ago.total_seconds() % 3600) // 60)
            time_str = f"{hours}—á {minutes}–º–∏–Ω –Ω–∞–∑–∞–¥" if hours > 0 else f"{minutes}–º–∏–Ω –Ω–∞–∑–∞–¥"
            
            status_message = (
                "‚úÖ <b>–ü–∞—Ä—Å–µ—Ä –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ</b>\n\n"
                f"–ü–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–ø—É—Å–∫: {time_str}\n"
                f"–í—Ä–µ–º—è: {last_parse_time.strftime('%d.%m.%Y %H:%M:%S')}\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /parse –¥–ª—è –∑–∞–ø—É—Å–∫–∞."
            )
        else:
            status_message = (
                "‚úÖ <b>–ü–∞—Ä—Å–µ—Ä –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ</b>\n\n"
                "–ï—â—ë –Ω–µ –∑–∞–ø—É—Å–∫–∞–ª—Å—è —Å –º–æ–º–µ–Ω—Ç–∞ —Å—Ç–∞—Ä—Ç–∞ –±–æ—Ç–∞.\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /parse –¥–ª—è –∑–∞–ø—É—Å–∫–∞."
            )
    
    await update.message.reply_text(status_message, parse_mode='HTML')


async def parse_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /parse - –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø–∞—Ä—Å–∏–Ω–≥ –≤—Ä—É—á–Ω—É—é."""
    global parsing_in_progress, last_parse_time
    
    if parsing_in_progress:
        await update.message.reply_text(
            "‚ö†Ô∏è <b>–ü–∞—Ä—Å–µ—Ä —É–∂–µ –∑–∞–ø—É—â–µ–Ω!</b>\n\n"
            "–î–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞.",
            parse_mode='HTML'
        )
        return
    
    parsing_in_progress = True
    last_parse_time = datetime.now()
    
    await update.message.reply_text(
        "üöÄ <b>–ó–∞–ø—É—Å–∫–∞—é –ø–∞—Ä—Å–µ—Ä...</b>\n\n"
        "–°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏ –≤ —ç—Ç–æ–º —á–∞—Ç–µ.",
        parse_mode='HTML'
    )
    
    logger.info(f"–ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω –≤—Ä—É—á–Ω—É—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {update.effective_user.id}")
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–µ—Ä –∫–∞–∫ subprocess
        result = subprocess.run(
            ['python', 'main.py'],
            capture_output=True,
            text=True,
            timeout=1800  # 30 –º–∏–Ω—É—Ç –º–∞–∫—Å–∏–º—É–º
        )
        
        if result.returncode == 0:
            logger.info("‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        else:
            logger.error(f"‚ùå –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π: {result.returncode}")
            await update.message.reply_text(
                f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞</b>\n\n"
                f"–ö–æ–¥ –æ—à–∏–±–∫–∏: {result.returncode}\n"
                f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π.",
                parse_mode='HTML'
            )
    
    except subprocess.TimeoutExpired:
        logger.error("‚è±Ô∏è –ü–∞—Ä—Å–∏–Ω–≥ –ø—Ä–µ–≤—ã—Å–∏–ª –ª–∏–º–∏—Ç –≤—Ä–µ–º–µ–Ω–∏ (30 –º–∏–Ω)")
        await update.message.reply_text(
            "‚è±Ô∏è <b>–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è</b>\n\n"
            "–ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–Ω—è–ª –±–æ–ª–µ–µ 30 –º–∏–Ω—É—Ç –∏ –±—ã–ª –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.\n"
            "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π.",
            parse_mode='HTML'
        )
    
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø–∞—Ä—Å–µ—Ä–∞: {e}")
        await update.message.reply_text(
            f"‚ùå <b>–û—à–∏–±–∫–∞</b>\n\n{str(e)}",
            parse_mode='HTML'
        )
    
    finally:
        parsing_in_progress = False


async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫."""
    logger.error(f"–û—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ: {context.error}")


async def post_init(application: Application):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞ –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ - —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥."""
    commands = [
        BotCommand("start", "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
        BotCommand("parse", "üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–∞—Ä—Å–∏–Ω–≥"),
        BotCommand("status", "üìä –°—Ç–∞—Ç—É—Å –ø–∞—Ä—Å–µ—Ä–∞"),
        BotCommand("help", "‚ùì –°–ø—Ä–∞–≤–∫–∞"),
    ]
    await application.bot.set_my_commands(commands)
    logger.info("‚úÖ –ú–µ–Ω—é –∫–æ–º–∞–Ω–¥ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")


def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞."""
    logger.info("ü§ñ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞—Ä—Å–µ—Ä–æ–º...")
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(Config.TELEGRAM_BOT_TOKEN).post_init(post_init).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("status", status_command))
    application.add_handler(CommandHandler("parse", parse_command))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    application.add_error_handler(error_handler)
    
    logger.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
    logger.info("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: /start, /help, /status, /parse")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    application.run_polling(allowed_updates=Update.ALL_TYPES)


if __name__ == "__main__":
    main()
