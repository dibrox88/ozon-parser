"""–°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∑–∞–∫–∞–∑–æ–≤."""
import sys
from pathlib import Path
from playwright.sync_api import sync_playwright
from loguru import logger

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
Path('logs').mkdir(exist_ok=True)
logger.add(
    "logs/analyze_{time}.log",
    rotation="1 day",
    level="INFO"
)

from config import Config
from auth import OzonAuth
from notifier import sync_send_message


def analyze_orders_page():
    """–ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∑–∞–∫–∞–∑–æ–≤."""
    try:
        Config.validate()
        
        with sync_playwright() as p:
            browser = p.chromium.launch(headless=Config.HEADLESS)
            
            context = browser.new_context(
                viewport={'width': 1920, 'height': 1080},
                user_agent=Config.USER_AGENT,
            )
            
            # –ú–∞—Å–∫–∏—Ä–æ–≤–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
            context.add_init_script("""
                Object.defineProperty(navigator, 'webdriver', { 
                    get: () => undefined 
                });
                
                Object.defineProperty(navigator, 'plugins', { 
                    get: () => [1, 2, 3, 4, 5] 
                });
            """)
            
            page = context.new_page()
            
            # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
            auth = OzonAuth(page)
            if not auth.login():
                print("‚ùå –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å")
                return
            
            # –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∑–∞–∫–∞–∑–æ–≤
            print("\nüì¶ –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∑–∞–∫–∞–∑–æ–≤...")
            page.goto(Config.OZON_ORDERS_URL, timeout=60000)
            page.wait_for_load_state('networkidle', timeout=30000)
            
            import time
            time.sleep(5)
            
            # –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
            print("\nüîç –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å—Ç—Ä–∞–Ω–∏—Ü—ã...\n")
            
            # –ò—â–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã —Å –∑–∞–∫–∞–∑–∞–º–∏
            possible_selectors = [
                '[data-widget="orders"]',
                '[data-widget="orderList"]',
                '.order',
                '.order-item',
                '[class*="order"]',
                'article',
                '[role="article"]',
            ]
            
            for selector in possible_selectors:
                elements = page.query_selector_all(selector)
                if elements:
                    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(elements)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–æ —Å–µ–ª–µ–∫—Ç–æ—Ä—É: {selector}")
                    
                    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç
                    if len(elements) > 0:
                        first = elements[0]
                        html = first.inner_html()
                        print(f"   HTML –ø–µ—Ä–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ (–ø–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤):")
                        print(f"   {html[:500]}...\n")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—ã–π HTML
            html_file = "screenshots/orders_page.html"
            with open(html_file, 'w', encoding='utf-8') as f:
                f.write(page.content())
            print(f"\nüíæ –ü–æ–ª–Ω—ã–π HTML —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {html_file}")
            
            # –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç
            screenshot = "screenshots/orders_analysis.png"
            page.screenshot(path=screenshot, full_page=True)
            print(f"üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {screenshot}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
            sync_send_message(f"üìä –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!\n\nHTML: {html_file}\n–°–∫—Ä–∏–Ω—à–æ—Ç: {screenshot}")
            
            print("\n‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")
            print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª—ã:")
            print(f"  - {html_file}")
            print(f"  - {screenshot}")
            
            input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –±—Ä–∞—É–∑–µ—Ä–∞...")
            
            context.close()
            browser.close()
            
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞: {e}")
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")


if __name__ == '__main__':
    analyze_orders_page()
