"""
–ú–æ–¥—É–ª—å –¥–ª—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ —Å –∫–∞—Ç–∞–ª–æ–≥–æ–º –∏ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —á–µ—Ä–µ–∑ Telegram.
"""

import json
from pathlib import Path
from typing import Dict, Optional, Tuple, List
from loguru import logger
from notifier import sync_send_message
from excluded_manager import ExcludedOrdersManager
from bundle_manager import BundleManager, create_bundle_item
import time


class ProductMatcher:
    """–ö–ª–∞—Å—Å –¥–ª—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ —Å –∫–∞—Ç–∞–ª–æ–≥–æ–º."""
    
    DEFAULT_TYPE = "—Ä–∞—Å—Ö–æ–¥–Ω–∏–∫–∏"
    MAPPINGS_FILE = "product_mappings.json"
    
    def __init__(self, sheets_products: list, mappings_file: Optional[str] = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è.
        
        Args:
            sheets_products: –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ Google Sheets
            mappings_file: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–º–∏ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è–º–∏
        """
        self.catalog = sheets_products
        self.mappings_file = mappings_file or self.MAPPINGS_FILE
        self.mappings = self._load_mappings()
        self.type_map = self._create_type_map()
        
        logger.info(f"üîÑ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞: {len(self.catalog)}")
        logger.info(f"üìã –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–π: {len(self.mappings)}")
        logger.info(f"üè∑Ô∏è –°–æ–∑–¥–∞–Ω –º–∞–ø–ø–∏–Ω–≥ —Ç–∏–ø–æ–≤: {len(self.type_map)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–∏–ø–æ–≤")
    
    def _create_type_map(self) -> Dict[int, str]:
        """
        –°–æ–∑–¥–∞—Ç—å –º–∞–ø–ø–∏–Ω–≥ –Ω–æ–º–µ—Ä ‚Üí —Ç–∏–ø —Ç–æ–≤–∞—Ä–∞ –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞.
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å {1: "—Ç–∏–ø1", 2: "—Ç–∏–ø2", ...}
        """
        # –°–æ–±–∏—Ä–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ç–∏–ø—ã –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞
        unique_types = set()
        for product in self.catalog:
            product_type = product.get('type', '').strip()
            if product_type:
                unique_types.add(product_type)
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∏ —Å–æ–∑–¥–∞—ë–º –º–∞–ø–ø–∏–Ω–≥
        sorted_types = sorted(unique_types)
        type_map = {i + 1: type_name for i, type_name in enumerate(sorted_types)}
        
        logger.debug(f"üìã –¢–∏–ø—ã —Ç–æ–≤–∞—Ä–æ–≤: {type_map}")
        return type_map
    
    def get_type_name(self, type_number: int) -> Optional[str]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∏–ø–∞ –ø–æ –Ω–æ–º–µ—Ä—É.
        
        Args:
            type_number: –ù–æ–º–µ—Ä —Ç–∏–ø–∞
            
        Returns:
            –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–∏–ø–∞ –∏–ª–∏ None
        """
        return self.type_map.get(type_number)
    
    def get_type_list_message(self) -> str:
        """
        –°–æ–∑–¥–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∏–ø–æ–≤.
        
        Returns:
            –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        """
        lines = ["üìã <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã —Ç–æ–≤–∞—Ä–æ–≤:</b>\n"]
        for num, type_name in sorted(self.type_map.items()):
            lines.append(f"  <b>{num}</b> - {type_name}")
        return "\n".join(lines)
    
    def _load_mappings(self) -> Dict[str, Dict[str, str]]:
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞."""
        try:
            if Path(self.mappings_file).exists():
                with open(self.mappings_file, 'r', encoding='utf-8') as f:
                    mappings = json.load(f)
                logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω—ã —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∏–∑ {self.mappings_file}")
                return mappings
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è: {e}")
        
        return {}
    
    def _save_mappings(self) -> bool:
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –≤ —Ñ–∞–π–ª."""
        try:
            with open(self.mappings_file, 'w', encoding='utf-8') as f:
                json.dump(self.mappings, f, ensure_ascii=False, indent=2)
            logger.info(f"‚úÖ –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {self.mappings_file}")
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–π: {e}")
            return False
    
    def _create_mapping_key(self, name: str, color: str = "") -> str:
        """
        –°–æ–∑–¥–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è —Ç–æ–≤–∞—Ä–∞.
        
        Args:
            name: –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
            color: –¶–≤–µ—Ç —Ç–æ–≤–∞—Ä–∞
            
        Returns:
            –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á
        """
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ: —É–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã, –ø—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
        normalized_name = " ".join(name.lower().split())
        normalized_color = color.lower().strip() if color else ""
        
        if normalized_color:
            return f"{normalized_name}|{normalized_color}"
        return normalized_name
    
    def get_mapping(self, name: str, color: str = "") -> Optional[Dict[str, str]]:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ.
        
        Args:
            name: –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
            color: –¶–≤–µ—Ç —Ç–æ–≤–∞—Ä–∞
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å mapped_name –∏ mapped_type –∏–ª–∏ None
        """
        key = self._create_mapping_key(name, color)
        return self.mappings.get(key)
    
    def save_mapping(self, name: str, color: str, mapped_name: str, mapped_type: str) -> bool:
        """
        –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ.
        
        Args:
            name: –ò—Å—Ö–æ–¥–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
            color: –¶–≤–µ—Ç —Ç–æ–≤–∞—Ä–∞
            mapped_name: –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
            mapped_type: –¢–∏–ø —Ç–æ–≤–∞—Ä–∞
            
        Returns:
            True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ
        """
        key = self._create_mapping_key(name, color)
        self.mappings[key] = {
            'mapped_name': mapped_name,
            'mapped_type': mapped_type,
            'original_name': name,
            'color': color
        }
        return self._save_mappings()
    
    def find_matches(self, name: str, color: str = "") -> list:
        """
        –ù–∞–π—Ç–∏ –ø–æ—Ö–æ–∂–∏–µ —Ç–æ–≤–∞—Ä—ã –≤ –∫–∞—Ç–∞–ª–æ–≥–µ.
        
        Args:
            name: –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞
            color: –¶–≤–µ—Ç —Ç–æ–≤–∞—Ä–∞
            
        Returns:
            –°–ø–∏—Å–æ–∫ –ø–æ—Ö–æ–∂–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞
        """
        from sheets_manager import SheetsManager
        
        # –°–æ–∑–¥–∞—ë–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –º–µ—Ç–æ–¥–∞ –ø–æ–∏—Å–∫–∞
        # (–º–æ–∂–Ω–æ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å, –ø–µ—Ä–µ–¥–∞–≤–∞—è SheetsManager)
        matches = []
        
        search_lower = name.lower()
        
        for product in self.catalog:
            product_name_lower = product['name'].lower()
            
            # –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
            if product_name_lower == search_lower:
                matches.insert(0, {**product, 'match_score': 100})
                continue
            
            # –°–æ–¥–µ—Ä–∂–∏—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ
            if search_lower in product_name_lower or product_name_lower in search_lower:
                matches.append({**product, 'match_score': 80})
                continue
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ —Å–ª–æ–≤–∞–º
            import re
            search_words = set(re.findall(r'\w+', search_lower))
            product_words = set(re.findall(r'\w+', product_name_lower))
            
            if search_words and product_words:
                common_words = search_words & product_words
                if common_words:
                    score = int((len(common_words) / max(len(search_words), len(product_words))) * 70)
                    if score >= 30:
                        matches.append({**product, 'match_score': score})
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ score
        matches.sort(key=lambda x: x['match_score'], reverse=True)
        return matches[:5]  # –¢–æ–ø-5


def split_product_interactive(
    item: Dict,
    matcher: ProductMatcher,
    bundle_manager: BundleManager,
    order_number: Optional[str] = None
) -> Optional[Dict]:
    """
    –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è —Ä–∞–∑–±–∏–≤–∫–∞ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —á–µ—Ä–µ–∑ Telegram.
    
    Args:
        item: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ —Ç–æ–≤–∞—Ä–∞
        matcher: –û–±—ä–µ–∫—Ç ProductMatcher
        bundle_manager: –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∑–æ–∫
        order_number: –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞
        
    Returns:
        Item —Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏ –∏–ª–∏ None –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ
    """
    name = item.get('name', '')
    price = item.get('price', 0)
    quantity = item.get('quantity', 1)
    
    logger.info(f"üîß –ù–∞—á–∞–ª–æ —Ä–∞–∑–±–∏–≤–∫–∏ —Ç–æ–≤–∞—Ä–∞: {name[:50]}...")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–∏–ø–æ–≤
    type_list_msg = matcher.get_type_list_message()
    
    message = f"""
üì¶ <b>–†–ê–ó–ë–ò–í–ö–ê –¢–û–í–ê–†–ê</b>

<b>–¢–æ–≤–∞—Ä:</b> {name}
<b>–¶–µ–Ω–∞:</b> {price} ‚ÇΩ
<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:</b> {quantity}

{type_list_msg}

üí° <b>–í–≤–µ–¥–∏—Ç–µ —Å—Ö–µ–º—É —Ä–∞–∑–±–∏–≤–∫–∏:</b>
–§–æ—Ä–º–∞—Ç: <code>—Ç–∏–ø1-—Ç–∏–ø2-—Ç–∏–ø3</code>

–ü—Ä–∏–º–µ—Ä: <code>2-3-5</code> –æ–∑–Ω–∞—á–∞–µ—Ç:
‚Ä¢ 1-—è —á–∞—Å—Ç—å: —Ç–∏–ø 2 (–∫–æ—Ä–ø—É—Å)
‚Ä¢ 2-—è —á–∞—Å—Ç—å: —Ç–∏–ø 3 (–∫—É–ª–µ—Ä)  
‚Ä¢ 3-—è —á–∞—Å—Ç—å: —Ç–∏–ø 5 (–±–ª–æ–∫ –ø–∏—Ç–∞–Ω–∏—è)

‚è≥ –û–∂–∏–¥–∞—é —Å—Ö–µ–º—É —Ä–∞–∑–±–∏–≤–∫–∏..."""
    
    sync_send_message(message)
    
    from notifier import sync_wait_for_input
    schema_input = sync_wait_for_input("–í–≤–µ–¥–∏—Ç–µ —Å—Ö–µ–º—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2-3-5) –∏–ª–∏ CANCEL:", timeout=300)
    
    if not schema_input or schema_input.upper() == 'CANCEL':
        sync_send_message("‚ùå –†–∞–∑–±–∏–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
        return None
    
    # –ü–∞—Ä—Å–∏–º —Å—Ö–µ–º—É
    try:
        type_numbers = [int(x.strip()) for x in schema_input.split('-')]
    except ValueError:
        sync_send_message(f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ö–µ–º–∞: {schema_input}\n–û–∂–∏–¥–∞–ª—Å—è —Ñ–æ—Ä–º–∞—Ç: 2-3-5")
        return None
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ç–∏–ø–æ–≤
    invalid_types = [t for t in type_numbers if t not in matcher.type_map]
    if invalid_types:
        sync_send_message(f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ —Ç–∏–ø–æ–≤: {invalid_types}\n\n{type_list_msg}")
        return None
    
    components = []
    
    # –î–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ –≤—ã–±–∏—Ä–∞–µ–º —Ç–æ–≤–∞—Ä –∏ —Ü–µ–Ω—É
    for i, type_num in enumerate(type_numbers, 1):
        type_name = matcher.get_type_name(type_num)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã —ç—Ç–æ–≥–æ —Ç–∏–ø–∞
        type_products = [p for p in matcher.catalog if p.get('type') == type_name]
        
        if not type_products:
            sync_send_message(f"‚ö†Ô∏è –ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ —Ç–∏–ø–∞ '{type_name}' –≤ –∫–∞—Ç–∞–ª–æ–≥–µ. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")
            continue
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã
        variants_msg = f"""
üîß <b>–ß–∞—Å—Ç—å {i}/{len(type_numbers)}</b>

<b>–¢–∏–ø:</b> {type_name}

<b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:</b>
"""
        for idx, product in enumerate(type_products[:15], 1):  # –ú–∞–∫—Å–∏–º—É–º 15 –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
            variants_msg += f"\n{idx}. {product['name']} ({product.get('price', 0)} ‚ÇΩ)"
        
        variants_msg += "\n\nüí° –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–æ–≤–∞—Ä–∞:"
        
        sync_send_message(variants_msg)
        
        choice = sync_wait_for_input(f"–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä (1-{min(15, len(type_products))}):", timeout=180)
        
        if not choice or not choice.isdigit():
            sync_send_message(f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä. –û—Ç–º–µ–Ω–∞ —Ä–∞–∑–±–∏–≤–∫–∏.")
            return None
        
        choice_idx = int(choice) - 1
        if choice_idx < 0 or choice_idx >= len(type_products):
            sync_send_message(f"‚ùå –ù–æ–º–µ—Ä –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞. –û—Ç–º–µ–Ω–∞ —Ä–∞–∑–±–∏–≤–∫–∏.")
            return None
        
        selected_product = type_products[choice_idx]
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ü–µ–Ω—É
        price_msg = f"""
üí∞ <b>–£–∫–∞–∂–∏—Ç–µ —Ü–µ–Ω—É –¥–ª—è:</b>
{selected_product['name']}

<b>–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è —Ü–µ–Ω–∞:</b> {selected_product.get('price', 0)} ‚ÇΩ

üí° –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É (—á–∏—Å–ª–æ):"""
        
        sync_send_message(price_msg)
        
        price_input = sync_wait_for_input("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É:", timeout=120)
        
        if not price_input:
            sync_send_message(f"‚ùå –¶–µ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞. –û—Ç–º–µ–Ω–∞ —Ä–∞–∑–±–∏–≤–∫–∏.")
            return None
        
        try:
            component_price = float(price_input.replace(',', '.'))
        except ValueError:
            sync_send_message(f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ü–µ–Ω–∞: {price_input}")
            return None
        
        components.append({
            "mapped_name": selected_product['name'],
            "mapped_type": type_name,
            "price": component_price
        })
        
        logger.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –∫–æ–º–ø–æ–Ω–µ–Ω—Ç {i}: {selected_product['name']} = {component_price}‚ÇΩ")
    
    if not components:
        sync_send_message("‚ùå –ù–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞")
        return None
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É–º–º—ã
    max_attempts = 3
    for attempt in range(max_attempts):
        total = sum(c['price'] for c in components)
        
        if abs(total - price) < 0.01:  # –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ
            break
        
        sync_send_message(f"""
‚ö†Ô∏è <b>–ù–µ—Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å—É–º–º—ã!</b>

–°—É–º–º–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: {total} ‚ÇΩ
–¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞: {price} ‚ÇΩ
–†–∞–∑–Ω–∏—Ü–∞: {total - price} ‚ÇΩ

üí° <b>–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—ã –∑–∞–Ω–æ–≤–æ:</b>""")
        
        # –ü–µ—Ä–µ–∑–∞–ø—Ä–æ—Å —Ü–µ–Ω
        for i, component in enumerate(components, 1):
            price_msg = f"""
üí∞ <b>–¶–µ–Ω–∞ {i}/{len(components)}:</b>
{component['mapped_name']}

–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {component['price']} ‚ÇΩ

–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É:"""
            
            sync_send_message(price_msg)
            
            price_input = sync_wait_for_input(f"–¶–µ–Ω–∞ –¥–ª—è {component['mapped_name']}:", timeout=120)
            
            if price_input:
                try:
                    component['price'] = float(price_input.replace(',', '.'))
                except ValueError:
                    pass
    
    # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    total = sum(c['price'] for c in components)
    if abs(total - price) >= 0.01:
        sync_send_message(f"""
‚ùå <b>–°—É–º–º—ã –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç –ø–æ—Å–ª–µ {max_attempts} –ø–æ–ø—ã—Ç–æ–∫!</b>

–°—É–º–º–∞: {total} ‚ÇΩ
–ù—É–∂–Ω–æ: {price} ‚ÇΩ

–†–∞–∑–±–∏–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.""")
        return None
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≤—è–∑–∫—É
    if bundle_manager.create_bundle(name, components, price):
        sync_send_message(f"""
‚úÖ <b>–°–≤—è–∑–∫–∞ —Å–æ–∑–¥–∞–Ω–∞!</b>

<b>–¢–æ–≤–∞—Ä:</b> {name}
<b>–ö–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤:</b> {len(components)}
<b>–û–±—â–∞—è —Ü–µ–Ω–∞:</b> {price} ‚ÇΩ

–î–µ—Ç–∞–ª–∏:""")
        
        for i, comp in enumerate(components, 1):
            sync_send_message(f"{i}. {comp['mapped_name']} = {comp['price']}‚ÇΩ")
        
        # –°–æ–∑–¥–∞—ë–º bundle item
        bundle_item = create_bundle_item(item, components)
        logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω bundle item –¥–ª—è: {name[:50]}...")
        return bundle_item
    
    sync_send_message("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–≤—è–∑–∫–∏")
    return None


def match_product_interactive(
    item: Dict,
    matcher: ProductMatcher,
    auto_mode: bool = False,
    order_number: Optional[str] = None,
    excluded_manager: Optional[ExcludedOrdersManager] = None
) -> Tuple[Optional[str], Optional[str]]:
    """
    –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º —á–µ—Ä–µ–∑ Telegram.
    
    Args:
        item: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ —Ç–æ–≤–∞—Ä–∞ (name, color, quantity, price)
        matcher: –û–±—ä–µ–∫—Ç ProductMatcher
        auto_mode: –ï—Å–ª–∏ True, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞—Ç—å –ª—É—á—à–µ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –±–µ–∑ –∑–∞–ø—Ä–æ—Å–∞
        order_number: –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ (–¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –≤—Å–µ–≥–æ –∑–∞–∫–∞–∑–∞)
        excluded_manager: –ú–µ–Ω–µ–¥–∂–µ—Ä –∏—Å–∫–ª—é—á—ë–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
        
    Returns:
        Tuple (mapped_name, mapped_type) –∏–ª–∏ (None, None) –µ—Å–ª–∏ –∑–∞–∫–∞–∑ –∏—Å–∫–ª—é—á—ë–Ω
    """
    name = item.get('name', '')
    color = item.get('color', '')
    quantity = item.get('quantity', 1)
    price = item.get('price', 0)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è
    saved_mapping = matcher.get_mapping(name, color)
    if saved_mapping:
        logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ: {name} ‚Üí {saved_mapping['mapped_name']} ({saved_mapping['mapped_type']})")
        return saved_mapping['mapped_name'], saved_mapping['mapped_type']
    
    # –ò—â–µ–º –ø–æ—Ö–æ–∂–∏–µ —Ç–æ–≤–∞—Ä—ã –≤ –∫–∞—Ç–∞–ª–æ–≥–µ
    matches = matcher.find_matches(name, color)
    
    # –ï—Å–ª–∏ 100% —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ
    if matches and matches[0]['match_score'] == 100:
        best_match = matches[0]
        logger.info(f"‚úÖ 100% —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ: {name} ‚Üí {best_match['name']} ({best_match['type']})")
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º
        matcher.save_mapping(name, color, best_match['name'], best_match['type'])
        return best_match['name'], best_match['type']
    
    # –ï—Å–ª–∏ auto_mode –∏ –Ω–µ—Ç 100% —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–∏–ø –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    if auto_mode:
        if matches:
            best_match = matches[0]
            mapped_name = best_match['name']
            mapped_type = best_match['type']
        else:
            mapped_name = name
            mapped_type = matcher.DEFAULT_TYPE
        
        matcher.save_mapping(name, color, mapped_name, mapped_type)
        return mapped_name, mapped_type
    
    # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º: –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if not matches:
        # –ù–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π - –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Ä—É—á–Ω–æ–π –≤–≤–æ–¥
        message = f"""
üîç <b>–¢–æ–≤–∞—Ä –ù–ï –ù–ê–ô–î–ï–ù –≤ –∫–∞—Ç–∞–ª–æ–≥–µ</b>

üì¶ <b>–¢–æ–≤–∞—Ä –∏–∑ –∑–∞–∫–∞–∑–∞:</b>
‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ: {name}
‚Ä¢ –¶–≤–µ—Ç: {color or '–Ω–µ —É–∫–∞–∑–∞–Ω'}
‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity}
‚Ä¢ –¶–µ–Ω–∞: {price} ‚ÇΩ"""
        
        if order_number:
            message += f"\n‚Ä¢ –ó–∞–∫–∞–∑: <code>{order_number}</code>"
        
        message += f"""

‚ùì <b>–ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Ç–∏–ø –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:</b> <code>{matcher.DEFAULT_TYPE}</code>

üí° <b>–í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞:</b>
1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ <code>OK</code> - –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–∏–ø "{matcher.DEFAULT_TYPE}"
2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ <code>–ù–∞–∑–≤–∞–Ω–∏–µ | –¢–∏–ø</code> - –≤–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é
3. –û—Ç–ø—Ä–∞–≤—å—Ç–µ <code>–†</code> - —Ä–∞–∑–±–∏—Ç—å —Ç–æ–≤–∞—Ä –Ω–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã"""
        
        if order_number and excluded_manager:
            message += f"\n4. –û—Ç–ø—Ä–∞–≤—å—Ç–µ <code>EXCLUDE</code> - –∏—Å–∫–ª—é—á–∏—Ç—å –≤–µ—Å—å –∑–∞–∫–∞–∑ {order_number}"
        
        message += "\n\n‚è≥ –û–∂–∏–¥–∞—é –≤–∞—à –æ—Ç–≤–µ—Ç..."
        
        sync_send_message(message)
        
        from notifier import sync_wait_for_input
        response = sync_wait_for_input(
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ OK, EXCLUDE –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ '–ù–∞–∑–≤–∞–Ω–∏–µ | –¢–∏–ø':",
            timeout=300
        )
        
        if not response:
            logger.warning(f"‚è±Ô∏è –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–∏–ø –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è: {name}")
            mapped_name = name
            mapped_type = matcher.DEFAULT_TYPE
        elif response.upper() == '–†':
            # –†–∞–∑–±–∏–≤–∫–∞ —Ç–æ–≤–∞—Ä–∞
            logger.info(f"üîß –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª —Ä–∞–∑–±–∏–≤–∫—É –¥–ª—è: {name}")
            # –í–µ—Ä–Ω–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –º–∞—Ä–∫–µ—Ä - –æ–±—Ä–∞–±–æ—Ç–∫–∞ –±—É–¥–µ—Ç –≤ enrich_orders_with_mapping
            return "SPLIT", None
        elif response.upper() == 'EXCLUDE':
            if order_number and excluded_manager:
                excluded_manager.add_excluded(order_number)
                sync_send_message(f"üö´ <b>–ó–∞–∫–∞–∑ {order_number} –∏—Å–∫–ª—é—á—ë–Ω!</b>\n\n–í—Å–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ —ç—Ç–æ–≥–æ –∑–∞–∫–∞–∑–∞ –±—É–¥—É—Ç –ø—Ä–æ–ø—É—â–µ–Ω—ã.")
                logger.info(f"üö´ –ó–∞–∫–∞–∑ {order_number} –∏—Å–∫–ª—é—á—ë–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                return None, None
            else:
                logger.warning("‚ö†Ô∏è –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∏—Å–∫–ª—é—á–∏—Ç—å –∑–∞–∫–∞–∑ - –Ω–µ—Ç –Ω–æ–º–µ—Ä–∞ –∑–∞–∫–∞–∑–∞ –∏–ª–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞")
                mapped_name = name
                mapped_type = matcher.DEFAULT_TYPE
        elif response.upper() == 'OK':
            logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª —Ç–∏–ø –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è: {name}")
            mapped_name = name
            mapped_type = matcher.DEFAULT_TYPE
        elif '|' in response:
            parts = response.split('|', 1)
            mapped_name = parts[0].strip()
            mapped_type = parts[1].strip()
            logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤—ë–ª –≤—Ä—É—á–Ω—É—é: {mapped_name} | {mapped_type}")
        else:
            logger.warning(f"‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–∏–ø –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è: {name}")
            mapped_name = name
            mapped_type = matcher.DEFAULT_TYPE
        
        matcher.save_mapping(name, color, mapped_name, mapped_type)
        return mapped_name, mapped_type
    
    # –ï—Å—Ç—å —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è, –Ω–æ –Ω–µ 100% - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã
    message = f"""
üîç <b>–ù–∞–π–¥–µ–Ω—ã –ø–æ—Ö–æ–∂–∏–µ —Ç–æ–≤–∞—Ä—ã</b>

üì¶ <b>–¢–æ–≤–∞—Ä –∏–∑ –∑–∞–∫–∞–∑–∞:</b>
‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ: {name}
‚Ä¢ –¶–≤–µ—Ç: {color or '–Ω–µ —É–∫–∞–∑–∞–Ω'}
‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity}
‚Ä¢ –¶–µ–Ω–∞: {price} ‚ÇΩ"""
    
    if order_number:
        message += f"\n‚Ä¢ –ó–∞–∫–∞–∑: <code>{order_number}</code>"
    
    message += "\n\n‚úÖ <b>–ü—Ä–µ–¥–ª–∞–≥–∞–µ–º—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã:</b>"
    
    # –°–æ–±–∏—Ä–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∏ —Ç–∏–ø—ã
    unique_names = []
    unique_types = []
    
    for idx, match in enumerate(matches[:5], start=1):
        message += f"\n{idx}. <b>{match['name']}</b> ({match['type']}) - {match['match_score']}%"
        
        if match['name'] not in unique_names:
            unique_names.append(match['name'])
        if match['type'] not in unique_types:
            unique_types.append(match['type'])
    
    message += "\n\nüí° <b>–í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞:</b>\n"
    message += "‚Ä¢ <code>1-5</code> - –≤—ã–±—Ä–∞—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç –ø–æ –Ω–æ–º–µ—Ä—É\n"
    message += "‚Ä¢ <code>–ù–∞–∑–≤–∞–Ω–∏–µ | –¢–∏–ø</code> - –≤–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é\n"
    message += "‚Ä¢ <code>–†</code> - —Ä–∞–∑–±–∏—Ç—å —Ç–æ–≤–∞—Ä –Ω–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã"
    
    if order_number and excluded_manager:
        message += f"\n‚Ä¢ <code>EXCLUDE</code> - –∏—Å–∫–ª—é—á–∏—Ç—å –≤–µ—Å—å –∑–∞–∫–∞–∑ {order_number}"
    
    message += "\n\n‚è≥ –û–∂–∏–¥–∞—é –≤–∞—à –æ—Ç–≤–µ—Ç..."
    
    sync_send_message(message)
    
    from notifier import sync_wait_for_input
    response = sync_wait_for_input(
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä (1-5), EXCLUDE –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ '–ù–∞–∑–≤–∞–Ω–∏–µ | –¢–∏–ø':",
        timeout=300
    )
    
    if not response:
        # –¢–∞–π–º–∞—É—Ç - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª—É—á—à–µ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
        logger.warning(f"‚è±Ô∏è –¢–∞–π–º–∞—É—Ç - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª—É—á—à–µ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –¥–ª—è: {name}")
        best_match = matches[0]
        mapped_name = best_match['name']
        mapped_type = best_match['type']
    elif response.upper() == '–†':
        # –†–∞–∑–±–∏–≤–∫–∞ —Ç–æ–≤–∞—Ä–∞
        logger.info(f"üîß –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª —Ä–∞–∑–±–∏–≤–∫—É –¥–ª—è: {name}")
        return "SPLIT", None
    elif response.upper() == 'EXCLUDE':
        if order_number and excluded_manager:
            excluded_manager.add_excluded(order_number)
            sync_send_message(f"üö´ <b>–ó–∞–∫–∞–∑ {order_number} –∏—Å–∫–ª—é—á—ë–Ω!</b>\n\n–í—Å–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ —ç—Ç–æ–≥–æ –∑–∞–∫–∞–∑–∞ –±—É–¥—É—Ç –ø—Ä–æ–ø—É—â–µ–Ω—ã.")
            logger.info(f"üö´ –ó–∞–∫–∞–∑ {order_number} –∏—Å–∫–ª—é—á—ë–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            return None, None
        else:
            logger.warning("‚ö†Ô∏è –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∏—Å–∫–ª—é—á–∏—Ç—å –∑–∞–∫–∞–∑ - –Ω–µ—Ç –Ω–æ–º–µ—Ä–∞ –∑–∞–∫–∞–∑–∞ –∏–ª–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞")
            best_match = matches[0]
            mapped_name = best_match['name']
            mapped_type = best_match['type']
    elif response.isdigit():
        # –í—ã–±—Ä–∞–Ω –Ω–æ–º–µ—Ä
        choice = int(response)
        if 1 <= choice <= min(5, len(matches)):
            selected = matches[choice - 1]
            mapped_name = selected['name']
            mapped_type = selected['type']
            logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –≤–∞—Ä–∏–∞–Ω—Ç {choice}: {mapped_name} ({mapped_type})")
        else:
            logger.warning(f"‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª—É—á—à–µ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –¥–ª—è: {name}")
            best_match = matches[0]
            mapped_name = best_match['name']
            mapped_type = best_match['type']
    elif '|' in response:
        # –†—É—á–Ω–æ–π –≤–≤–æ–¥
        parts = response.split('|', 1)
        mapped_name = parts[0].strip()
        mapped_type = parts[1].strip()
        logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤—ë–ª –≤—Ä—É—á–Ω—É—é: {mapped_name} | {mapped_type}")
    else:
        # –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª—É—á—à–µ–µ
        logger.warning(f"‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª—É—á—à–µ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –¥–ª—è: {name}")
        best_match = matches[0]
        mapped_name = best_match['name']
        mapped_type = best_match['type']
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
    matcher.save_mapping(name, color, mapped_name, mapped_type)
    
    return mapped_name, mapped_type


def enrich_orders_with_mapping(
    orders_data: list, 
    matcher: ProductMatcher, 
    interactive: bool = True, 
    excluded_manager: Optional[ExcludedOrdersManager] = None,
    bundle_manager: Optional[BundleManager] = None
) -> list:
    """
    –û–±–æ–≥–∞—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–æ–≤ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è–º–∏ –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞.
    
    Args:
        orders_data: –°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ —Å —Ç–æ–≤–∞—Ä–∞–º–∏
        matcher: –û–±—ä–µ–∫—Ç ProductMatcher
        interactive: –ï—Å–ª–∏ True, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º —á–µ—Ä–µ–∑ Telegram
        excluded_manager: –ú–µ–Ω–µ–¥–∂–µ—Ä –∏—Å–∫–ª—é—á—ë–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ (–¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏—è)
        bundle_manager: –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∑–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ (–¥–ª—è —Ä–∞–∑–±–∏–≤–∫–∏ –Ω–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã)
        
    Returns:
        –û–±–æ–≥–∞—â—ë–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ (–±–µ–∑ –∏—Å–∫–ª—é—á—ë–Ω–Ω—ã—Ö)
    """
    logger.info("üîÑ –ù–∞—á–∏–Ω–∞–µ–º —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ —Å –∫–∞—Ç–∞–ª–æ–≥–æ–º...")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º bundle_manager –µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω
    if bundle_manager is None:
        bundle_manager = BundleManager()
    
    # –°–Ω–∞—á–∞–ª–∞ –∏–∑–≤–ª–µ–∫–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞–∫–∞–∑–∞—Ö
    unique_items_dict = {}
    item_to_orders = {}  # –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è, –≤ –∫–∞–∫–∏—Ö –∑–∞–∫–∞–∑–∞—Ö –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è —Ç–æ–≤–∞—Ä
    
    for order in orders_data:
        order_number = order.get('order_number', '')
        for item in order.get('items', []):
            key = f"{item['name']}|{item.get('color', '')}"
            if key not in unique_items_dict:
                unique_items_dict[key] = item.copy()
                item_to_orders[key] = []
            
            if order_number not in item_to_orders[key]:
                item_to_orders[key].append(order_number)
    
    unique_items = list(unique_items_dict.values())
    logger.info(f"üì¶ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è: {len(unique_items)}")
    
    # –°–æ–∑–¥–∞—ë–º –∫–µ—à —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–π
    mapping_cache = {}
    orders_to_exclude = set()
    
    # –°–æ–ø–æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ç–æ–≤–∞—Ä
    for idx, item in enumerate(unique_items, 1):
        logger.info(f"[{idx}/{len(unique_items)}] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º: {item['name']}")
        
        key = f"{item['name']}|{item.get('color', '')}"
        
        # –ë–µ—Ä—ë–º –ø–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑ –∏–∑ —Å–ø–∏—Å–∫–∞ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        order_numbers = item_to_orders.get(key, [])
        first_order = order_numbers[0] if order_numbers else None
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –∏–ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º
        mapped_name, mapped_type = match_product_interactive(
            item, 
            matcher, 
            auto_mode=not interactive,
            order_number=first_order,
            excluded_manager=excluded_manager
        )
        
        # –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä –∏—Å–∫–ª—é—á—ë–Ω (–∑–∞–∫–∞–∑ –∏—Å–∫–ª—é—á—ë–Ω)
        if mapped_name is None and mapped_type is None:
            logger.info(f"üö´ –¢–æ–≤–∞—Ä –∏–∑ –∏—Å–∫–ª—é—á—ë–Ω–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞: {item['name']}")
            # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –∑–∞–∫–∞–∑—ã —Å —ç—Ç–∏–º —Ç–æ–≤–∞—Ä–æ–º –≤ —Å–ø–∏—Å–æ–∫ –∏—Å–∫–ª—é—á—ë–Ω–Ω—ã—Ö
            orders_to_exclude.update(order_numbers)
            continue
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–±–∏–≤–∫–∏ —Ç–æ–≤–∞—Ä–∞
        if mapped_name == "SPLIT" and mapped_type is None:
            logger.info(f"üîß –†–∞–∑–±–∏–≤–∫–∞ —Ç–æ–≤–∞—Ä–∞: {item['name'][:50]}...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–∞—è —Å–≤—è–∑–∫–∞
            if bundle_manager.has_bundle(item['name']):
                existing_bundle = bundle_manager.get_bundle(item['name'])
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–≤—è–∑–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞
                if existing_bundle:
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–æ –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
                    from notifier import sync_send_message, sync_wait_for_input
                    
                    reuse_msg = f"""
üì¶ <b>–ù–∞–π–¥–µ–Ω–∞ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–∞—è —Å–≤—è–∑–∫–∞!</b>

<b>–¢–æ–≤–∞—Ä:</b> {item['name']}
<b>–ö–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤:</b> {len(existing_bundle['components'])}

<b>–î–µ—Ç–∞–ª–∏:</b>"""
                    sync_send_message(reuse_msg)
                    
                    for i, comp in enumerate(existing_bundle['components'], 1):
                        sync_send_message(
                            f"  {i}. {comp['mapped_name']} ({comp['mapped_type']}) = {comp['price']}‚ÇΩ"
                        )
                    
                    sync_send_message("\nüí° <b>–í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞:</b>\n‚Ä¢ <code>–î–ê</code> - –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—É—é\n‚Ä¢ <code>–ù–ï–¢</code> - —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é")
                    
                    reuse_response = sync_wait_for_input("–î–ê –∏–ª–∏ –ù–ï–¢:", timeout=120)
                    
                    if reuse_response and reuse_response.upper() == '–î–ê':
                        # –ü–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å–≤—è–∑–∫—É
                        bundle_item = create_bundle_item(item, existing_bundle['components'])
                        mapping_cache[key] = {'is_bundle': True, 'bundle_item': bundle_item}
                        logger.info(f"‚ôªÔ∏è –ü–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ —Å–≤—è–∑–∫–∞ –¥–ª—è: {item['name'][:50]}...")
                        continue
            
            # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é —Å–≤—è–∑–∫—É
            bundle_item = split_product_interactive(item, matcher, bundle_manager, first_order)
            
            if bundle_item:
                mapping_cache[key] = {'is_bundle': True, 'bundle_item': bundle_item}
                logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Å–≤—è–∑–∫–∞ –¥–ª—è: {item['name'][:50]}...")
            else:
                logger.warning(f"‚ö†Ô∏è –†–∞–∑–±–∏–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –¥–ª—è: {item['name'][:50]}...")
                # Fallback –∫ –æ–±—ã—á–Ω–æ–º—É –º–∞–ø–ø–∏–Ω–≥—É
                mapping_cache[key] = {
                    'mapped_name': item['name'],
                    'mapped_type': matcher.DEFAULT_TYPE
                }
            
            continue
        
        mapping_cache[key] = {
            'mapped_name': mapped_name,
            'mapped_type': mapped_type
        }
        
        logger.info(f"‚úÖ [{idx}/{len(unique_items)}] {item['name']} ‚Üí {mapped_name} ({mapped_type})")
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∫–æ –≤—Å–µ–º —Ç–æ–≤–∞—Ä–∞–º (–∏—Å–∫–ª—é—á–∞—è –∏—Å–∫–ª—é—á—ë–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã)
    enriched_orders = []
    total_items = 0
    matched_items = 0
    excluded_orders_count = 0
    
    for order in orders_data:
        order_number = order.get('order_number', '')
        
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∏—Å–∫–ª—é—á—ë–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã
        if order_number in orders_to_exclude:
            excluded_orders_count += 1
            logger.info(f"‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∏—Å–∫–ª—é—á—ë–Ω–Ω—ã–π –∑–∞–∫–∞–∑: {order_number}")
            continue
        
        enriched_order = order.copy()
        enriched_items = []
        
        for item in order.get('items', []):
            total_items += 1
            
            key = f"{item['name']}|{item.get('color', '')}"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
            if key in mapping_cache:
                cache_entry = mapping_cache[key]
                
                # –ï—Å–ª–∏ —ç—Ç–æ —Å–≤—è–∑–∫–∞ - –∑–∞–º–µ–Ω—è–µ–º —Ç–æ–≤–∞—Ä –Ω–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
                if cache_entry.get('is_bundle'):
                    bundle_item = cache_entry['bundle_item']
                    # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ç–æ–≤–∞—Ä
                    for component in bundle_item['components']:
                        component_item = {
                            'name': item['name'],  # –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
                            'price': component['price'],
                            'quantity': item['quantity'],
                            'color': item.get('color', ''),
                            'mapped_name': component['mapped_name'],
                            'mapped_type': component['mapped_type'],
                            'is_bundle_component': True,
                            'bundle_key': item['name']
                        }
                        enriched_items.append(component_item)
                        matched_items += 1
                else:
                    # –û–±—ã—á–Ω—ã–π –º–∞–ø–ø–∏–Ω–≥
                    enriched_item = item.copy()
                    enriched_item['mapped_name'] = cache_entry['mapped_name']
                    enriched_item['mapped_type'] = cache_entry['mapped_type']
                    enriched_items.append(enriched_item)
                    matched_items += 1
            else:
                # –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∏
                enriched_item = item.copy()
                enriched_item['mapped_name'] = item['name']
                enriched_item['mapped_type'] = matcher.DEFAULT_TYPE
                enriched_items.append(enriched_item)

        
        enriched_order['items'] = enriched_items
        enriched_orders.append(enriched_order)
    
    logger.info(f"‚úÖ –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {matched_items}/{total_items}")
    if excluded_orders_count > 0:
        logger.info(f"üö´ –ò—Å–∫–ª—é—á–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤: {excluded_orders_count}")
    
    return enriched_orders
