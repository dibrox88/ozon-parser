"""
–ú–æ–¥—É–ª—å –¥–ª—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ —Å –∫–∞—Ç–∞–ª–æ–≥–æ–º –∏ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —á–µ—Ä–µ–∑ Telegram.
"""

import json
from pathlib import Path
from typing import Dict, Optional, Tuple
from loguru import logger
from notifier import sync_send_message
import time


class ProductMatcher:
    """–ö–ª–∞—Å—Å –¥–ª—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ —Å –∫–∞—Ç–∞–ª–æ–≥–æ–º."""
    
    DEFAULT_TYPE = "—Ä–∞—Å—Ö–æ–¥–Ω–∏–∫–∏"
    MAPPINGS_FILE = "product_mappings.json"
    
    def __init__(self, sheets_products: list, mappings_file: Optional[str] = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è.
        
        Args:
            sheets_products: –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ Google Sheets
            mappings_file: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–º–∏ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è–º–∏
        """
        self.catalog = sheets_products
        self.mappings_file = mappings_file or self.MAPPINGS_FILE
        self.mappings = self._load_mappings()
        
        logger.info(f"üîÑ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞: {len(self.catalog)}")
        logger.info(f"üìã –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–π: {len(self.mappings)}")
    
    def _load_mappings(self) -> Dict[str, Dict[str, str]]:
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞."""
        try:
            if Path(self.mappings_file).exists():
                with open(self.mappings_file, 'r', encoding='utf-8') as f:
                    mappings = json.load(f)
                logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω—ã —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∏–∑ {self.mappings_file}")
                return mappings
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è: {e}")
        
        return {}
    
    def _save_mappings(self) -> bool:
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –≤ —Ñ–∞–π–ª."""
        try:
            with open(self.mappings_file, 'w', encoding='utf-8') as f:
                json.dump(self.mappings, f, ensure_ascii=False, indent=2)
            logger.info(f"‚úÖ –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {self.mappings_file}")
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–π: {e}")
            return False
    
    def _create_mapping_key(self, name: str, color: str = "") -> str:
        """
        –°–æ–∑–¥–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è —Ç–æ–≤–∞—Ä–∞.
        
        Args:
            name: –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
            color: –¶–≤–µ—Ç —Ç–æ–≤–∞—Ä–∞
            
        Returns:
            –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á
        """
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ: —É–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã, –ø—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
        normalized_name = " ".join(name.lower().split())
        normalized_color = color.lower().strip() if color else ""
        
        if normalized_color:
            return f"{normalized_name}|{normalized_color}"
        return normalized_name
    
    def get_mapping(self, name: str, color: str = "") -> Optional[Dict[str, str]]:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ.
        
        Args:
            name: –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
            color: –¶–≤–µ—Ç —Ç–æ–≤–∞—Ä–∞
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å mapped_name –∏ mapped_type –∏–ª–∏ None
        """
        key = self._create_mapping_key(name, color)
        return self.mappings.get(key)
    
    def save_mapping(self, name: str, color: str, mapped_name: str, mapped_type: str) -> bool:
        """
        –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ.
        
        Args:
            name: –ò—Å—Ö–æ–¥–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
            color: –¶–≤–µ—Ç —Ç–æ–≤–∞—Ä–∞
            mapped_name: –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
            mapped_type: –¢–∏–ø —Ç–æ–≤–∞—Ä–∞
            
        Returns:
            True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ
        """
        key = self._create_mapping_key(name, color)
        self.mappings[key] = {
            'mapped_name': mapped_name,
            'mapped_type': mapped_type,
            'original_name': name,
            'color': color
        }
        return self._save_mappings()
    
    def find_matches(self, name: str, color: str = "") -> list:
        """
        –ù–∞–π—Ç–∏ –ø–æ—Ö–æ–∂–∏–µ —Ç–æ–≤–∞—Ä—ã –≤ –∫–∞—Ç–∞–ª–æ–≥–µ.
        
        Args:
            name: –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞
            color: –¶–≤–µ—Ç —Ç–æ–≤–∞—Ä–∞
            
        Returns:
            –°–ø–∏—Å–æ–∫ –ø–æ—Ö–æ–∂–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞
        """
        from sheets_manager import SheetsManager
        
        # –°–æ–∑–¥–∞—ë–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –º–µ—Ç–æ–¥–∞ –ø–æ–∏—Å–∫–∞
        # (–º–æ–∂–Ω–æ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å, –ø–µ—Ä–µ–¥–∞–≤–∞—è SheetsManager)
        matches = []
        
        search_lower = name.lower()
        
        for product in self.catalog:
            product_name_lower = product['name'].lower()
            
            # –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
            if product_name_lower == search_lower:
                matches.insert(0, {**product, 'match_score': 100})
                continue
            
            # –°–æ–¥–µ—Ä–∂–∏—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ
            if search_lower in product_name_lower or product_name_lower in search_lower:
                matches.append({**product, 'match_score': 80})
                continue
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ —Å–ª–æ–≤–∞–º
            import re
            search_words = set(re.findall(r'\w+', search_lower))
            product_words = set(re.findall(r'\w+', product_name_lower))
            
            if search_words and product_words:
                common_words = search_words & product_words
                if common_words:
                    score = int((len(common_words) / max(len(search_words), len(product_words))) * 70)
                    if score >= 30:
                        matches.append({**product, 'match_score': score})
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ score
        matches.sort(key=lambda x: x['match_score'], reverse=True)
        return matches[:5]  # –¢–æ–ø-5


def match_product_interactive(
    item: Dict,
    matcher: ProductMatcher,
    auto_mode: bool = False
) -> Tuple[str, str]:
    """
    –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º —á–µ—Ä–µ–∑ Telegram.
    
    Args:
        item: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ —Ç–æ–≤–∞—Ä–∞ (name, color, quantity, price)
        matcher: –û–±—ä–µ–∫—Ç ProductMatcher
        auto_mode: –ï—Å–ª–∏ True, –Ω–µ —Å–ø—Ä–∞—à–∏–≤–∞—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ (–¥–ª—è —Ç–µ—Å—Ç–æ–≤)
        
    Returns:
        Tuple (mapped_name, mapped_type)
    """
    name = item.get('name', '')
    color = item.get('color', '')
    quantity = item.get('quantity', 1)
    price = item.get('price', 0)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è
    saved_mapping = matcher.get_mapping(name, color)
    if saved_mapping:
        logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ: {name} ‚Üí {saved_mapping['mapped_name']} ({saved_mapping['mapped_type']})")
        return saved_mapping['mapped_name'], saved_mapping['mapped_type']
    
    # –ò—â–µ–º –ø–æ—Ö–æ–∂–∏–µ —Ç–æ–≤–∞—Ä—ã –≤ –∫–∞—Ç–∞–ª–æ–≥–µ
    matches = matcher.find_matches(name, color)
    
    if not matches:
        logger.warning(f"‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –¥–ª—è: {name}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞
        message = f"""
üîç <b>–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–∞—Ç–∞–ª–æ–≥–µ</b>

üì¶ <b>–¢–æ–≤–∞—Ä –∏–∑ –∑–∞–∫–∞–∑–∞:</b>
‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ: {name}
‚Ä¢ –¶–≤–µ—Ç: {color or '–Ω–µ —É–∫–∞–∑–∞–Ω'}
‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity}
‚Ä¢ –¶–µ–Ω–∞: {price} ‚ÇΩ

‚ùì <b>–ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Ç–∏–ø –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:</b> <code>{matcher.DEFAULT_TYPE}</code>

üí° –î–ª—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –æ—Ç–≤–µ—Ç—å—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
<code>–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ | –¢–∏–ø</code>

–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ <code>OK</code> –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç–∏–ø–∞ "{matcher.DEFAULT_TYPE}"
        """
        
        sync_send_message(message)
        
        if auto_mode:
            # –í –∞–≤—Ç–æ-—Ä–µ–∂–∏–º–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–∏–ø –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            mapped_name = name
            mapped_type = matcher.DEFAULT_TYPE
        else:
            # TODO: –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            # –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–∏–ø –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            logger.warning(f"‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–∏–ø –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {matcher.DEFAULT_TYPE}")
            mapped_name = name
            mapped_type = matcher.DEFAULT_TYPE
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
        matcher.save_mapping(name, color, mapped_name, mapped_type)
        return mapped_name, mapped_type
    
    # –ù–∞—à–ª–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    best_match = matches[0]
    
    message = f"""
üîç <b>–ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞</b>

üì¶ <b>–¢–æ–≤–∞—Ä –∏–∑ –∑–∞–∫–∞–∑–∞:</b>
‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ: {name}
‚Ä¢ –¶–≤–µ—Ç: {color or '–Ω–µ —É–∫–∞–∑–∞–Ω'}
‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity}
‚Ä¢ –¶–µ–Ω–∞: {price} ‚ÇΩ

‚úÖ <b>–ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ:</b>
‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ: <b>{best_match['name']}</b>
‚Ä¢ –¢–∏–ø: <b>{best_match['type']}</b>
‚Ä¢ –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ: {best_match['match_score']}%
"""
    
    if len(matches) > 1:
        message += f"\nüìã <b>–î—Ä—É–≥–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã:</b>\n"
        for idx, match in enumerate(matches[1:4], start=2):
            message += f"{idx}. {match['name']} ({match['type']}) - {match['match_score']}%\n"
    
    message += "\nüí° –û—Ç–ø—Ä–∞–≤—å—Ç–µ <code>OK</code> –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ <code>–ù–∞–∑–≤–∞–Ω–∏–µ | –¢–∏–ø</code> –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è"
    
    sync_send_message(message)
    
    if auto_mode:
        # –í –∞–≤—Ç–æ-—Ä–µ–∂–∏–º–µ –ø—Ä–∏–Ω–∏–º–∞–µ–º –ª—É—á—à–µ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
        mapped_name = best_match['name']
        mapped_type = best_match['type']
    else:
        # TODO: –õ–æ–≥–∏–∫–∞ –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞
        logger.info(f"‚úÖ –ü—Ä–∏–Ω—è—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏: {best_match['name']} ({best_match['type']})")
        mapped_name = best_match['name']
        mapped_type = best_match['type']
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
    matcher.save_mapping(name, color, mapped_name, mapped_type)
    
    return mapped_name, mapped_type


def enrich_orders_with_mapping(orders_data: list, matcher: ProductMatcher) -> list:
    """
    –û–±–æ–≥–∞—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–æ–≤ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è–º–∏ –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞.
    
    Args:
        orders_data: –°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ —Å —Ç–æ–≤–∞—Ä–∞–º–∏
        matcher: –û–±—ä–µ–∫—Ç ProductMatcher
        
    Returns:
        –û–±–æ–≥–∞—â—ë–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤
    """
    logger.info("üîÑ –ù–∞—á–∏–Ω–∞–µ–º —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ —Å –∫–∞—Ç–∞–ª–æ–≥–æ–º...")
    
    enriched_orders = []
    total_items = 0
    matched_items = 0
    
    for order in orders_data:
        enriched_order = order.copy()
        enriched_items = []
        
        for item in order.get('items', []):
            total_items += 1
            
            # –°–æ–ø–æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä
            mapped_name, mapped_type = match_product_interactive(item, matcher, auto_mode=True)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –ø–æ–ª—è
            enriched_item = item.copy()
            enriched_item['mapped_name'] = mapped_name
            enriched_item['mapped_type'] = mapped_type
            
            enriched_items.append(enriched_item)
            matched_items += 1
            
            logger.debug(f"‚úÖ {item['name']} ‚Üí {mapped_name} ({mapped_type})")
        
        enriched_order['items'] = enriched_items
        enriched_orders.append(enriched_order)
    
    logger.info(f"‚úÖ –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {matched_items}/{total_items}")
    
    return enriched_orders
