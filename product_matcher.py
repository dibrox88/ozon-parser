"""
–ú–æ–¥—É–ª—å –¥–ª—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ —Å –∫–∞—Ç–∞–ª–æ–≥–æ–º –∏ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —á–µ—Ä–µ–∑ Telegram.
"""

import json
from pathlib import Path
from typing import Dict, Optional, Tuple
from loguru import logger
from notifier import sync_send_message
import time


class ProductMatcher:
    """–ö–ª–∞—Å—Å –¥–ª—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ —Å –∫–∞—Ç–∞–ª–æ–≥–æ–º."""
    
    DEFAULT_TYPE = "—Ä–∞—Å—Ö–æ–¥–Ω–∏–∫–∏"
    MAPPINGS_FILE = "product_mappings.json"
    
    def __init__(self, sheets_products: list, mappings_file: Optional[str] = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è.
        
        Args:
            sheets_products: –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ Google Sheets
            mappings_file: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–º–∏ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è–º–∏
        """
        self.catalog = sheets_products
        self.mappings_file = mappings_file or self.MAPPINGS_FILE
        self.mappings = self._load_mappings()
        
        logger.info(f"üîÑ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞: {len(self.catalog)}")
        logger.info(f"üìã –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–π: {len(self.mappings)}")
    
    def _load_mappings(self) -> Dict[str, Dict[str, str]]:
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞."""
        try:
            if Path(self.mappings_file).exists():
                with open(self.mappings_file, 'r', encoding='utf-8') as f:
                    mappings = json.load(f)
                logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω—ã —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∏–∑ {self.mappings_file}")
                return mappings
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è: {e}")
        
        return {}
    
    def _save_mappings(self) -> bool:
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –≤ —Ñ–∞–π–ª."""
        try:
            with open(self.mappings_file, 'w', encoding='utf-8') as f:
                json.dump(self.mappings, f, ensure_ascii=False, indent=2)
            logger.info(f"‚úÖ –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {self.mappings_file}")
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–π: {e}")
            return False
    
    def _create_mapping_key(self, name: str, color: str = "") -> str:
        """
        –°–æ–∑–¥–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è —Ç–æ–≤–∞—Ä–∞.
        
        Args:
            name: –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
            color: –¶–≤–µ—Ç —Ç–æ–≤–∞—Ä–∞
            
        Returns:
            –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á
        """
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ: —É–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã, –ø—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
        normalized_name = " ".join(name.lower().split())
        normalized_color = color.lower().strip() if color else ""
        
        if normalized_color:
            return f"{normalized_name}|{normalized_color}"
        return normalized_name
    
    def get_mapping(self, name: str, color: str = "") -> Optional[Dict[str, str]]:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ.
        
        Args:
            name: –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
            color: –¶–≤–µ—Ç —Ç–æ–≤–∞—Ä–∞
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å mapped_name –∏ mapped_type –∏–ª–∏ None
        """
        key = self._create_mapping_key(name, color)
        return self.mappings.get(key)
    
    def save_mapping(self, name: str, color: str, mapped_name: str, mapped_type: str) -> bool:
        """
        –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ.
        
        Args:
            name: –ò—Å—Ö–æ–¥–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
            color: –¶–≤–µ—Ç —Ç–æ–≤–∞—Ä–∞
            mapped_name: –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
            mapped_type: –¢–∏–ø —Ç–æ–≤–∞—Ä–∞
            
        Returns:
            True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ
        """
        key = self._create_mapping_key(name, color)
        self.mappings[key] = {
            'mapped_name': mapped_name,
            'mapped_type': mapped_type,
            'original_name': name,
            'color': color
        }
        return self._save_mappings()
    
    def find_matches(self, name: str, color: str = "") -> list:
        """
        –ù–∞–π—Ç–∏ –ø–æ—Ö–æ–∂–∏–µ —Ç–æ–≤–∞—Ä—ã –≤ –∫–∞—Ç–∞–ª–æ–≥–µ.
        
        Args:
            name: –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞
            color: –¶–≤–µ—Ç —Ç–æ–≤–∞—Ä–∞
            
        Returns:
            –°–ø–∏—Å–æ–∫ –ø–æ—Ö–æ–∂–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞
        """
        from sheets_manager import SheetsManager
        
        # –°–æ–∑–¥–∞—ë–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –º–µ—Ç–æ–¥–∞ –ø–æ–∏—Å–∫–∞
        # (–º–æ–∂–Ω–æ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å, –ø–µ—Ä–µ–¥–∞–≤–∞—è SheetsManager)
        matches = []
        
        search_lower = name.lower()
        
        for product in self.catalog:
            product_name_lower = product['name'].lower()
            
            # –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
            if product_name_lower == search_lower:
                matches.insert(0, {**product, 'match_score': 100})
                continue
            
            # –°–æ–¥–µ—Ä–∂–∏—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ
            if search_lower in product_name_lower or product_name_lower in search_lower:
                matches.append({**product, 'match_score': 80})
                continue
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ —Å–ª–æ–≤–∞–º
            import re
            search_words = set(re.findall(r'\w+', search_lower))
            product_words = set(re.findall(r'\w+', product_name_lower))
            
            if search_words and product_words:
                common_words = search_words & product_words
                if common_words:
                    score = int((len(common_words) / max(len(search_words), len(product_words))) * 70)
                    if score >= 30:
                        matches.append({**product, 'match_score': score})
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ score
        matches.sort(key=lambda x: x['match_score'], reverse=True)
        return matches[:5]  # –¢–æ–ø-5


def match_product_interactive(
    item: Dict,
    matcher: ProductMatcher,
    auto_mode: bool = False
) -> Tuple[str, str]:
    """
    –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º —á–µ—Ä–µ–∑ Telegram.
    
    Args:
        item: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ —Ç–æ–≤–∞—Ä–∞ (name, color, quantity, price)
        matcher: –û–±—ä–µ–∫—Ç ProductMatcher
        auto_mode: –ï—Å–ª–∏ True, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞—Ç—å –ª—É—á—à–µ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –±–µ–∑ –∑–∞–ø—Ä–æ—Å–∞
        
    Returns:
        Tuple (mapped_name, mapped_type)
    """
    name = item.get('name', '')
    color = item.get('color', '')
    quantity = item.get('quantity', 1)
    price = item.get('price', 0)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è
    saved_mapping = matcher.get_mapping(name, color)
    if saved_mapping:
        logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ: {name} ‚Üí {saved_mapping['mapped_name']} ({saved_mapping['mapped_type']})")
        return saved_mapping['mapped_name'], saved_mapping['mapped_type']
    
    # –ò—â–µ–º –ø–æ—Ö–æ–∂–∏–µ —Ç–æ–≤–∞—Ä—ã –≤ –∫–∞—Ç–∞–ª–æ–≥–µ
    matches = matcher.find_matches(name, color)
    
    # –ï—Å–ª–∏ 100% —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ
    if matches and matches[0]['match_score'] == 100:
        best_match = matches[0]
        logger.info(f"‚úÖ 100% —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ: {name} ‚Üí {best_match['name']} ({best_match['type']})")
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º
        matcher.save_mapping(name, color, best_match['name'], best_match['type'])
        return best_match['name'], best_match['type']
    
    # –ï—Å–ª–∏ auto_mode –∏ –Ω–µ—Ç 100% —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–∏–ø –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    if auto_mode:
        if matches:
            best_match = matches[0]
            mapped_name = best_match['name']
            mapped_type = best_match['type']
        else:
            mapped_name = name
            mapped_type = matcher.DEFAULT_TYPE
        
        matcher.save_mapping(name, color, mapped_name, mapped_type)
        return mapped_name, mapped_type
    
    # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º: –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if not matches:
        # –ù–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π - –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Ä—É—á–Ω–æ–π –≤–≤–æ–¥
        message = f"""
üîç <b>–¢–æ–≤–∞—Ä –ù–ï –ù–ê–ô–î–ï–ù –≤ –∫–∞—Ç–∞–ª–æ–≥–µ</b>

üì¶ <b>–¢–æ–≤–∞—Ä –∏–∑ –∑–∞–∫–∞–∑–∞:</b>
‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ: {name}
‚Ä¢ –¶–≤–µ—Ç: {color or '–Ω–µ —É–∫–∞–∑–∞–Ω'}
‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity}
‚Ä¢ –¶–µ–Ω–∞: {price} ‚ÇΩ

‚ùì <b>–ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Ç–∏–ø –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:</b> <code>{matcher.DEFAULT_TYPE}</code>

üí° <b>–í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞:</b>
1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ <code>OK</code> - –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–∏–ø "{matcher.DEFAULT_TYPE}"
2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ <code>–ù–∞–∑–≤–∞–Ω–∏–µ | –¢–∏–ø</code> - –≤–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é

‚è≥ –û–∂–∏–¥–∞—é –≤–∞—à –æ—Ç–≤–µ—Ç...
        """
        
        sync_send_message(message)
        
        from notifier import sync_wait_for_input
        response = sync_wait_for_input(
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ OK –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ '–ù–∞–∑–≤–∞–Ω–∏–µ | –¢–∏–ø':",
            timeout=300
        )
        
        if not response:
            logger.warning(f"‚è±Ô∏è –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–∏–ø –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è: {name}")
            mapped_name = name
            mapped_type = matcher.DEFAULT_TYPE
        elif response.upper() == 'OK':
            logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª —Ç–∏–ø –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è: {name}")
            mapped_name = name
            mapped_type = matcher.DEFAULT_TYPE
        elif '|' in response:
            parts = response.split('|', 1)
            mapped_name = parts[0].strip()
            mapped_type = parts[1].strip()
            logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤—ë–ª –≤—Ä—É—á–Ω—É—é: {mapped_name} | {mapped_type}")
        else:
            logger.warning(f"‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–∏–ø –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è: {name}")
            mapped_name = name
            mapped_type = matcher.DEFAULT_TYPE
        
        matcher.save_mapping(name, color, mapped_name, mapped_type)
        return mapped_name, mapped_type
    
    # –ï—Å—Ç—å —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è, –Ω–æ –Ω–µ 100% - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã
    message = f"""
üîç <b>–ù–∞–π–¥–µ–Ω—ã –ø–æ—Ö–æ–∂–∏–µ —Ç–æ–≤–∞—Ä—ã</b>

üì¶ <b>–¢–æ–≤–∞—Ä –∏–∑ –∑–∞–∫–∞–∑–∞:</b>
‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ: {name}
‚Ä¢ –¶–≤–µ—Ç: {color or '–Ω–µ —É–∫–∞–∑–∞–Ω'}
‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity}
‚Ä¢ –¶–µ–Ω–∞: {price} ‚ÇΩ

‚úÖ <b>–ü—Ä–µ–¥–ª–∞–≥–∞–µ–º—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã:</b>
"""
    
    # –°–æ–±–∏—Ä–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∏ —Ç–∏–ø—ã
    unique_names = []
    unique_types = []
    
    for idx, match in enumerate(matches[:5], start=1):
        message += f"\n{idx}. <b>{match['name']}</b> ({match['type']}) - {match['match_score']}%"
        
        if match['name'] not in unique_names:
            unique_names.append(match['name'])
        if match['type'] not in unique_types:
            unique_types.append(match['type'])
    
    message += "\n\nüí° <b>–í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞:</b>\n"
    message += "‚Ä¢ <code>1-5</code> - –≤—ã–±—Ä–∞—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç –ø–æ –Ω–æ–º–µ—Ä—É\n"
    message += "‚Ä¢ <code>–ù–∞–∑–≤–∞–Ω–∏–µ | –¢–∏–ø</code> - –≤–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é\n"
    message += "\n‚è≥ –û–∂–∏–¥–∞—é –≤–∞—à –æ—Ç–≤–µ—Ç..."
    
    sync_send_message(message)
    
    from notifier import sync_wait_for_input
    response = sync_wait_for_input(
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä (1-5) –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ '–ù–∞–∑–≤–∞–Ω–∏–µ | –¢–∏–ø':",
        timeout=300
    )
    
    if not response:
        # –¢–∞–π–º–∞—É—Ç - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª—É—á—à–µ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
        logger.warning(f"‚è±Ô∏è –¢–∞–π–º–∞—É—Ç - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª—É—á—à–µ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –¥–ª—è: {name}")
        best_match = matches[0]
        mapped_name = best_match['name']
        mapped_type = best_match['type']
    elif response.isdigit():
        # –í—ã–±—Ä–∞–Ω –Ω–æ–º–µ—Ä
        choice = int(response)
        if 1 <= choice <= min(5, len(matches)):
            selected = matches[choice - 1]
            mapped_name = selected['name']
            mapped_type = selected['type']
            logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –≤–∞—Ä–∏–∞–Ω—Ç {choice}: {mapped_name} ({mapped_type})")
        else:
            logger.warning(f"‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª—É—á—à–µ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –¥–ª—è: {name}")
            best_match = matches[0]
            mapped_name = best_match['name']
            mapped_type = best_match['type']
    elif '|' in response:
        # –†—É—á–Ω–æ–π –≤–≤–æ–¥
        parts = response.split('|', 1)
        mapped_name = parts[0].strip()
        mapped_type = parts[1].strip()
        logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤—ë–ª –≤—Ä—É—á–Ω—É—é: {mapped_name} | {mapped_type}")
    else:
        # –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª—É—á—à–µ–µ
        logger.warning(f"‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª—É—á—à–µ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –¥–ª—è: {name}")
        best_match = matches[0]
        mapped_name = best_match['name']
        mapped_type = best_match['type']
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
    matcher.save_mapping(name, color, mapped_name, mapped_type)
    
    return mapped_name, mapped_type


def enrich_orders_with_mapping(orders_data: list, matcher: ProductMatcher, interactive: bool = True) -> list:
    """
    –û–±–æ–≥–∞—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–æ–≤ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è–º–∏ –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞.
    
    Args:
        orders_data: –°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ —Å —Ç–æ–≤–∞—Ä–∞–º–∏
        matcher: –û–±—ä–µ–∫—Ç ProductMatcher
        interactive: –ï—Å–ª–∏ True, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º —á–µ—Ä–µ–∑ Telegram
        
    Returns:
        –û–±–æ–≥–∞—â—ë–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤
    """
    logger.info("üîÑ –ù–∞—á–∏–Ω–∞–µ–º —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ —Å –∫–∞—Ç–∞–ª–æ–≥–æ–º...")
    
    # –°–Ω–∞—á–∞–ª–∞ –∏–∑–≤–ª–µ–∫–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
    unique_items_dict = {}
    for order in orders_data:
        for item in order.get('items', []):
            key = f"{item['name']}|{item.get('color', '')}"
            if key not in unique_items_dict:
                unique_items_dict[key] = item
    
    unique_items = list(unique_items_dict.values())
    logger.info(f"üì¶ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è: {len(unique_items)}")
    
    # –°–æ–∑–¥–∞—ë–º –∫–µ—à —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–π
    mapping_cache = {}
    
    # –°–æ–ø–æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ç–æ–≤–∞—Ä
    for idx, item in enumerate(unique_items, 1):
        logger.info(f"[{idx}/{len(unique_items)}] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º: {item['name']}")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –∏–ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º
        mapped_name, mapped_type = match_product_interactive(
            item, 
            matcher, 
            auto_mode=not interactive
        )
        
        key = f"{item['name']}|{item.get('color', '')}"
        mapping_cache[key] = {
            'mapped_name': mapped_name,
            'mapped_type': mapped_type
        }
        
        logger.info(f"‚úÖ [{idx}/{len(unique_items)}] {item['name']} ‚Üí {mapped_name} ({mapped_type})")
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∫–æ –≤—Å–µ–º —Ç–æ–≤–∞—Ä–∞–º
    enriched_orders = []
    total_items = 0
    matched_items = 0
    
    for order in orders_data:
        enriched_order = order.copy()
        enriched_items = []
        
        for item in order.get('items', []):
            total_items += 1
            
            key = f"{item['name']}|{item.get('color', '')}"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –ø–æ–ª—è –∏–∑ –∫–µ—à–∞
            enriched_item = item.copy()
            if key in mapping_cache:
                enriched_item['mapped_name'] = mapping_cache[key]['mapped_name']
                enriched_item['mapped_type'] = mapping_cache[key]['mapped_type']
                matched_items += 1
            else:
                # –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∏
                enriched_item['mapped_name'] = item['name']
                enriched_item['mapped_type'] = matcher.DEFAULT_TYPE
            
            enriched_items.append(enriched_item)
        
        enriched_order['items'] = enriched_items
        enriched_orders.append(enriched_order)
    
    logger.info(f"‚úÖ –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {matched_items}/{total_items}")
    
    return enriched_orders
