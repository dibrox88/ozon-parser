""""""

–ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Google Sheets.–ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Google Sheets.

–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ç–æ–≤–∞—Ä—ã –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∏—Ö –¥–ª—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è.–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ç–æ–≤–∞—Ä—ã –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∏—Ö –¥–ª—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è.

""""""



import gspreadimport gspread

from google.oauth2.service_account import Credentialsfrom google.oauth2.service_account import Credentials

from loguru import loggerfrom loguru import logger

from typing import List, Dict, Tuple, Optionalfrom typing import List, Dict, Tuple, Optional

import reimport re





class SheetsManager:class SheetsManager:

    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Google Sheets."""    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Google Sheets."""

        

    SCOPES = [    SCOPES = [

        'https://www.googleapis.com/auth/spreadsheets.readonly',        'https://www.googleapis.com/auth/spreadsheets.readonly',

        'https://www.googleapis.com/auth/drive.readonly'        'https://www.googleapis.com/auth/drive.readonly'

    ]    ]

        

    def __init__(self, credentials_file: str):    def __init__(self, credentials_file: str):

        """        """

        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞.        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞.

                

        Args:        Args:

            credentials_file: –ü—É—Ç—å –∫ JSON —Ñ–∞–π–ª—É —Å credentials –æ—Ç Google            credentials_file: –ü—É—Ç—å –∫ JSON —Ñ–∞–π–ª—É —Å credentials –æ—Ç Google

        """        """

        self.credentials_file = credentials_file        self.credentials_file = credentials_file

        self.client = None        self.client = None

        self.products_cache = []        self.products_cache = []

                

    def connect(self) -> bool:    def connect(self) -> bool:

        """        """

        –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets API.        –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets API.

                

        Returns:        Returns:

            True –µ—Å–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ            True –µ—Å–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ

        """        """

        try:        try:

            logger.info("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets API...")            logger.info("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets API...")

            creds = Credentials.from_service_account_file(            creds = Credentials.from_service_account_file(

                self.credentials_file,                self.credentials_file,

                scopes=self.SCOPES                scopes=self.SCOPES

            )            )

            self.client = gspread.authorize(creds)            self.client = gspread.authorize(creds)

            logger.info("‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ Google Sheets API")            logger.info("‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ Google Sheets API")

            return True            return True

        except Exception as e:        except Exception as e:

            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets: {e}")            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets: {e}")

            return False            return False

        

    def load_products_from_sheet(    def load_products_from_sheet(

        self,         self, 

        spreadsheet_url: str,        spreadsheet_url: str,

        sheet_name: Optional[str] = None,        sheet_name: Optional[str] = None,

        columns_range: str = "A:AU"        columns_range: str = "A:AU"

    ) -> List[Dict[str, str]]:    ) -> List[Dict[str, str]]:

        """        """

        –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ Google Sheets.        –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ Google Sheets.

                

        –°—Ç—Ä—É–∫—Ç—É—Ä–∞: –∫–∞–∂–¥—ã–µ 3 —Å—Ç–æ–ª–±—Ü–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç [—Ü–µ–Ω–∞, –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ, —Ç–∏–ø]        –°—Ç—Ä—É–∫—Ç—É—Ä–∞: –∫–∞–∂–¥—ã–µ 3 —Å—Ç–æ–ª–±—Ü–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç [—Ü–µ–Ω–∞, –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ, —Ç–∏–ø]

                

        Args:        Args:

            spreadsheet_url: URL —Ç–∞–±–ª–∏—Ü—ã (–º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å gid –¥–ª—è –≤—ã–±–æ—Ä–∞ –ª–∏—Å—Ç–∞)            spreadsheet_url: URL —Ç–∞–±–ª–∏—Ü—ã

            sheet_name: –ù–∞–∑–≤–∞–Ω–∏–µ –ª–∏—Å—Ç–∞ (–µ—Å–ª–∏ None, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è gid –∏–∑ URL –∏–ª–∏ –ø–µ—Ä–≤—ã–π –ª–∏—Å—Ç)            sheet_name: –ù–∞–∑–≤–∞–Ω–∏–µ –ª–∏—Å—Ç–∞ (–µ—Å–ª–∏ None, –±–µ—Ä—ë—Ç—Å—è –ø–µ—Ä–≤—ã–π)

            columns_range: –î–∏–∞–ø–∞–∑–æ–Ω —Å—Ç–æ–ª–±—Ü–æ–≤ –¥–ª—è —á—Ç–µ–Ω–∏—è            columns_range: –î–∏–∞–ø–∞–∑–æ–Ω —Å—Ç–æ–ª–±—Ü–æ–≤ –¥–ª—è —á—Ç–µ–Ω–∏—è

                        

        Returns:        Returns:

            –°–ø–∏—Å–æ–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ [{name, type}, ...]            –°–ø–∏—Å–æ–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ [{name, type}, ...]

        """        """

        try:        try:

            logger.info(f"–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã: {spreadsheet_url}")            logger.info(f"–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã: {spreadsheet_url}")

                        # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É

            # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É            spreadsheet = self.client.open_by_url(spreadsheet_url)

            spreadsheet = self.client.open_by_url(spreadsheet_url)            # –í—ã–±–∏—Ä–∞–µ–º –ª–∏—Å—Ç

                        worksheet = None

            # –í—ã–±–∏—Ä–∞–µ–º –ª–∏—Å—Ç            if sheet_name:

            worksheet = None                worksheet = spreadsheet.worksheet(sheet_name)

            if sheet_name:            else:

                # –Ø–≤–Ω–æ —É–∫–∞–∑–∞–Ω–æ –∏–º—è –ª–∏—Å—Ç–∞                gid_match = re.search(r'[?&]gid=(\d+)', spreadsheet_url)

                worksheet = spreadsheet.worksheet(sheet_name)                gid = gid_match.group(1) if gid_match else None

                logger.info(f"üìÑ –û—Ç–∫—Ä—ã—Ç –ª–∏—Å—Ç –ø–æ –∏–º–µ–Ω–∏: {worksheet.title} (id={worksheet.id})")                if gid:

            else:                    for ws in spreadsheet.worksheets():

                # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å gid –∏–∑ URL                        if str(ws.id) == str(gid):

                gid_match = re.search(r'[?&]gid=(\d+)', spreadsheet_url)                            worksheet = ws

                gid = gid_match.group(1) if gid_match else None                            break

                                if worksheet is None:

                if gid:                    worksheet = spreadsheet.get_worksheet(0)

                    logger.info(f"üîç –ò—â–µ–º –ª–∏—Å—Ç —Å gid={gid}")            logger.info(f"üìÑ –û—Ç–∫—Ä—ã—Ç –ª–∏—Å—Ç: {worksheet.title} (id={worksheet.id})")

                    # –ù–∞–π—Ç–∏ –ª–∏—Å—Ç —Å –Ω—É–∂–Ω—ã–º gid            

                    for ws in spreadsheet.worksheets():            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –¥–∏–∞–ø–∞–∑–æ–Ω–∞

                        if str(ws.id) == str(gid):            all_values = worksheet.get(columns_range)

                            worksheet = ws            

                            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω –ª–∏—Å—Ç —Å gid={gid}: {ws.title}")            if not all_values:

                            break                logger.warning("‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞—è")

                                    try:

                    if worksheet is None:                    logger.info(f"–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã: {spreadsheet_url}")

                        logger.warning(f"‚ö†Ô∏è –õ–∏—Å—Ç —Å gid={gid} –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π –ª–∏—Å—Ç")                    # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É

                                    spreadsheet = self.client.open_by_url(spreadsheet_url)

                # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ gid –∏–ª–∏ gid –Ω–µ —É–∫–∞–∑–∞–Ω, –±–µ—Ä—ë–º –ø–µ—Ä–≤—ã–π –ª–∏—Å—Ç                    worksheet = None

                if worksheet is None:                    if sheet_name:

                    worksheet = spreadsheet.get_worksheet(0)                        worksheet = spreadsheet.worksheet(sheet_name)

                    logger.info(f"üìÑ –û—Ç–∫—Ä—ã—Ç –ø–µ—Ä–≤—ã–π –ª–∏—Å—Ç: {worksheet.title} (id={worksheet.id})")                    else:

                                    gid_match = re.search(r'[?&]gid=(\d+)', spreadsheet_url)

            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –¥–∏–∞–ø–∞–∑–æ–Ω–∞                        gid = gid_match.group(1) if gid_match else None

            all_values = worksheet.get(columns_range)                        if gid:

                                        for ws in spreadsheet.worksheets():

            if not all_values:                                if str(ws.id) == str(gid):

                logger.warning("‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞—è")                                    worksheet = ws

                return []                                    break

                                    if worksheet is None:

            # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ: –∫–∞–∂–¥—ã–µ 3 —Å—Ç–æ–ª–±—Ü–∞ = [—Ü–µ–Ω–∞, –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ, —Ç–∏–ø]                            worksheet = spreadsheet.get_worksheet(0)

            products = []                    logger.info(f"üìÑ –û—Ç–∫—Ä—ã—Ç –ª–∏—Å—Ç: {worksheet.title} (id={worksheet.id})")

            unique_products = set()  # –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö (name, type)                        continue

                                

            # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–µ                    # –°–æ–∑–¥–∞—ë–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á

            for row_idx, row in enumerate(all_values, start=1):                    unique_key = (name.lower(), product_type.lower())

                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é —Ç—Ä–æ–π–∫—É —Å—Ç–æ–ª–±—Ü–æ–≤                    

                for col_idx in range(0, len(row), 3):                    if unique_key not in unique_products:

                    if col_idx + 2 >= len(row):                        unique_products.add(unique_key)

                        break  # –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ç–æ–ª–±—Ü–æ–≤ –¥–ª—è –ø–æ–ª–Ω–æ–π —Ç—Ä–æ–π–∫–∏                        products.append({

                                                'name': name,

                    price = row[col_idx].strip() if col_idx < len(row) else ""                            'type': product_type,

                    name = row[col_idx + 1].strip() if col_idx + 1 < len(row) else ""                            'price': price  # –î–ª—è —Å–ø—Ä–∞–≤–∫–∏

                    product_type = row[col_idx + 2].strip() if col_idx + 2 < len(row) else ""                        })

                                            logger.debug(f"–î–æ–±–∞–≤–ª–µ–Ω —Ç–æ–≤–∞—Ä: {name} ({product_type})")

                    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ –∏–ª–∏ –∑–∞–≥–æ–ª–æ–≤–æ—á–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏            

                    if not name or name.lower() in ['–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ', '–Ω–∞–∑–≤–∞–Ω–∏–µ', '—Ç–æ–≤–∞—Ä']:            logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤: {len(products)}")

                        continue            self.products_cache = products

                                return products

                    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ —Ç–∏–ø –ø—É—Å—Ç–æ–π            

                    if not product_type or product_type.lower() in ['—Ç–∏–ø', '–∫–∞—Ç–µ–≥–æ—Ä–∏—è']:        except Exception as e:

                        continue            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Google Sheets: {e}")

                                return []

                    # –°–æ–∑–¥–∞—ë–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á    

                    unique_key = (name.lower(), product_type.lower())    def get_products(self) -> List[Dict[str, str]]:

                            """–ü–æ–ª—É—á–∏—Ç—å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤."""

                    if unique_key not in unique_products:        return self.products_cache

                        unique_products.add(unique_key)    

                        products.append({    def find_similar_product(self, search_name: str) -> List[Dict[str, str]]:

                            'name': name,        """

                            'type': product_type,        –ù–∞–π—Ç–∏ –ø–æ—Ö–æ–∂–∏–µ —Ç–æ–≤–∞—Ä—ã –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é.

                            'price': price  # –î–ª—è —Å–ø—Ä–∞–≤–∫–∏        

                        })        Args:

                        logger.debug(f"–î–æ–±–∞–≤–ª–µ–Ω —Ç–æ–≤–∞—Ä: {name} ({product_type})")            search_name: –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞

                        

            logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤: {len(products)}")        Returns:

            self.products_cache = products            –°–ø–∏—Å–æ–∫ –ø–æ—Ö–æ–∂–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤

            return products        """

                    if not self.products_cache:

        except Exception as e:            return []

            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Google Sheets: {e}")        

            return []        search_lower = search_name.lower()

            similar = []

    def get_products(self) -> List[Dict[str, str]]:        

        """–ü–æ–ª—É—á–∏—Ç—å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤."""        for product in self.products_cache:

        return self.products_cache            product_name_lower = product['name'].lower()

                

    def find_similar_product(self, search_name: str) -> List[Dict[str, str]]:            # –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ

        """            if product_name_lower == search_lower:

        –ù–∞–π—Ç–∏ –ø–æ—Ö–æ–∂–∏–µ —Ç–æ–≤–∞—Ä—ã –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é.                similar.insert(0, {**product, 'match_score': 100})

                        continue

        Args:            

            search_name: –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞            # –°–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ

                        if search_lower in product_name_lower or product_name_lower in search_lower:

        Returns:                similar.append({**product, 'match_score': 80})

            –°–ø–∏—Å–æ–∫ –ø–æ—Ö–æ–∂–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤ —Å –æ—Ü–µ–Ω–∫–æ–π —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è                continue

        """            

        if not self.products_cache:            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º

            return []            search_words = set(re.findall(r'\w+', search_lower))

                    product_words = set(re.findall(r'\w+', product_name_lower))

        search_lower = search_name.lower()            

        similar = []            if search_words and product_words:

                        common_words = search_words & product_words

        for product in self.products_cache:                if common_words:

            product_name_lower = product['name'].lower()                    score = int((len(common_words) / max(len(search_words), len(product_words))) * 70)

                                if score >= 30:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥ –ø–æ—Ö–æ–∂–µ—Å—Ç–∏

            # –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ            worksheet = None

            if product_name_lower == search_lower:            if sheet_name:

                similar.insert(0, {**product, 'match_score': 100})                worksheet = spreadsheet.worksheet(sheet_name)

                continue            else:

                            # –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å gid –∏–∑ URL

            # –°–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ                import re

            if search_lower in product_name_lower or product_name_lower in search_lower:                gid_match = re.search(r'[?&]gid=(\d+)', spreadsheet_url)

                similar.append({**product, 'match_score': 80})                gid = gid_match.group(1) if gid_match else None

                continue                if gid:

                                # –ù–∞–π—Ç–∏ –ª–∏—Å—Ç —Å –Ω—É–∂–Ω—ã–º gid

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º                    for ws in spreadsheet.worksheets():

            search_words = set(re.findall(r'\w+', search_lower))                        if str(ws.id) == str(gid):

            product_words = set(re.findall(r'\w+', product_name_lower))                            worksheet = ws

                                        break

            if search_words and product_words:                if worksheet is None:

                common_words = search_words & product_words                    worksheet = spreadsheet.get_worksheet(0)

                if common_words:        

                    score = int((len(common_words) / max(len(search_words), len(product_words))) * 70)        return similar[:5]  # –¢–æ–ø-5 –ø–æ—Ö–æ–∂–∏—Ö

                    if score >= 30:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥ –ø–æ—Ö–æ–∂–µ—Å—Ç–∏
                        similar.append({**product, 'match_score': score})
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ score
        similar.sort(key=lambda x: x['match_score'], reverse=True)
        
        return similar[:5]  # –¢–æ–ø-5 –ø–æ—Ö–æ–∂–∏—Ö
