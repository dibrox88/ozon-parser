"""
–ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Google Sheets.
–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ç–æ–≤–∞—Ä—ã –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∏—Ö –¥–ª—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è.
"""

import gspread
from google.oauth2.service_account import Credentials
from loguru import logger
from typing import List, Dict, Optional
import re


class SheetsManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Google Sheets."""
    
    SCOPES = [
        'https://www.googleapis.com/auth/spreadsheets.readonly',
        'https://www.googleapis.com/auth/drive.readonly'
    ]
    
    def __init__(self, credentials_file: str):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞.
        
        Args:
            credentials_file: –ü—É—Ç—å –∫ JSON —Ñ–∞–π–ª—É —Å credentials –æ—Ç Google
        """
        self.credentials_file = credentials_file
        self.client: Optional[gspread.Client] = None
        self.products_cache: List[Dict[str, str]] = []
        
    def connect(self) -> bool:
        """
        –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets API.
        
        Returns:
            True –µ—Å–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            logger.info("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets API...")
            creds = Credentials.from_service_account_file(
                self.credentials_file,
                scopes=self.SCOPES
            )
            self.client = gspread.authorize(creds)
            logger.info("‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ Google Sheets API")
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets: {e}")
            return False
    
    def load_products_from_sheet(
        self, 
        spreadsheet_url: str,
        sheet_name: str = "–ù–∞—Å—Ç—Ä–æ–π–∫–∏",
        columns_range: str = "A:AU"
    ) -> List[Dict[str, str]]:
        """
        –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ Google Sheets.
        
        –°—Ç—Ä—É–∫—Ç—É—Ä–∞: –∫–∞–∂–¥—ã–µ 4 —Å—Ç–æ–ª–±—Ü–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç [—Ü–µ–Ω–∞, –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ, —Ç–∏–ø, –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞]
        
        Args:
            spreadsheet_url: URL —Ç–∞–±–ª–∏—Ü—ã
            sheet_name: –ù–∞–∑–≤–∞–Ω–∏–µ –ª–∏—Å—Ç–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é "–ù–∞—Å—Ç—Ä–æ–π–∫–∏")
            columns_range: –î–∏–∞–ø–∞–∑–æ–Ω —Å—Ç–æ–ª–±—Ü–æ–≤ –¥–ª—è —á—Ç–µ–Ω–∏—è
            
        Returns:
            –°–ø–∏—Å–æ–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ [{name, type, price}, ...]
        """
        try:
            logger.info(f"–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã: {spreadsheet_url}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
            if self.client is None:
                raise RuntimeError("Google Sheets client –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –í—ã–∑–æ–≤–∏—Ç–µ connect() —Å–Ω–∞—á–∞–ª–∞.")
            
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
            spreadsheet = self.client.open_by_url(spreadsheet_url)
            
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º –ª–∏—Å—Ç "–ù–∞—Å—Ç—Ä–æ–π–∫–∏"
            worksheet = spreadsheet.worksheet(sheet_name)
            logger.info(f"üìÑ –û—Ç–∫—Ä—ã—Ç –ª–∏—Å—Ç: {worksheet.title}")
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
            all_values = worksheet.get(columns_range)
            
            if not all_values:
                logger.warning("‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞—è")
                return []
            
            # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ: –∫–∞–∂–¥—ã–µ 4 —Å—Ç–æ–ª–±—Ü–∞ = [—Ü–µ–Ω–∞, –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ, —Ç–∏–ø, –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞]
            products = []
            unique_products = set()  # –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö (name, type)
            
            # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–µ
            for row_idx, row in enumerate(all_values, start=1):
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é —á–µ—Ç–≤—ë—Ä–∫—É —Å—Ç–æ–ª–±—Ü–æ–≤
                for col_idx in range(0, len(row), 4):
                    if col_idx + 2 >= len(row):
                        break  # –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ç–æ–ª–±—Ü–æ–≤ –¥–ª—è –ø–æ–ª–Ω–æ–π —á–µ—Ç–≤—ë—Ä–∫–∏ (–º–∏–Ω–∏–º—É–º –Ω—É–∂–Ω—ã price, name, type)
                    
                    price = row[col_idx].strip() if col_idx < len(row) else ""
                    name = row[col_idx + 1].strip() if col_idx + 1 < len(row) else ""
                    product_type = row[col_idx + 2].strip() if col_idx + 2 < len(row) else ""
                    # –ß–µ—Ç–≤—ë—Ä—Ç—ã–π —Å—Ç–æ–ª–±–µ—Ü (–Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞) –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
                    # order_number = row[col_idx + 3].strip() if col_idx + 3 < len(row) else ""
                    
                    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ –∏–ª–∏ –∑–∞–≥–æ–ª–æ–≤–æ—á–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
                    if not name or name.lower() in ['–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ', '–Ω–∞–∑–≤–∞–Ω–∏–µ', '—Ç–æ–≤–∞—Ä']:
                        continue
                    
                    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ —Ç–∏–ø –ø—É—Å—Ç–æ–π
                    if not product_type or product_type.lower() in ['—Ç–∏–ø', '–∫–∞—Ç–µ–≥–æ—Ä–∏—è']:
                        continue
                    
                    # –°–æ–∑–¥–∞—ë–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á
                    unique_key = (name.lower(), product_type.lower())
                    
                    if unique_key not in unique_products:
                        unique_products.add(unique_key)
                        products.append({
                            'name': name,
                            'type': product_type,
                            'price': price  # –î–ª—è —Å–ø—Ä–∞–≤–∫–∏
                        })
                        logger.debug(f"–î–æ–±–∞–≤–ª–µ–Ω —Ç–æ–≤–∞—Ä: {name} ({product_type})")
            
            logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤: {len(products)}")
            self.products_cache = products
            return products
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Google Sheets: {e}")
            return []
    
    def get_products(self) -> List[Dict[str, str]]:
        """–ü–æ–ª—É—á–∏—Ç—å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤."""
        return self.products_cache
    
    def find_similar_product(self, search_name: str) -> List[Dict[str, str]]:
        """
        –ù–∞–π—Ç–∏ –ø–æ—Ö–æ–∂–∏–µ —Ç–æ–≤–∞—Ä—ã –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é.
        
        Args:
            search_name: –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞
            
        Returns:
            –°–ø–∏—Å–æ–∫ –ø–æ—Ö–æ–∂–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤
        """
        if not self.products_cache:
            return []
        
        search_lower = search_name.lower()
        similar = []
        
        for product in self.products_cache:
            product_name_lower = product['name'].lower()
            
            # –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
            if product_name_lower == search_lower:
                similar.insert(0, {**product, 'match_score': 100})
                continue
            
            # –°–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
            if search_lower in product_name_lower or product_name_lower in search_lower:
                similar.append({**product, 'match_score': 80})
                continue
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
            search_words = set(re.findall(r'\w+', search_lower))
            product_words = set(re.findall(r'\w+', product_name_lower))
            
            if search_words and product_words:
                common_words = search_words & product_words
                if common_words:
                    score = int((len(common_words) / max(len(search_words), len(product_words))) * 70)
                    if score >= 30:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥ –ø–æ—Ö–æ–∂–µ—Å—Ç–∏
                        similar.append({**product, 'match_score': score})
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ score
        similar.sort(key=lambda x: x['match_score'], reverse=True)
        
        return similar[:5]  # –¢–æ–ø-5 –ø–æ—Ö–æ–∂–∏—Ö