"""–ú–æ–¥—É–ª—å –ø–∞—Ä—Å–∏–Ω–≥–∞ –∑–∞–∫–∞–∑–æ–≤ Ozon."""
import time
from pathlib import Path
from typing import List, Dict, Any
from playwright.sync_api import Page
from loguru import logger
from config import Config
from notifier import sync_send_message, sync_send_photo


class OzonParser:
    """–ö–ª–∞—Å—Å –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –∑–∞–∫–∞–∑–æ–≤."""
    
    def __init__(self, page: Page):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è.
        
        Args:
            page: –°—Ç—Ä–∞–Ω–∏—Ü–∞ Playwright
        """
        self.page = page
        self.config = Config()
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤
        Path(Config.SCREENSHOTS_DIR).mkdir(exist_ok=True)
    
    def _take_screenshot(self, name: str) -> str:
        """
        –°–¥–µ–ª–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç.
        
        Args:
            name: –ò–º—è —Ñ–∞–π–ª–∞
            
        Returns:
            –ü—É—Ç—å –∫ —Å–∫—Ä–∏–Ω—à–æ—Ç—É
        """
        timestamp = int(time.time())
        filename = f"{Config.SCREENSHOTS_DIR}/{name}_{timestamp}.png"
        self.page.screenshot(path=filename, full_page=True)
        logger.info(f"–°–∫—Ä–∏–Ω—à–æ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filename}")
        return filename
    
    def navigate_to_orders(self) -> bool:
        """
        –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∑–∞–∫–∞–∑–æ–≤.
        
        Returns:
            True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            logger.info(f"–ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∑–∞–∫–∞–∑–æ–≤: {Config.OZON_ORDERS_URL}")
            sync_send_message("üì¶ –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ø–∏—Å–∫—É –∑–∞–∫–∞–∑–æ–≤...")
            
            self.page.goto(Config.OZON_ORDERS_URL, timeout=Config.NAVIGATION_TIMEOUT)
            self.page.wait_for_load_state('networkidle', timeout=Config.DEFAULT_TIMEOUT)
            
            time.sleep(3)
            
            # –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç
            screenshot = self._take_screenshot('orders_page')
            sync_send_photo(screenshot, "–°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–∫–∞–∑–æ–≤ –æ—Ç–∫—Ä—ã—Ç–∞")
            
            logger.info("–£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ—à–ª–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∑–∞–∫–∞–∑–æ–≤")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∑–∞–∫–∞–∑–æ–≤: {e}")
            sync_send_message(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –∫ –∑–∞–∫–∞–∑–∞–º: {str(e)}")
            return False
    
    def parse_orders(self) -> List[Dict[str, Any]]:
        """
        –ü–∞—Ä—Å–∏–Ω–≥ —Å–ø–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤.
        
        Returns:
            –°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤
        """
        try:
            logger.info("–ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –∑–∞–∫–∞–∑–æ–≤")
            sync_send_message("üîç –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –∑–∞–∫–∞–∑–æ–≤...")
            
            orders = []
            
            # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–æ—Å–ª–µ –∏–∑—É—á–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ø–æ–ª—É—á–∞–µ–º HTML –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            page_content = self.page.content()
            
            logger.info("–ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω")
            sync_send_message(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤: {len(orders)}")
            
            return orders
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –∑–∞–∫–∞–∑–æ–≤: {e}")
            sync_send_message(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ: {str(e)}")
            return []
    
    def get_page_html(self) -> str:
        """
        –ü–æ–ª—É—á–∏—Ç—å HTML —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.
        
        Returns:
            HTML –∫–æ–Ω—Ç–µ–Ω—Ç
        """
        try:
            return self.page.content()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ HTML: {e}")
            return ""
