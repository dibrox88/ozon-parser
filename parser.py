"""–ú–æ–¥—É–ª—å –ø–∞—Ä—Å–∏–Ω–≥–∞ –∑–∞–∫–∞–∑–æ–≤ Ozon."""
import time
import re
from pathlib import Path
from typing import List, Dict, Any, Set
from playwright.sync_api import Page
from loguru import logger
from config import Config
from notifier import sync_send_message, sync_send_photo


class OzonParser:
    """–ö–ª–∞—Å—Å –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –∑–∞–∫–∞–∑–æ–≤."""
    
    def __init__(self, page: Page):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è.
        
        Args:
            page: –°—Ç—Ä–∞–Ω–∏—Ü–∞ Playwright
        """
        self.page = page
        self.config = Config()
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤
        Path(Config.SCREENSHOTS_DIR).mkdir(exist_ok=True)
    
    def _take_screenshot(self, name: str) -> str:
        """
        –°–¥–µ–ª–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç.
        
        Args:
            name: –ò–º—è —Ñ–∞–π–ª–∞
            
        Returns:
            –ü—É—Ç—å –∫ —Å–∫—Ä–∏–Ω—à–æ—Ç—É
        """
        timestamp = int(time.time())
        filename = f"{Config.SCREENSHOTS_DIR}/{name}_{timestamp}.png"
        self.page.screenshot(path=filename, full_page=True)
        logger.info(f"–°–∫—Ä–∏–Ω—à–æ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filename}")
        return filename
    
    def navigate_to_orders(self) -> bool:
        """
        –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∑–∞–∫–∞–∑–æ–≤.
        
        Returns:
            True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            logger.info(f"–ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∑–∞–∫–∞–∑–æ–≤: {Config.OZON_ORDERS_URL}")
            sync_send_message("üì¶ –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ø–∏—Å–∫—É –∑–∞–∫–∞–∑–æ–≤...")
            
            self.page.goto(Config.OZON_ORDERS_URL, timeout=Config.NAVIGATION_TIMEOUT)
            self.page.wait_for_load_state('networkidle', timeout=Config.DEFAULT_TIMEOUT)
            
            time.sleep(3)
            
            # –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç
            screenshot = self._take_screenshot('orders_page')
            sync_send_photo(screenshot, "–°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–∫–∞–∑–æ–≤ –æ—Ç–∫—Ä—ã—Ç–∞")
            
            logger.info("–£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ—à–ª–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∑–∞–∫–∞–∑–æ–≤")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∑–∞–∫–∞–∑–æ–≤: {e}")
            sync_send_message(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –∫ –∑–∞–∫–∞–∑–∞–º: {str(e)}")
            return False
    
    def parse_orders(self) -> List[str]:
        """
        –ü–∞—Ä—Å–∏–Ω–≥ —Å–ø–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤.
        
        Returns:
            –°–ø–∏—Å–æ–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤ –∑–∞–∫–∞–∑–æ–≤, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é
        """
        try:
            logger.info("–ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –∑–∞–∫–∞–∑–æ–≤")
            sync_send_message("üîç –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –Ω–æ–º–µ—Ä–æ–≤ –∑–∞–∫–∞–∑–æ–≤...")
            
            # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            time.sleep(2)
            
            # –ü—Ä–æ–±—É–µ–º –ø—Ä–æ–∫—Ä—É—Ç–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤–Ω–∏–∑ –¥–ª—è –ø–æ–¥–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤
            logger.info("–ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤...")
            self._scroll_to_load_all_orders()
            
            order_numbers: Set[str] = set()
            
            # –í–∞—Ä–∏–∞–Ω—Ç 1: –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω USER_ID, –∏—â–µ–º –ø–æ –Ω–µ–º—É
            if Config.OZON_USER_ID:
                logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º USER_ID –¥–ª—è –ø–æ–∏—Å–∫–∞: {Config.OZON_USER_ID}")
                order_numbers.update(self._find_orders_by_user_id(Config.OZON_USER_ID))
            
            # –í–∞—Ä–∏–∞–Ω—Ç 2: –ò—â–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å –Ω–æ–º–µ—Ä–∞–º–∏ –∑–∞–∫–∞–∑–æ–≤ –ø–æ —Å–µ–ª–µ–∫—Ç–æ—Ä—É
            logger.info("–ò—â–µ–º –Ω–æ–º–µ—Ä–∞ –∑–∞–∫–∞–∑–æ–≤ –ø–æ —Å–µ–ª–µ–∫—Ç–æ—Ä—É...")
            order_numbers.update(self._find_orders_by_selector())
            
            # –í–∞—Ä–∏–∞–Ω—Ç 3: –ü–æ–∏—Å–∫ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É –≤ —Ç–µ–∫—Å—Ç–µ (—Ä–µ–∑–µ—Ä–≤–Ω—ã–π –º–µ—Ç–æ–¥)
            if not order_numbers:
                logger.info("–ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –º–µ—Ç–æ–¥ - –ø–æ–∏—Å–∫ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É...")
                order_numbers.update(self._find_orders_by_pattern())
            
            # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º
            unique_orders = sorted(list(order_numbers))
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤: {len(unique_orders)}")
            
            if unique_orders:
                logger.info("üìã –°–ø–∏—Å–æ–∫ –Ω–æ–º–µ—Ä–æ–≤ –∑–∞–∫–∞–∑–æ–≤ (–æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π):")
                for idx, order_num in enumerate(unique_orders, 1):
                    logger.info(f"  {idx}. {order_num}")
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram
                message = f"‚úÖ <b>–ù–∞–π–¥–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤: {len(unique_orders)}</b>\n\n"
                message += "üìã –ù–æ–º–µ—Ä–∞ –∑–∞–∫–∞–∑–æ–≤:\n"
                for idx, order_num in enumerate(unique_orders, 1):
                    message += f"{idx}. <code>{order_num}</code>\n"
                
                sync_send_message(message)
            else:
                logger.warning("‚ö†Ô∏è –ù–æ–º–µ—Ä–∞ –∑–∞–∫–∞–∑–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                sync_send_message("‚ö†Ô∏è –ù–æ–º–µ—Ä–∞ –∑–∞–∫–∞–∑–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ")
            
            return unique_orders
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –∑–∞–∫–∞–∑–æ–≤: {e}")
            sync_send_message(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ: {str(e)}")
            return []
    
    def _scroll_to_load_all_orders(self):
        """–ü—Ä–æ–∫—Ä—É—Ç–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤–Ω–∏–∑ –¥–ª—è –ø–æ–¥–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤."""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—ã—Å–æ—Ç—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            prev_height = self.page.evaluate("document.body.scrollHeight")
            
            # –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑
            for i in range(5):
                # –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –≤–Ω–∏–∑
                self.page.evaluate("window.scrollTo(0, document.body.scrollHeight)")
                time.sleep(1)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª–∞—Å—å –ª–∏ –≤—ã—Å–æ—Ç–∞
                new_height = self.page.evaluate("document.body.scrollHeight")
                if new_height == prev_height:
                    # –í—ã—Å–æ—Ç–∞ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å, –∑–Ω–∞—á–∏—Ç –≤—Å–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ
                    break
                prev_height = new_height
                logger.info(f"–ü—Ä–æ–∫—Ä—É—Ç–∫–∞ {i+1}/5: –≤—ã—Å–æ—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã {new_height}px")
            
            # –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ –Ω–∞–≤–µ—Ä—Ö
            self.page.evaluate("window.scrollTo(0, 0)")
            time.sleep(1)
            
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–∫—Ä—É—Ç–∫–µ: {e}")
    
    def _find_orders_by_user_id(self, user_id: str) -> Set[str]:
        """
        –ù–∞–π—Ç–∏ –∑–∞–∫–∞–∑—ã –ø–æ USER_ID.
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –Ω–æ–º–µ—Ä–æ–≤ –∑–∞–∫–∞–∑–æ–≤
        """
        orders = set()
        try:
            # –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ user_id
            # –ü–∞—Ç—Ç–µ—Ä–Ω: USER_ID-XXXX (–Ω–∞–ø—Ä–∏–º–µ—Ä, 46206571-0591)
            pattern = f'{user_id}-'
            
            # –ò—â–µ–º –≤—Å–µ div —Å –∫–ª–∞—Å—Å–æ–º, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ –Ω–æ–º–µ—Ä–∞ –∑–∞–∫–∞–∑–æ–≤
            elements = self.page.query_selector_all(f'div[title*="{user_id}"]')
            
            logger.info(f"–ù–∞–π–¥–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å user_id: {len(elements)}")
            
            for element in elements:
                try:
                    title = element.get_attribute('title')
                    if title and pattern in title:
                        orders.add(title)
                        logger.debug(f"–ù–∞–π–¥–µ–Ω –∑–∞–∫–∞–∑ (–ø–æ user_id): {title}")
                except Exception as e:
                    logger.debug(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —ç–ª–µ–º–µ–Ω—Ç–∞: {e}")
            
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ user_id: {e}")
        
        return orders
    
    def _find_orders_by_selector(self) -> Set[str]:
        """
        –ù–∞–π—Ç–∏ –∑–∞–∫–∞–∑—ã –ø–æ CSS —Å–µ–ª–µ–∫—Ç–æ—Ä—É.
        
        Returns:
            –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –Ω–æ–º–µ—Ä–æ–≤ –∑–∞–∫–∞–∑–æ–≤
        """
        orders = set()
        try:
            # –†–∞–∑–ª–∏—á–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–æ–º–µ—Ä–æ–≤ –∑–∞–∫–∞–∑–æ–≤
            selectors = [
                'div.b5_4_4-b0.tsBodyControl300XSmall',  # –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –∏–∑ –ø—Ä–∏–º–µ—Ä–∞
                'div.b5_4_4-b0',
                'div[class*="b5_4_4"]',
                'div[title][class*="tsBodyControl"]',
            ]
            
            for selector in selectors:
                try:
                    elements = self.page.query_selector_all(selector)
                    logger.info(f"–°–µ–ª–µ–∫—Ç–æ—Ä '{selector}': –Ω–∞–π–¥–µ–Ω–æ {len(elements)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
                    
                    for element in elements:
                        try:
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º title
                            title = element.get_attribute('title')
                            if title and self._is_order_number(title):
                                orders.add(title)
                                logger.debug(f"–ù–∞–π–¥–µ–Ω –∑–∞–∫–∞–∑ (title): {title}")
                            
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—Å—Ç
                            text = element.inner_text().strip()
                            if text and self._is_order_number(text):
                                orders.add(text)
                                logger.debug(f"–ù–∞–π–¥–µ–Ω –∑–∞–∫–∞–∑ (text): {text}")
                                
                        except Exception as e:
                            logger.debug(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —ç–ª–µ–º–µ–Ω—Ç–∞: {e}")
                            
                except Exception as e:
                    logger.debug(f"–û—à–∏–±–∫–∞ —Å —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º {selector}: {e}")
            
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ —Å–µ–ª–µ–∫—Ç–æ—Ä—É: {e}")
        
        return orders
    
    def _find_orders_by_pattern(self) -> Set[str]:
        """
        –ù–∞–π—Ç–∏ –∑–∞–∫–∞–∑—ã –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É –≤ HTML (—Ä–µ–∑–µ—Ä–≤–Ω—ã–π –º–µ—Ç–æ–¥).
        
        Returns:
            –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –Ω–æ–º–µ—Ä–æ–≤ –∑–∞–∫–∞–∑–æ–≤
        """
        orders = set()
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤–µ—Å—å HTML
            html = self.page.content()
            
            # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –Ω–æ–º–µ—Ä–∞ –∑–∞–∫–∞–∑–∞: XXXXXXXX-XXXX (8 —Ü–∏—Ñ—Ä, –¥–µ—Ñ–∏—Å, 4 —Ü–∏—Ñ—Ä—ã)
            pattern = r'\b(\d{8}-\d{4})\b'
            
            matches = re.findall(pattern, html)
            
            for match in matches:
                if self._is_order_number(match):
                    orders.add(match)
                    logger.debug(f"–ù–∞–π–¥–µ–Ω –∑–∞–∫–∞–∑ (pattern): {match}")
            
            logger.info(f"–ù–∞–π–¥–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É: {len(orders)}")
            
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É: {e}")
        
        return orders
    
    def _is_order_number(self, text: str) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç –Ω–æ–º–µ—Ä–æ–º –∑–∞–∫–∞–∑–∞.
        
        Args:
            text: –¢–µ–∫—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            
        Returns:
            True –µ—Å–ª–∏ —ç—Ç–æ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞
        """
        if not text:
            return False
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω: XXXXXXXX-XXXX (8 —Ü–∏—Ñ—Ä, –¥–µ—Ñ–∏—Å, 4 —Ü–∏—Ñ—Ä—ã)
        pattern = r'^\d{8}-\d{4}$'
        return bool(re.match(pattern, text.strip()))
    
    def get_page_html(self) -> str:
        """
        –ü–æ–ª—É—á–∏—Ç—å HTML —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.
        
        Returns:
            HTML –∫–æ–Ω—Ç–µ–Ω—Ç
        """
        try:
            return self.page.content()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ HTML: {e}")
            return ""
