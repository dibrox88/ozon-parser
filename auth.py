"""–ú–æ–¥—É–ª—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–∞ Ozon."""
import os
import time
import base64
import re
from pathlib import Path
from typing import Optional
from playwright.sync_api import Page, Browser, sync_playwright, TimeoutError as PlaywrightTimeout
from loguru import logger
from config import Config
from notifier import sync_send_message, sync_send_photo, sync_wait_for_input
from stealth import StealthHelper

try:
    from PIL import Image
    import cv2
    import numpy as np
    from pyzbar.pyzbar import decode as qr_decode
    QR_DECODE_AVAILABLE = True
except ImportError:
    logger.warning("–ë–∏–±–ª–∏–æ—Ç–µ–∫–∏ –¥–ª—è –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è QR-–∫–æ–¥–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã (pyzbar, opencv-python)")
    QR_DECODE_AVAILABLE = False


class OzonAuth:
    """–ö–ª–∞—Å—Å –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–∞ Ozon."""
    
    def __init__(self, page: Page):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è.
        
        Args:
            page: –°—Ç—Ä–∞–Ω–∏—Ü–∞ Playwright
        """
        self.page = page
        self.config = Config()
        # –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –Ω–∞–∂–∞—Ç–∏–π/–æ—Ç–∫—Ä—ã—Ç–∏–π
        self._login_clicked = False

        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤
        Path(Config.SCREENSHOTS_DIR).mkdir(exist_ok=True)
    
    def _decode_qr_from_base64(self, base64_data: str) -> Optional[str]:
        """
        –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å QR-–∫–æ–¥ –∏–∑ base64 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.
        
        Args:
            base64_data: –î–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ base64
            
        Returns:
            –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Å—ã–ª–∫–∞ –∏–∑ QR-–∫–æ–¥–∞ –∏–ª–∏ None
        """
        if not QR_DECODE_AVAILABLE:
            logger.warning("–î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ QR-–∫–æ–¥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ - –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
            return None
        
        try:
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –≤–Ω—É—Ç—Ä–∏ —Ñ—É–Ω–∫—Ü–∏–∏
            import numpy as np
            import cv2
            from pyzbar.pyzbar import decode as qr_decode
            
            # –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å data:image/png;base64,
            if 'base64,' in base64_data:
                base64_data = base64_data.split('base64,')[1]
            
            # –î–µ–∫–æ–¥–∏—Ä—É–µ–º base64
            img_data = base64.b64decode(base64_data)
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ numpy array
            nparr = np.frombuffer(img_data, np.uint8)
            img = cv2.imdecode(nparr, cv2.IMREAD_COLOR)
            
            if img is None:
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
                return None
            
            # –î–µ–∫–æ–¥–∏—Ä—É–µ–º QR-–∫–æ–¥
            decoded_objects = qr_decode(img)
            
            if decoded_objects:
                qr_data = decoded_objects[0].data.decode('utf-8')
                logger.info(f"‚úÖ QR-–∫–æ–¥ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω: {qr_data[:100]}...")
                return qr_data
            else:
                logger.warning("QR-–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏")
                return None
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–∏ QR-–∫–æ–¥–∞: {e}")
            return None
    
    def _take_screenshot(self, name: str) -> str:
        """
        –°–¥–µ–ª–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç.
        
        Args:
            name: –ò–º—è —Ñ–∞–π–ª–∞
            
        Returns:
            –ü—É—Ç—å –∫ —Å–∫—Ä–∏–Ω—à–æ—Ç—É
        """
        try:
            timestamp = int(time.time())
            filename = f"{Config.SCREENSHOTS_DIR}/{name}_{timestamp}.png"
            # –£–º–µ–Ω—å—à–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–æ 10 —Å–µ–∫—É–Ω–¥
            self.page.screenshot(path=filename, full_page=True, timeout=10000)
            logger.info(f"–°–∫—Ä–∏–Ω—à–æ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filename}")
            return filename
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ '{name}': {e}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –ø—É—Ç—å, –Ω–æ –Ω–µ –ª–æ–º–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
            return ""
    
    def open_login_page(self) -> bool:
        """
        –û—Ç–∫—Ä—ã—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞ (–µ—Å–ª–∏ –µ—â—ë –Ω–µ –Ω–∞ Ozon).
        
        Returns:
            True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            current_url = self.page.url
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –º—ã —É–∂–µ –Ω–∞ ozon.ru
            if 'ozon.ru' in current_url:
                logger.info(f"üìç –£–∂–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ Ozon: {current_url}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–µ—Ö–æ–¥")
                # –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
                screenshot = self._take_screenshot('already_on_ozon')
                sync_send_photo(screenshot, f"–£–∂–µ –Ω–∞ Ozon\nURL: {current_url}")
                return True
            
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞ Ozon - –ø–µ—Ä–µ—Ö–æ–¥–∏–º
            logger.info("–û—Ç–∫—Ä—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É Ozon")
            self.page.goto(Config.OZON_LOGIN_URL, timeout=Config.NAVIGATION_TIMEOUT)
            
            # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            self.page.wait_for_load_state('networkidle', timeout=Config.DEFAULT_TIMEOUT)
            StealthHelper.human_delay(3, 6)  # –£–≤–µ–ª–∏—á–µ–Ω–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ - –∏–º–∏—Ç–∞—Ü–∏—è —á–µ–ª–æ–≤–µ–∫–∞
            
            # –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∑–∞–≥—Ä—É–∑–∏–ª–æ—Å—å
            current_url = self.page.url
            page_title = self.page.title()
            page_content = self.page.content()[:500]  # –ü–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤
            
            logger.info(f"üìç –¢–µ–∫—É—â–∏–π URL: {current_url}")
            logger.info(f"üìÑ –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {page_title}")
            #logger.info(f"üìù –ù–∞—á–∞–ª–æ HTML: {page_content}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø—Ä–∏–∑–Ω–∞–∫–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
            if "–¥–æ—Å—Ç—É–ø" in page_title.lower():
                logger.error("‚ùå –î–û–°–¢–£–ü –ó–ê–ü–†–ï–©–ï–ù!")
      

            # –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
            screenshot = self._take_screenshot('main_page_diagnostic')
            sync_send_photo(screenshot, f"–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏\nURL: {current_url}\nTitle: {page_title}")
            
            return True
            
        except PlaywrightTimeout as e:
            logger.error(f"–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {e}")
            return False
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {e}")
            return False
    
    def click_login_button(self) -> bool:
        """
        –ù–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É –≤—Ö–æ–¥–∞.
        
        Returns:
            True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            logger.info("–ò—â–µ–º –∫–Ω–æ–ø–∫—É –≤—Ö–æ–¥–∞")

            # –ó–∞—â–∏—Ç–∞: –µ—Å–ª–∏ —É–∂–µ –∫–ª–∏–∫–∞–ª–∏ —Ä–∞–Ω—å—à–µ, –Ω–µ –¥–µ–ª–∞–µ–º —ç—Ç–æ —Å–Ω–æ–≤–∞
            if getattr(self, '_login_clicked', False):
                logger.info("–ö–Ω–æ–ø–∫–∞ –≤—Ö–æ–¥–∞ —É–∂–µ –±—ã–ª–∞ –Ω–∞–∂–∞—Ç–∞ —Ä–∞–Ω–µ–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –∫–ª–∏–∫")
                return True
            
            # –í–æ–∑–º–æ–∂–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –∫–Ω–æ–ø–∫–∏ –≤—Ö–æ–¥–∞
            # –í–ê–ñ–ù–û: –ö–ª–∏–∫–∞–µ–º –Ω–∞ –ö–û–ù–¢–ï–ô–ù–ï–† —Å data-widget, –∞ –Ω–µ –Ω–∞ –≤–ª–æ–∂–µ–Ω–Ω—ã–π span!
            selectors = [
                'div[data-widget="profileMenuAnonymous"]',  # –ü–†–ê–í–ò–õ–¨–ù–´–ô —Å–µ–ª–µ–∫—Ç–æ—Ä - –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
                '[data-widget="profileMenuAnonymous"]',  # –ë–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è —Ç–µ–≥–∞
                'div[tabindex="0"]:has-text("–í–æ–π—Ç–∏")',  # –ö–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–π div —Å —Ç–µ–∫—Å—Ç–æ–º –í–æ–π—Ç–∏
                'div.vq8_36',  # –ü–æ –∫–ª–∞—Å—Å—É –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
                'text="–í–æ–π—Ç–∏"',  # –ó–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
                'a:has-text("–í–æ–π—Ç–∏")',  # –°—Å—ã–ª–∫–∞ (–Ω–∞ —Å–ª—É—á–∞–π –¥—Ä—É–≥–æ–≥–æ –¥–∏–∑–∞–π–Ω–∞)
            ]
            
            logger.info(f"–ü—Ä–æ–±—É–µ–º {len(selectors)} —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –≤—Ö–æ–¥–∞")
            
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –∏ –ø—Ä–æ–±—É–µ–º –≤—Å–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
            for idx, selector in enumerate(selectors, 1):
                try:
                    logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ {idx}/{len(selectors)}: {selector}")
                    element = self.page.wait_for_selector(selector, timeout=8000, state='visible')
                    if element and element.is_visible():
                        logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ –≤—Ö–æ–¥–∞: {selector}")
                        
                        # –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–µ—Ä–µ–¥ –∫–ª–∏–∫–æ–º
                        screenshot = self._take_screenshot('before_login_click')
                        if screenshot:
                            pass  # sync_send_photo(screenshot, f"–ù–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ –≤—Ö–æ–¥–∞: {selector}")
                        
                        # –ó–∞—â–∏—Ç–∞: –ø–æ–º–µ—Ç–∏–º —á—Ç–æ –∫–ª–∏–∫ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω
                        self._login_clicked = True
                        
                        # –ü—Ä–æ—Å—Ç–æ–π –∫–ª–∏–∫
                        element.click()
                        logger.info(f"‚úÖ –ö–ª–∏–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω: {selector}")

                        # –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è iframe –∏–ª–∏ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
                        time.sleep(3)

                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º iframe
                        iframes = self.page.frames
                        logger.info(f"–ü–æ—Å–ª–µ –∫–ª–∏–∫–∞ –Ω–∞–π–¥–µ–Ω–æ {len(iframes)} —Ñ—Ä–µ–π–º–æ–≤")

                        # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
                        try:
                            # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ–ª–µ –≤–≤–æ–¥–∞ (—Ç–µ–ª–µ—Ñ–æ–Ω –∏–ª–∏ email) –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
                            self.page.wait_for_selector('input[type="tel"]', timeout=5000, state='visible')
                            logger.info("‚úÖ –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ, –Ω–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ –≤–≤–æ–¥–∞")
                        except Exception:
                            logger.warning("–ü–æ–ª–µ –≤–≤–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Å—Ä–∞–∑—É –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ, –≤–æ–∑–º–æ–∂–Ω–æ –≤ iframe –∏–ª–∏ –Ω—É–∂–Ω–æ —É–≤–µ–ª–∏—á–∏—Ç—å –æ–∫–Ω–æ")
 
                        return True
                except PlaywrightTimeout:
                    logger.warning(f"‚è±Ô∏è –¢–∞–π–º–∞—É—Ç –¥–ª—è —Å–µ–ª–µ–∫—Ç–æ—Ä–∞ {idx}/{len(selectors)}: {selector}")
                    continue
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞ {idx}/{len(selectors)} ({selector}): {e}")
                    continue
            
            # –ï—Å–ª–∏ –Ω–∏ –æ–¥–∏–Ω —Å–µ–ª–µ–∫—Ç–æ—Ä –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª - –¥–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –∏ –ª–æ–≥–∏—Ä—É–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã
            logger.error("‚ùå –ö–Ω–æ–ø–∫–∞ –≤—Ö–æ–¥–∞ –ù–ï –ù–ê–ô–î–ï–ù–ê –Ω–∏ –æ–¥–Ω–∏–º —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º!")
            screenshot = self._take_screenshot('login_button_not_found')
            
            # –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å —Ç–µ–∫—Å—Ç–æ–º "–í–æ–π—Ç–∏"
            try:
                logger.info("–ò—â–µ–º –í–°–ï —ç–ª–µ–º–µ–Ω—Ç—ã —Å —Ç–µ–∫—Å—Ç–æ–º '–í–æ–π—Ç–∏' –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ:")
                all_login_elements = self.page.query_selector_all('*')
                found_count = 0
                for elem in all_login_elements:
                    try:
                        text = elem.inner_text() if elem.inner_text() else ""
                        if '–≤–æ–π—Ç–∏' in text.lower() and len(text) < 50:
                            tag = elem.evaluate("el => el.tagName")
                            classes = elem.get_attribute('class') or 'no-class'
                            logger.info(f"  –ù–∞–π–¥–µ–Ω: <{tag} class='{classes[:80]}'>: '{text}'")
                            found_count += 1
                            if found_count >= 10:
                                break
                    except:
                        pass
                logger.info(f"–í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å '–í–æ–π—Ç–∏': {found_count}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {e}")
            
            if screenshot:
                sync_send_photo(screenshot, "‚ùå –ö–Ω–æ–ø–∫–∞ –≤—Ö–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
            
            logger.warning("–ö–Ω–æ–ø–∫–∞ –≤—Ö–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
            
            
            response = sync_wait_for_input("–ù–∞–∂–º–∏—Ç–µ '–í–æ–π—Ç–∏' –≤—Ä—É—á–Ω—É—é (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ) –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", timeout=60)
            if response:
                time.sleep(2)
                return True
            
            return True  # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ –≤—Ö–æ–¥–∞: {e}")
            # –ü—Ä–æ–±—É–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –º–æ–∂–µ—Ç —É–∂–µ –Ω–∞ —Ñ–æ—Ä–º–µ –≤—Ö–æ–¥–∞
            return True
    
    def click_email_login_button(self) -> bool:
        """
        –ù–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É "–í–æ–π—Ç–∏ –ø–æ –ø–æ—á—Ç–µ" –≤–Ω—É—Ç—Ä–∏ iframe.
        
        Returns:
            True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            logger.info("–ò—â–µ–º –∫–Ω–æ–ø–∫—É '–í–æ–π—Ç–∏ –ø–æ –ø–æ—á—Ç–µ' –≤ iframe")
            
            # –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
            time.sleep(3)
            
            # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞ –û–°–ù–û–í–ù–û–ô —Å—Ç—Ä–∞–Ω–∏—Ü–µ (–º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –ë–ï–ó iframe)
            logger.info("–ò—â–µ–º –∫–Ω–æ–ø–∫—É '–í–æ–π—Ç–∏ –ø–æ –ø–æ—á—Ç–µ' –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ")
            
            # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∫–Ω–æ–ø–∫—É –ø—Ä—è–º–æ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
            page_selectors = [
                'button:has-text("–í–æ–π—Ç–∏ –ø–æ –ø–æ—á—Ç–µ")',
                'text="–í–æ–π—Ç–∏ –ø–æ –ø–æ—á—Ç–µ"',
            ]
            
            for selector in page_selectors:
                try:
                    element = self.page.wait_for_selector(selector, timeout=2000, state='visible')
                    if element and element.is_visible():
                        text = element.inner_text().strip()
                        if len(text) < 50 and '–í–æ–π—Ç–∏ –ø–æ –ø–æ—á—Ç–µ' in text:
                            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ: {selector}")
                            # –ü–æ–ø—ã—Ç–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∫–ª–∏–∫–∞: –ø—Ä–∏–≤–µ—Å—Ç–∏ –≤ —Ñ–æ–∫—É—Å, —Å–∫—Ä–æ–ª–ª, –∫–ª–∏–∫ —Å —Ä–µ–∑–µ—Ä–≤–Ω—ã–º —Ñ–æ—Ä—Å–æ–º
                            try:
                                try:
                                    self.page.bring_to_front()
                                except Exception:
                                    pass
                                try:
                                    element.scroll_into_view_if_needed()
                                except Exception:
                                    pass
                                try:
                                    element.click(timeout=3000)
                                except Exception:
                                    element.click(force=True, timeout=3000)
                            except Exception as e_click_main:
                                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ: {e_click_main}")
                            logger.info(f"‚úÖ –ö–õ–ò–ö –í–´–ü–û–õ–ù–ï–ù –ø–æ —ç–ª–µ–º–µ–Ω—Ç—É –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ")
                            time.sleep(3)
                            screenshot = self._take_screenshot('email_login_selected')
                            if screenshot:
                                sync_send_photo(screenshot, "‚úÖ –í—ã–±—Ä–∞–Ω –≤—Ö–æ–¥ –ø–æ –ø–æ—á—Ç–µ")
                            return True
                except:
                    pass
            
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ - –∏—â–µ–º iframe (—Ç–æ–ª—å–∫–æ ozonid-lite)
            logger.info("–ö–Ω–æ–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ, –∏—â–µ–º iframe –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
            auth_frame = None
            for frame in self.page.frames:
                frame_url = frame.url
                logger.info(f"–ü—Ä–æ–≤–µ—Ä—è–µ–º frame: {frame_url}")
                
                # –í–ê–ñ–ù–û: –∏—â–µ–º –¢–û–õ–¨–ö–û —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π iframe –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (ozonid-lite)
                if 'ozonid-lite' in frame_url or 'authFrame' in frame.name:
                    logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω iframe –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {frame_url}")
                    auth_frame = frame
                    break
            
            # –ï—Å–ª–∏ iframe –Ω–µ –Ω–∞–π–¥–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
            if not auth_frame:
                logger.warning("–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π iframe –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É")
                auth_frame = self.page.main_frame
            
            # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏
            time.sleep(2)
            
            # –ò—â–µ–º –∫–Ω–æ–ø–∫—É "–í–æ–π—Ç–∏ –ø–æ –ø–æ—á—Ç–µ" - —ç—Ç–æ BUTTON —Å –≤–ª–æ–∂–µ–Ω–Ω—ã–º div!
            # –°—Ç—Ä—É–∫—Ç—É—Ä–∞: <button><div class="...tsBodyControl500Medium">–í–æ–π—Ç–∏ –ø–æ –ø–æ—á—Ç–µ</div></button>
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¢–û–õ–¨–ö–û —Å—Ç–∞–±–∏–ª—å–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã (–±–µ–∑ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –∫–ª–∞—Å—Å–æ–≤)
            selectors = [
                'button:has-text("–í–æ–π—Ç–∏ –ø–æ –ø–æ—á—Ç–µ")',  # –ö–ù–û–ü–ö–ê —Å —Ç–µ–∫—Å—Ç–æ–º –≤–Ω—É—Ç—Ä–∏
                'button >> text="–í–æ–π—Ç–∏ –ø–æ –ø–æ—á—Ç–µ"',  # –ö–Ω–æ–ø–∫–∞ —Å–æ–¥–µ—Ä–∂–∞—â–∞—è —Ç–µ–∫—Å—Ç
                'text="–í–æ–π—Ç–∏ –ø–æ –ø–æ—á—Ç–µ"',  # –õ—é–±–æ–π —ç–ª–µ–º–µ–Ω—Ç —Å —Ç–æ—á–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
                '[class*="tsBodyControl"]:has-text("–í–æ–π—Ç–∏ –ø–æ –ø–æ—á—Ç–µ")',  # div –≤–Ω—É—Ç—Ä–∏ –∫–Ω–æ–ø–∫–∏
            ]
            
            # –¢–∞–∫–∂–µ –ø–æ–ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ XPath
            xpath_selectors = [
                '//button[contains(., "–í–æ–π—Ç–∏ –ø–æ –ø–æ—á—Ç–µ")]',  # –ö–Ω–æ–ø–∫–∞ —Å–æ–¥–µ—Ä–∂–∞—â–∞—è —Ç–µ–∫—Å—Ç
                '//button//div[normalize-space(text())="–í–æ–π—Ç–∏ –ø–æ –ø–æ—á—Ç–µ"]',  # div –≤–Ω—É—Ç—Ä–∏ button
                '//*[normalize-space(text())="–í–æ–π—Ç–∏ –ø–æ –ø–æ—á—Ç–µ"]',  # –õ—é–±–æ–π —ç–ª–µ–º–µ–Ω—Ç
            ]
            
            # –ü—Ä–æ–±—É–µ–º CSS —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
            for selector in selectors:
                try:
                    element = auth_frame.wait_for_selector(selector, timeout=3000, state='visible')
                    if element:
                        logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ '–í–æ–π—Ç–∏ –ø–æ –ø–æ—á—Ç–µ' –≤ iframe: {selector}")
                        
                        # –õ–æ–≥–∏—Ä—É–µ–º —ç–ª–µ–º–µ–Ω—Ç –ø–µ—Ä–µ–¥ –∫–ª–∏–∫–æ–º
                        try:
                            text = element.inner_text().strip()
                            logger.info(f"–¢–µ–∫—Å—Ç —ç–ª–µ–º–µ–Ω—Ç–∞ (–æ–±—Ä–µ–∑–∞–Ω–Ω—ã–π): '{text[:100]}'")
                            
                            # –ü–†–û–í–ï–†–ö–ê: –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π - —ç—Ç–æ –ù–ï –∫–Ω–æ–ø–∫–∞!
                            if len(text) > 50:
                                logger.warning(f"‚ö†Ô∏è –≠–ª–µ–º–µ–Ω—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ ({len(text)} —Å–∏–º–≤–æ–ª–æ–≤) - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                                continue
                        except:
                            pass
                        
                        # –ö–ª–∏–∫–∞–µ–º (–ø–æ–ø—ã—Ç–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∫–ª–∏–∫–∞)
                        try:
                            try:
                                # –ü–æ–ø—ã—Ç–∫–∞ —Ñ–æ–∫—É—Å–∞ —Ñ—Ä–µ–π–º–∞
                                try:
                                    self.page.bring_to_front()
                                except Exception:
                                    pass
                                element.scroll_into_view_if_needed()
                            except Exception:
                                pass

                            try:
                                element.click(timeout=3000)
                            except Exception:
                                element.click(force=True, timeout=3000)
                        except Exception as e_if_click:
                            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–ª–∏–∫–µ –≤ iframe: {e_if_click}")
                        logger.info(f"‚úÖ –ö–õ–ò–ö –í–´–ü–û–õ–ù–ï–ù –ø–æ —ç–ª–µ–º–µ–Ω—Ç—É: {selector}")
                        time.sleep(3)
                        
                        screenshot = self._take_screenshot('email_login_selected')
                        sync_send_photo(screenshot, "‚úÖ –í—ã–±—Ä–∞–Ω –≤—Ö–æ–¥ –ø–æ –ø–æ—á—Ç–µ (–∫–Ω–æ–ø–∫–∞ –Ω–∞–∂–∞—Ç–∞)")
                        return True
                except PlaywrightTimeout:
                    logger.debug(f"–¢–∞–π–º–∞—É—Ç –¥–ª—è —Å–µ–ª–µ–∫—Ç–æ—Ä–∞ {selector}")
                    continue
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞ {selector} –≤ iframe: {e}")
                    continue
            
            # –ü—Ä–æ–±—É–µ–º XPath —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
            for xpath in xpath_selectors:
                try:
                    element = auth_frame.wait_for_selector(f'xpath={xpath}', timeout=3000, state='visible')
                    if element:
                        logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ '–í–æ–π—Ç–∏ –ø–æ –ø–æ—á—Ç–µ' —á–µ—Ä–µ–∑ XPath")
                        
                        try:
                            text = element.inner_text().strip()
                            logger.info(f"–¢–µ–∫—Å—Ç —ç–ª–µ–º–µ–Ω—Ç–∞: '{text}'")
                        except:
                            pass
                        
                        # –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –∫–ª–∏–∫ –ø–æ XPath-—ç–ª–µ–º–µ–Ω—Ç—É
                        try:
                            try:
                                self.page.bring_to_front()
                            except Exception:
                                pass
                            try:
                                element.scroll_into_view_if_needed()
                            except Exception:
                                pass
                            try:
                                element.click(timeout=3000)
                            except Exception:
                                element.click(force=True, timeout=3000)
                        except Exception as e_xp_click:
                            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–ª–∏–∫–µ –ø–æ XPath: {e_xp_click}")
                        logger.info(f"‚úÖ –ö–õ–ò–ö –í–´–ü–û–õ–ù–ï–ù –ø–æ XPath: {xpath}")
                        time.sleep(3)
                        
                        screenshot = self._take_screenshot('email_login_selected')
                        sync_send_photo(screenshot, "‚úÖ –í—ã–±—Ä–∞–Ω –≤—Ö–æ–¥ –ø–æ –ø–æ—á—Ç–µ (XPath)")
                        return True
                except PlaywrightTimeout:
                    logger.debug(f"–¢–∞–π–º–∞—É—Ç –¥–ª—è XPath {xpath}")
                    continue
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ XPath {xpath}: {e}")
                    continue
            
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ - –ª–æ–≥–∏—Ä—É–µ–º –≤—Å–µ div –≤ iframe
            logger.warning("‚ùå –ö–Ω–æ–ø–∫–∞ '–í–æ–π—Ç–∏ –ø–æ –ø–æ—á—Ç–µ' –ù–ï –ù–ê–ô–î–ï–ù–ê –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤ iframe")
            
            try:
                # –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å —Ç–µ–∫—Å—Ç–æ–º
                all_elements_with_text = auth_frame.query_selector_all('div, button, a, span')
                logger.info(f"–í—Å–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å –≤–æ–∑–º–æ–∂–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º –≤ iframe: {len(all_elements_with_text)}")
                
                elements_logged = 0
                for idx, elem in enumerate(all_elements_with_text):
                    try:
                        text = elem.inner_text().strip() if elem.inner_text() else ""
                        if text and len(text) < 100 and len(text) > 0:
                            tag = elem.evaluate("el => el.tagName")
                            class_attr = elem.get_attribute('class') or ''
                            logger.info(f"[{idx}] <{tag} class='{class_attr[:50]}'>: '{text}'")
                            elements_logged += 1
                            if elements_logged >= 30:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ª–æ–≥–∏
                                break
                    except:
                        pass
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {e}")
            
            screenshot = self._take_screenshot('no_email_button_iframe')
            sync_send_photo(screenshot, "‚ùì –ö–Ω–æ–ø–∫–∞ –≤ iframe –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            
            # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            sync_send_message("‚ö†Ô∏è –ù–µ –Ω–∞—à–µ–ª –∫–Ω–æ–ø–∫—É '–í–æ–π—Ç–∏ –ø–æ –ø–æ—á—Ç–µ' –≤ iframe.\n\n"
                            "–ï—Å–ª–∏ –≤–∏–¥–∏—Ç–µ –µ—ë - –Ω–∞–∂–º–∏—Ç–µ –í–†–£–ß–ù–£–Æ.\n\n"
                            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è.")
            
            response = sync_wait_for_input("–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –≤—Ä—É—á–Ω—É—é –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", timeout=90)
            
            if response:
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª: {response}, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º")
                time.sleep(2)
                screenshot = self._take_screenshot('after_manual_selection')
                sync_send_photo(screenshot, "–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º")
                return True
            
            return False
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –≤—Ö–æ–¥–∞ –ø–æ –ø–æ—á—Ç–µ: {e}")
            return False
    
    def login_by_phone_with_qr(self) -> bool:
        """
        –í—Ö–æ–¥ —á–µ—Ä–µ–∑ —Ç–µ–ª–µ—Ñ–æ–Ω —Å QR-–∫–æ–¥–æ–º (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ –ø—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞).
        
        Returns:
            True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            logger.info("–ù–∞—á–∏–Ω–∞–µ–º –≤—Ö–æ–¥ —á–µ—Ä–µ–∑ —Ç–µ–ª–µ—Ñ–æ–Ω —Å QR-–∫–æ–¥–æ–º")
            sync_send_message("üì± –ù–∞—á–∏–Ω–∞–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –≤—Ö–æ–¥ —á–µ—Ä–µ–∑ —Ç–µ–ª–µ—Ñ–æ–Ω —Å QR-–∫–æ–¥–æ–º")
            
            # –ò—â–µ–º iframe —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π
            auth_frame = None
            for frame in self.page.frames:
                frame_url = frame.url
                if 'ozonid-lite' in frame_url or 'authFrame' in frame.name:
                    logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º iframe –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {frame_url}")
                    auth_frame = frame
                    break
            
            if not auth_frame:
                logger.error("Iframe –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
            
            time.sleep(2)
            
            # –®–∞–≥ 1: –ù–∞–∂–∞—Ç—å –Ω–∞ –≤—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫ –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–∞–Ω—ã
            logger.info("–ò—â–µ–º –≤—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫ –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–∞–Ω—ã")
            country_selectors = [
                'div.d45_3_8-a.e35_3_8-a0[role="listbox"]',
                'div[role="listbox"]',
                '.d45_3_8-a',
            ]
            
            country_dropdown = None
            for selector in country_selectors:
                try:
                    country_dropdown = auth_frame.wait_for_selector(selector, timeout=3000, state='visible')
                    if country_dropdown:
                        logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω –≤—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫: {selector}")
                        country_dropdown.click()
                        time.sleep(1)
                        break
                except:
                    continue
            
            if not country_dropdown:
                logger.warning("–í—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–º–æ–∂–Ω–æ —É–∂–µ –æ—Ç–∫—Ä—ã—Ç")
            
            # –®–∞–≥ 2: –í—ã–±—Ä–∞—Ç—å "–†–æ—Å—Å–∏—è" (–ø–µ—Ä–≤–∞—è –æ–ø—Ü–∏—è)
            logger.info("–í—ã–±–∏—Ä–∞–µ–º '–†–æ—Å—Å–∏—è' –∏–∑ —Å–ø–∏—Å–∫–∞")
            russia_selectors = [
                'div[role="option"][title="–†–æ—Å—Å–∏—è"]',
                'div.a95_3_7-a7.a95_3_7-b.a95_3_7-a8[role="option"]',
                'div[role="option"]:has-text("–†–æ—Å—Å–∏—è")',
            ]
            
            for selector in russia_selectors:
                try:
                    russia_option = auth_frame.wait_for_selector(selector, timeout=3000, state='visible')
                    if russia_option:
                        logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ –æ–ø—Ü–∏—è '–†–æ—Å—Å–∏—è': {selector}")
                        russia_option.click()
                        time.sleep(1)
                        break
                except:
                    continue
            
            # –®–∞–≥ 3: –í–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
            phone = Config.OZON_PHONE
            logger.info(f"–í–≤–æ–¥–∏–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone}")
            
            phone_selectors = [
                'input[type="tel"][name="autocomplete"]',
                'input.d5_3_7-a.d5_3_7-a3',
                'input[type="tel"]',
            ]
            
            phone_input = None
            for selector in phone_selectors:
                try:
                    phone_input = auth_frame.wait_for_selector(selector, timeout=3000, state='visible')
                    if phone_input:
                        logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {selector}")
                        
                        # –û—á–∏—â–∞–µ–º –∏ –≤–≤–æ–¥–∏–º —Ç–µ–ª–µ—Ñ–æ–Ω
                        phone_input.click()
                        time.sleep(0.5)
                        phone_input.fill('')
                        time.sleep(0.3)
                        
                        # –í–≤–æ–¥–∏–º –ø–æ—Å–∏–º–≤–æ–ª—å–Ω–æ
                        for char in phone:
                            phone_input.type(char, delay=50)
                        
                        logger.info(f"‚úÖ –¢–µ–ª–µ—Ñ–æ–Ω –≤–≤–µ–¥–µ–Ω: {phone}")
                        time.sleep(2)
                        break
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —á–µ—Ä–µ–∑ {selector}: {e}")
                    continue
            
            if not phone_input:
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
                return False
            
            # –®–∞–≥ 4: –î–æ–∂–¥–∞—Ç—å—Å—è –ø–æ—è–≤–ª–µ–Ω–∏—è QR-–∫–æ–¥–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ Telegram
            logger.info("–ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è QR-–∫–æ–¥–∞")
            time.sleep(3)
            
            # –ò—â–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å QR-–∫–æ–¥–æ–º
            qr_selectors = [
                'img.b95_3_3-a',
                'img[src^="data:image/png;base64"]',
                'img[loading="lazy"]',
            ]
            
            qr_image = None
            for selector in qr_selectors:
                try:
                    qr_image = auth_frame.wait_for_selector(selector, timeout=5000, state='visible')
                    if qr_image:
                        logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω QR-–∫–æ–¥: {selector}")
                        break
                except:
                    continue
            
            # –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç —Å QR-–∫–æ–¥–æ–º
            screenshot = self._take_screenshot('qr_code_login')
            
            if qr_image:
                try:
                    # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å base64 –¥–∞–Ω–Ω—ã–µ QR-–∫–æ–¥–∞
                    qr_src = qr_image.get_attribute('src')
                    if qr_src and qr_src.startswith('data:image/png;base64,'):
                        logger.info("QR-–∫–æ–¥ –Ω–∞–π–¥–µ–Ω –≤ base64 —Ñ–æ—Ä–º–∞—Ç–µ")
                        
                        # –ü—ã—Ç–∞–µ–º—Å—è –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å QR-–∫–æ–¥
                        qr_url = self._decode_qr_from_base64(qr_src)
                        
                        if qr_url:
                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏ —Å–∫—Ä–∏–Ω—à–æ—Ç, –∏ —Å—Å—ã–ª–∫—É
                            message = (
                                "üì± QR-–∫–æ–¥ –¥–ª—è –≤—Ö–æ–¥–∞\n\n"
                                f"üîó –°—Å—ã–ª–∫–∞ –∏–∑ QR-–∫–æ–¥–∞:\n<code>{qr_url}</code>\n\n"
                                "–û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR-–∫–æ–¥ —á–µ—Ä–µ–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Ozon –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–µ:\n"
                                "1. –û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Ozon\n"
                                "2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –ø—Ä–æ—Ñ–∏–ª—å\n"
                                "3. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∏–∫–æ–Ω–∫—É —Å–∫–∞–Ω–µ—Ä–∞\n"
                                "4. –û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR-–∫–æ–¥ –Ω–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–µ\n\n"
                                "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ —Å—Å—ã–ª–∫—É –≤—ã—à–µ (–µ—Å–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è)\n\n"
                                "–ü–æ—Å–ª–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤—å—Ç–µ 'OK' –≤ Telegram."
                            )
                            sync_send_photo(screenshot, message)
                        else:
                            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                            sync_send_photo(screenshot, 
                                          "üì± QR-–∫–æ–¥ –¥–ª—è –≤—Ö–æ–¥–∞\n\n"
                                          "–û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ –µ–≥–æ —á–µ—Ä–µ–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Ozon –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–µ:\n"
                                          "1. –û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Ozon\n"
                                          "2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –ø—Ä–æ—Ñ–∏–ª—å\n"
                                          "3. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∏–∫–æ–Ω–∫—É —Å–∫–∞–Ω–µ—Ä–∞\n"
                                          "4. –û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR-–∫–æ–¥\n\n"
                                          "–ü–æ—Å–ª–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤—å—Ç–µ 'OK' –≤ Telegram.")
                    else:
                        sync_send_photo(screenshot, "üì± QR-–∫–æ–¥ –¥–ª—è –≤—Ö–æ–¥–∞ (–æ—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ —á–µ—Ä–µ–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Ozon)")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ QR-–∫–æ–¥–∞: {e}")
                    sync_send_photo(screenshot, "üì± QR-–∫–æ–¥ –¥–ª—è –≤—Ö–æ–¥–∞")
            else:
                sync_send_photo(screenshot, "üì± –≠–∫—Ä–∞–Ω –≤—Ö–æ–¥–∞ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É")
            
            # –ñ–¥–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            response = sync_wait_for_input(
                "–û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR-–∫–æ–¥ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ Ozon –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ 'OK' –∫–æ–≥–¥–∞ –∑–∞–≤–µ—Ä—à–∏—Ç–µ",
                timeout=180
            )
            
            if not response:
                logger.error("–¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è QR-–∫–æ–¥–∞")
                return False
            
            logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ QR-–∫–æ–¥–∞")
            time.sleep(3)
            
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ —á–µ—Ä–µ–∑ —Ç–µ–ª–µ—Ñ–æ–Ω —Å QR-–∫–æ–¥–æ–º: {e}")
            return False
    
    def check_rate_limit_error(self) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –µ—Å—Ç—å –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞ –ø–æ–ø—ã—Ç–æ–∫ –≤—Ö–æ–¥–∞.
        –¢–û–õ–¨–ö–û —è–≤–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –ª–∏–º–∏—Ç–∞.
        
        Returns:
            True –µ—Å–ª–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞
        """
        try:
            logger.info("–ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞")
            
            # –ò—â–µ–º iframe —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π
            auth_frame = None
            for frame in self.page.frames:
                frame_url = frame.url
                if 'ozonid-lite' in frame_url or 'authFrame' in frame.name:
                    auth_frame = frame
                    break
            
            if not auth_frame:
                auth_frame = self.page.main_frame
            
            # –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            screenshot = self._take_screenshot('checking_rate_limit')
            
            # –ò—â–µ–º –¢–û–õ–¨–ö–û —è–≤–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –ª–∏–º–∏—Ç–∞
            # –í–∞–∂–Ω–æ: –∏—â–µ–º –≤–∏–¥–∏–º—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å —Ç–æ—á–Ω—ã–º–∏ —Ñ—Ä–∞–∑–∞–º–∏
            strict_error_selectors = [
                'text=/–ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫/i',
                'text=/–ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–π –∫–æ–¥ –º–æ–∂–Ω–æ —á–µ—Ä–µ–∑/i',
                'text=/—Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫/i',
                'text=/too many attempts/i',
            ]
            
            for selector in strict_error_selectors:
                try:
                    error_element = auth_frame.wait_for_selector(selector, timeout=1000, state='visible')
                    if error_element and error_element.is_visible():
                        error_text = error_element.inner_text()
                        logger.warning(f"‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –í–ò–î–ò–ú–û–ï —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞: '{error_text[:100]}'")
                        
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
                        sync_send_photo(screenshot, f"‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞:\n{error_text[:200]}")
                        
                        return True
                except:
                    pass
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –∏—â–µ–º —Ç–µ–∫—Å—Ç —Å —Ç–∞–π–º–µ—Ä–æ–º –≤–∏–¥–∞ "11:15" –∏–ª–∏ "—á–µ—Ä–µ–∑ XX:XX"
            try:
                full_text = auth_frame.evaluate("document.body.innerText")
                if full_text:
                    # –ü–∞—Ç—Ç–µ—Ä–Ω: "–ü–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–π –∫–æ–¥ –º–æ–∂–Ω–æ —á–µ—Ä–µ–∑ 11:15" –∏–ª–∏ "–ü—Ä–µ–≤—ã—à–µ–Ω–æ"
                    timer_pattern = r'(–ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–π –∫–æ–¥ –º–æ–∂–Ω–æ —á–µ—Ä–µ–∑|–ø–æ–ø—ã—Ç–æ–∫ –≤–≤–æ–¥–∞).*\d{1,2}:\d{2}'
                    if re.search(timer_pattern, full_text, re.IGNORECASE):
                        logger.warning(f"‚ö†Ô∏è –ù–∞–π–¥–µ–Ω –ø–∞—Ç—Ç–µ—Ä–Ω —Ç–∞–π–º–µ—Ä–∞ –≤ —Ç–µ–∫—Å—Ç–µ")
                        
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
                        match = re.search(timer_pattern, full_text, re.IGNORECASE)
                        if match:
                            context = full_text[max(0, match.start()-50):match.end()+50]
                            logger.info(f"–ö–æ–Ω—Ç–µ–∫—Å—Ç: {context}")
                            sync_send_photo(screenshot, f"‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω —Ç–∞–π–º–µ—Ä:\n{context}")
                            return True
            except Exception as e:
                logger.debug(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–∞–π–º–µ—Ä–∞: {e}")
            
            logger.info("‚úÖ –ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")
            return False
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ª–∏–º–∏—Ç–∞: {e}")
            return False
    
    def enter_email(self, email: Optional[str] = None) -> bool:
        """
        –í–≤–µ—Å—Ç–∏ email –≤ iframe –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.
        
        Args:
            email: Email –∞–¥—Ä–µ—Å (–µ—Å–ª–∏ None, –±–µ—Ä–µ—Ç—Å—è –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞)
            
        Returns:
            True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            email = email or Config.OZON_EMAIL
            logger.info(f"–í–≤–æ–¥–∏–º email: {email}")
            
            # –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            screenshot = self._take_screenshot('before_email_input')
            sync_send_photo(screenshot, "–ò—â–µ–º –ø–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ email")
            
            # –ò—â–µ–º iframe —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π
            auth_frame = None
            for frame in self.page.frames:
                frame_url = frame.url
                if 'ozonid-lite' in frame_url or 'authFrame' in frame.name:
                    logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º iframe –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {frame_url}")
                    auth_frame = frame
                    break
            
            if not auth_frame:
                logger.warning("Iframe –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É")
                auth_frame = self.page.main_frame
            
            # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ä–º—ã
            time.sleep(2)
            
            # –°–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –ø–æ–ª—è –≤–≤–æ–¥–∞
            selectors = [
                'input[type="email"]',
                'input[type="text"]',
                'input[type="tel"]',
                'input[name="email"]',
                'input[name="username"]',
                'input[placeholder*="–ø–æ—á—Ç"]',
                'input[placeholder*="email"]',
                'input[placeholder*="—Ç–µ–ª–µ—Ñ–æ–Ω"]',
                'input',  # –õ—é–±–æ–π input
            ]
            
            # –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ input –≤ iframe
            try:
                all_inputs = auth_frame.query_selector_all('input')
                logger.info(f"–ù–∞–π–¥–µ–Ω–æ input –ø–æ–ª–µ–π –≤ iframe: {len(all_inputs)}")
                
                for idx, inp in enumerate(all_inputs):
                    try:
                        if inp.is_visible():
                            inp_type = inp.get_attribute('type')
                            inp_placeholder = inp.get_attribute('placeholder')
                            inp_name = inp.get_attribute('name')
                            logger.info(f"Input #{idx}: type={inp_type}, name={inp_name}, placeholder={inp_placeholder}")
                    except:
                        pass
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–∏ input: {e}")
            
            # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –ø–æ–ª–µ
            for selector in selectors:
                try:
                    email_input = auth_frame.wait_for_selector(selector, timeout=2000, state='visible')
                    if email_input and email_input.is_visible():
                        logger.info(f"–ù–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ email –≤ iframe: {selector}")
                        
                        # –ö–ª–∏–∫–∞–µ–º –∏ –æ—á–∏—â–∞–µ–º
                        email_input.click()
                        time.sleep(0.5)
                        
                        # –û—á–∏—â–∞–µ–º –ø–æ–ª–µ (–Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ —Ç–∞–º —É–∂–µ —á—Ç–æ-—Ç–æ –µ—Å—Ç—å)
                        email_input.fill('')
                        time.sleep(0.3)
                        
                        # –í–≤–æ–¥–∏–º email –ø–æ—Å–∏–º–≤–æ–ª—å–Ω–æ
                        for char in email:
                            email_input.type(char, delay=50)
                        
                        time.sleep(1)
                        
                        screenshot = self._take_screenshot('email_entered')
                        sync_send_photo(screenshot, f"‚úÖ Email –≤–≤–µ–¥–µ–Ω: {email}")
                        
                        # –ò—â–µ–º –∫–Ω–æ–ø–∫—É "–í–æ–π—Ç–∏" –∏–ª–∏ "–ü–æ–ª—É—á–∏—Ç—å –∫–æ–¥" –≤ iframe
                        submit_selectors = [
                            'button:has-text("–ü–æ–ª—É—á–∏—Ç—å –∫–æ–¥")',
                            'button:has-text("–í–æ–π—Ç–∏")',
                            'button:has-text("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å")',
                            'button[type="submit"]',
                            'div:has-text("–ü–æ–ª—É—á–∏—Ç—å –∫–æ–¥")',  # –ú–æ–∂–µ—Ç –±—ã—Ç—å div
                            'div:has-text("–í–æ–π—Ç–∏")',
                        ]
                        
                        for submit_selector in submit_selectors:
                            try:
                                submit_button = auth_frame.wait_for_selector(submit_selector, timeout=2000, state='visible')
                                if submit_button and submit_button.is_visible():
                                    logger.info(f"–ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É –≤ iframe: {submit_selector}")
                                    submit_button.click()
                                    time.sleep(3)
                                    return True
                            except PlaywrightTimeout:
                                continue
                            except Exception as e:
                                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ {submit_selector}: {e}")
                                continue
                        
                        # –ï—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–±—É–µ–º Enter
                        logger.info("–ö–Ω–æ–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–±—É–µ–º Enter")
                        email_input.press('Enter')
                        time.sleep(3)
                        return True
                        
                except PlaywrightTimeout:
                    continue
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞ {selector}: {e}")
                    continue
            
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ - –ø—Ä–æ—Å–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            logger.warning("–ü–æ–ª–µ email –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
            sync_send_message(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ email –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.\n\n"
                            f"–í–∞—à email: <code>{email}</code>\n\n"
                            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ email –í–†–£–ß–ù–£–Æ –≤ –æ—Ç–∫—Ä—ã—Ç–æ–º –æ–∫–Ω–µ –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É.\n\n"
                            "–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram.")
            
            response = sync_wait_for_input("–í–≤–µ–¥–∏—Ç–µ email –≤—Ä—É—á–Ω—É—é –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", timeout=120)
            
            if response:
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –≤–≤–æ–¥ email")
                time.sleep(2)
                screenshot = self._take_screenshot('email_manual')
                sync_send_photo(screenshot, "Email –≤–≤–µ–¥–µ–Ω –≤—Ä—É—á–Ω—É—é")
                return True
            
            return False
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ email: {e}")
            return False
    
    def handle_captcha(self) -> bool:
        """
        –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–∞–ø—á—É —Å –ø–æ–º–æ—â—å—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        
        Returns:
            True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            logger.info("–ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–∞–ø—á–∏")
            
            # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ, —á—Ç–æ–±—ã –∫–∞–ø—á–∞ –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å
            time.sleep(3)
            
            # –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞–ø—á–∏
            screenshot = self._take_screenshot('checking_captcha')
            
            # –í–æ–∑–º–æ–∂–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –∫–∞–ø—á–∏
            captcha_selectors = [
                'iframe[src*="captcha"]',
                'div[class*="captcha"]',
                'div[id*="captcha"]',
                '.recaptcha',
                '#captcha',
            ]
            
            has_captcha = False
            for selector in captcha_selectors:
                try:
                    element = self.page.query_selector(selector)
                    if element:
                        has_captcha = True
                        logger.info(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∫–∞–ø—á–∞: {selector}")
                        break
                except:
                    pass
            
            if has_captcha:
                sync_send_photo(screenshot, "ü§ñ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ CAPTCHA! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ä–µ—à–∏—Ç–µ –∫–∞–ø—á—É –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ.")
                
                # –ñ–¥–µ–º, –ø–æ–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–µ—à–∏—Ç –∫–∞–ø—á—É
                captcha_solution = sync_wait_for_input(
                    "–í–≤–µ–¥–∏—Ç–µ 'OK' –∫–æ–≥–¥–∞ —Ä–µ—à–∏—Ç–µ –∫–∞–ø—á—É",
                    timeout=180
                )
                
                if not captcha_solution:
                    logger.error("–¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è —Ä–µ—à–µ–Ω–∏—è –∫–∞–ø—á–∏")
                    return False
                
                time.sleep(2)
                screenshot = self._take_screenshot('after_captcha')
                sync_send_photo(screenshot, "–ö–∞–ø—á–∞ —Ä–µ—à–µ–Ω–∞, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º")
            
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–∞–ø—á–∏: {e}")
            return False
    
    def enter_sms_code(self) -> bool:
        """
        –ó–∞–ø—Ä–æ—Å–∏—Ç—å –∏ –≤–≤–µ—Å—Ç–∏ SMS –∫–æ–¥.
        
        Returns:
            True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            logger.info("–ñ–¥–µ–º –ø–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ SMS –∫–æ–¥–∞")
            
            # –ü–†–û–í–ï–†–ö–ê: –ú–æ–∂–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É–∂–µ –ø—Ä–æ—à–ª–∞?
            if self.verify_login():
                logger.success("‚úÖ –£–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã! SMS –∫–æ–¥ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.")
                return True
            
            # –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç
            time.sleep(2)
            screenshot = self._take_screenshot('sms_code_request')
            sync_send_photo(screenshot, "üì± –ó–∞–ø—Ä–æ—à–µ–Ω SMS –∫–æ–¥")
            
            # –ñ–¥–µ–º –∫–æ–¥ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            sms_code = sync_wait_for_input(
                "üì± –í–≤–µ–¥–∏—Ç–µ SMS –∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏—à–µ–ª –Ω–∞ –≤–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω:",
                timeout=180
            )
            
            if not sms_code:
                logger.error("–¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è SMS –∫–æ–¥–∞")
                return False
            
            logger.info(f"–ü–æ–ª—É—á–µ–Ω SMS –∫–æ–¥: {sms_code}")
            
            # –ò—â–µ–º iframe —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π
            auth_frame = None
            for frame in self.page.frames:
                frame_url = frame.url
                if 'ozonid-lite' in frame_url or 'authFrame' in frame.name:
                    logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º iframe –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è –≤–≤–æ–¥–∞ –∫–æ–¥–∞: {frame_url}")
                    auth_frame = frame
                    break
            
            if not auth_frame:
                logger.warning("Iframe –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É")
                auth_frame = self.page.main_frame
            
            # –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è —Ñ–æ—Ä–º—ã –≤–≤–æ–¥–∞ –∫–æ–¥–∞
            time.sleep(2)
            
            # –¢–û–ß–ù–´–ô —Å–µ–ª–µ–∫—Ç–æ—Ä –ø–æ–ª—è –∫–æ–¥–∞ –∏–∑ HTML
            code_selectors = [
                'input[name="otp"]',  # –û—Å–Ω–æ–≤–Ω–æ–π —Å–µ–ª–µ–∫—Ç–æ—Ä –∏–∑ HTML
                'input[type="number"][name="otp"]',
                'input[inputmode="numeric"][name="otp"]',
                'input.d5_3_7-a.d5_3_7-a5',  # –ü–æ –∫–ª–∞—Å—Å–∞–º
                'input[maxlength="6"][name="otp"]',
                'input[inputmode="numeric"]',  # –ó–∞–ø–∞—Å–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
                'input[type="number"]',
                'input[name="code"]',
            ]
            
            # –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ input –≤ iframe
            try:
                all_inputs = auth_frame.query_selector_all('input')
                logger.info(f"–ù–∞–π–¥–µ–Ω–æ input –ø–æ–ª–µ–π –≤ iframe –¥–ª—è –∫–æ–¥–∞: {len(all_inputs)}")
                
                for idx, inp in enumerate(all_inputs):
                    try:
                        if inp.is_visible():
                            inp_type = inp.get_attribute('type')
                            inp_name = inp.get_attribute('name')
                            inp_maxlength = inp.get_attribute('maxlength')
                            inp_inputmode = inp.get_attribute('inputmode')
                            logger.info(f"Input #{idx}: type={inp_type}, name={inp_name}, maxlength={inp_maxlength}, inputmode={inp_inputmode}")
                    except:
                        pass
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–∏ input: {e}")
            
            # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –ø–æ–ª–µ –∫–æ–¥–∞
            for selector in code_selectors:
                try:
                    code_input = auth_frame.wait_for_selector(selector, timeout=3000, state='visible')
                    if code_input and code_input.is_visible():
                        logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ –∫–æ–¥–∞ –≤ iframe: {selector}")
                        
                        # –í–≤–æ–¥–∏–º –∫–æ–¥
                        code_input.click()
                        time.sleep(0.5)
                        code_input.fill('')
                        time.sleep(0.3)
                        
                        # –í–≤–æ–¥–∏–º –ø–æ—Å–∏–º–≤–æ–ª—å–Ω–æ
                        for char in sms_code:
                            code_input.type(char, delay=100)
                        
                        time.sleep(2)
                        
                        screenshot = self._take_screenshot('sms_code_entered')
                        sync_send_photo(screenshot, "‚úÖ SMS –∫–æ–¥ –≤–≤–µ–¥–µ–Ω")
                        
                        time.sleep(1)
                        
                        # –ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É "–í–æ–π—Ç–∏"
                        login_button_selectors = [
                            'button[type="submit"]:has-text("–í–æ–π—Ç–∏")',
                            'button:has-text("–í–æ–π—Ç–∏")',
                            'button >> text="–í–æ–π—Ç–∏"',
                            '[type="submit"]:has-text("–í–æ–π—Ç–∏")',
                            'text="–í–æ–π—Ç–∏"'
                        ]
                        
                        button_clicked = False
                        for btn_selector in login_button_selectors:
                            try:
                                login_btn = auth_frame.wait_for_selector(btn_selector, timeout=3000, state='visible')
                                if login_btn and login_btn.is_visible():
                                    btn_text = login_btn.inner_text().strip()
                                    if len(btn_text) < 20:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –∫–Ω–æ–ø–∫–∞, –∞ –Ω–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
                                        logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ '–í–æ–π—Ç–∏' –ø–æ—Å–ª–µ SMS: {btn_selector}")
                                        login_btn.click()
                                        time.sleep(2)
                                        screenshot = self._take_screenshot('after_sms_login_button')
                                        sync_send_photo(screenshot, "‚úÖ –ö–Ω–æ–ø–∫–∞ '–í–æ–π—Ç–∏' –Ω–∞–∂–∞—Ç–∞ –ø–æ—Å–ª–µ SMS")
                                        button_clicked = True
                                        break
                            except:
                                continue
                        
                        if not button_clicked:
                            logger.warning("‚ö†Ô∏è –ö–Ω–æ–ø–∫–∞ '–í–æ–π—Ç–∏' –ø–æ—Å–ª–µ SMS –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–±—É–µ–º Enter")
                            try:
                                code_input.press('Enter')
                                time.sleep(2)
                            except:
                                pass
                        
                        time.sleep(2)
                        return True
                        
                except PlaywrightTimeout:
                    continue
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞ {selector}: {e}")
                    continue
            
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ - –ø—Ä–æ—Å–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            logger.warning("–ü–æ–ª–µ –∫–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
            sync_send_message(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ –∫–æ–¥–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.\n\n"
                            f"–í–∞—à SMS –∫–æ–¥: <code>{sms_code}</code>\n\n"
                            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ –í–†–£–ß–ù–£–Æ –≤ –æ—Ç–∫—Ä—ã—Ç–æ–º –±—Ä–∞—É–∑–µ—Ä–µ –∏ –Ω–∞–∂–º–∏—Ç–µ '–í–æ–π—Ç–∏'.\n\n"
                            "–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ 'OK' –≤ Telegram.")
            
            response = sync_wait_for_input("–í–≤–µ–¥–∏—Ç–µ 'OK' –ø–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –≤–≤–µ–¥–µ—Ç–µ SMS –∫–æ–¥ –≤—Ä—É—á–Ω—É—é", timeout=120)
            
            if response and response.upper() == 'OK':
                logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –≤–≤–æ–¥ SMS –∫–æ–¥–∞")
                screenshot = self._take_screenshot('sms_code_manual')
                sync_send_photo(screenshot, "SMS –∫–æ–¥ –≤–≤–µ–¥–µ–Ω –≤—Ä—É—á–Ω—É—é")
                return True
            
            return False
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ SMS –∫–æ–¥–∞: {e}")
            return False
    
    def enter_email_code(self) -> bool:
        """
        –ó–∞–ø—Ä–æ—Å–∏—Ç—å –∏ –≤–≤–µ—Å—Ç–∏ –∫–æ–¥ –∏–∑ email.
        
        Returns:
            True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            logger.info("–ñ–¥–µ–º –ø–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ –∫–æ–¥–∞ –∏–∑ email")
            
            # –ü–†–û–í–ï–†–ö–ê: –ú–æ–∂–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É–∂–µ –ø—Ä–æ—à–ª–∞?
            if self.verify_login():
                logger.success("‚úÖ –£–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã! Email –∫–æ–¥ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.")
                return True
            
            # –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç
            time.sleep(2)
            screenshot = self._take_screenshot('email_code_request')
            sync_send_photo(screenshot, "üìß –ó–∞–ø—Ä–æ—à–µ–Ω –∫–æ–¥ –∏–∑ email")
            
            # –ñ–¥–µ–º –∫–æ–¥ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            email_code = sync_wait_for_input(
                "üìß –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏—à–µ–ª –Ω–∞ –≤–∞—à email:",
                timeout=300  # 5 –º–∏–Ω—É—Ç –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ—á—Ç—ã
            )
            
            if not email_code:
                logger.error("–¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –∫–æ–¥–∞ –∏–∑ email")
                return False
            
            logger.info(f"–ü–æ–ª—É—á–µ–Ω –∫–æ–¥ –∏–∑ email: {email_code}")
            
            # –ò—â–µ–º iframe —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π
            auth_frame = None
            for frame in self.page.frames:
                frame_url = frame.url
                if 'ozonid-lite' in frame_url or 'authFrame' in frame.name:
                    logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º iframe –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è –≤–≤–æ–¥–∞ email –∫–æ–¥–∞: {frame_url}")
                    auth_frame = frame
                    break
            
            if not auth_frame:
                logger.warning("Iframe –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É")
                auth_frame = self.page.main_frame
            
            # –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è —Ñ–æ—Ä–º—ã –≤–≤–æ–¥–∞ –∫–æ–¥–∞
            time.sleep(2)
            
            # –¢–û–ß–ù–´–ô —Å–µ–ª–µ–∫—Ç–æ—Ä –ø–æ–ª—è –∫–æ–¥–∞ –∏–∑ HTML
            code_selectors = [
                'input[name="otp"]',  # –û—Å–Ω–æ–≤–Ω–æ–π —Å–µ–ª–µ–∫—Ç–æ—Ä –∏–∑ HTML
                'input[type="number"][name="otp"]',
                'input[inputmode="numeric"][name="otp"]',
                'input.d5_3_7-a.d5_3_7-a5',  # –ü–æ –∫–ª–∞—Å—Å–∞–º
                'input[maxlength="6"][name="otp"]',
                'input[inputmode="numeric"]',  # –ó–∞–ø–∞—Å–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
                'input[type="number"]',
                'input[name="code"]',
            ]
            
            # –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ input –≤ iframe
            try:
                all_inputs = auth_frame.query_selector_all('input')
                logger.info(f"–ù–∞–π–¥–µ–Ω–æ input –ø–æ–ª–µ–π –≤ iframe –¥–ª—è email –∫–æ–¥–∞: {len(all_inputs)}")
                
                for idx, inp in enumerate(all_inputs):
                    try:
                        if inp.is_visible():
                            inp_type = inp.get_attribute('type')
                            inp_name = inp.get_attribute('name')
                            inp_maxlength = inp.get_attribute('maxlength')
                            inp_inputmode = inp.get_attribute('inputmode')
                            logger.info(f"Input #{idx}: type={inp_type}, name={inp_name}, maxlength={inp_maxlength}, inputmode={inp_inputmode}")
                    except:
                        pass
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–∏ input: {e}")
            
            # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –ø–æ–ª–µ –∫–æ–¥–∞
            for selector in code_selectors:
                try:
                    code_input = auth_frame.wait_for_selector(selector, timeout=3000, state='visible')
                    if code_input and code_input.is_visible():
                        logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ email –∫–æ–¥–∞ –≤ iframe: {selector}")
                        
                        # –í–≤–æ–¥–∏–º –∫–æ–¥
                        code_input.click()
                        time.sleep(0.5)
                        code_input.fill('')
                        time.sleep(0.3)
                        
                        # –í–≤–æ–¥–∏–º –ø–æ—Å–∏–º–≤–æ–ª—å–Ω–æ
                        for char in email_code:
                            code_input.type(char, delay=100)
                        
                        time.sleep(2)
                        
                        screenshot = self._take_screenshot('email_code_entered')
                        sync_send_photo(screenshot, "‚úÖ Email –∫–æ–¥ –≤–≤–µ–¥–µ–Ω")
                        
                        time.sleep(1)
                        return True
                        
                except PlaywrightTimeout:
                    continue
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞ {selector}: {e}")
                    continue
            
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ - –ø—Ä–æ—Å–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            logger.warning("–ü–æ–ª–µ –∫–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
            sync_send_message(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ –∫–æ–¥–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.\n\n"
                            f"–í–∞—à email –∫–æ–¥: <code>{email_code}</code>\n\n"
                            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ –í–†–£–ß–ù–£–Æ –≤ –æ—Ç–∫—Ä—ã—Ç–æ–º –±—Ä–∞—É–∑–µ—Ä–µ.\n\n"
                            "–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ 'OK' –≤ Telegram.")
            
            response = sync_wait_for_input("–í–≤–µ–¥–∏—Ç–µ 'OK' –ø–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –≤–≤–µ–¥–µ—Ç–µ email –∫–æ–¥ –≤—Ä—É—á–Ω—É—é", timeout=120)
            
            if response and response.upper() == 'OK':
                logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –≤–≤–æ–¥ email –∫–æ–¥–∞")
                screenshot = self._take_screenshot('email_code_manual')
                sync_send_photo(screenshot, "Email –∫–æ–¥ –≤–≤–µ–¥–µ–Ω –≤—Ä—É—á–Ω—É—é")
                return True
            
            return False
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ email –∫–æ–¥–∞: {e}")
            return False
    
    def click_submit_code_button(self) -> bool:
        """
        –ù–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É '–í–æ–π—Ç–∏' –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ –∫–æ–¥–∞.
        
        Returns:
            True –µ—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ –Ω–∞–π–¥–µ–Ω–∞ –∏ –Ω–∞–∂–∞—Ç–∞
        """
        try:
            logger.info("üîò –ò—â–µ–º –∫–Ω–æ–ø–∫—É '–í–æ–π—Ç–∏'...")
            
            # –ò—â–µ–º iframe —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π
            auth_frame = None
            for frame in self.page.frames:
                frame_url = frame.url
                if 'ozonid-lite' in frame_url or 'authFrame' in frame.name:
                    logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º iframe –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –í–æ–π—Ç–∏: {frame_url}")
                    auth_frame = frame
                    break
            
            if not auth_frame:
                logger.warning("Iframe –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É")
                auth_frame = self.page.main_frame
            
            # –í–∞—Ä–∏–∞–Ω—Ç—ã —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–í–æ–π—Ç–∏"
            button_selectors = [
                'button:has-text("–í–æ–π—Ç–∏")',
                'button >> text="–í–æ–π—Ç–∏"',
                '[type="submit"]:has-text("–í–æ–π—Ç–∏")',
                'div[role="button"]:has-text("–í–æ–π—Ç–∏")',
                'text="–í–æ–π—Ç–∏"'
            ]
            
            for selector in button_selectors:
                try:
                    login_button = auth_frame.wait_for_selector(selector, timeout=3000, state='visible')
                    if login_button and login_button.is_visible():
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∫–Ω–æ–ø–∫–∞ —Å –∫–æ—Ä–æ—Ç–∫–∏–º —Ç–µ–∫—Å—Ç–æ–º (–Ω–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä)
                        button_text = login_button.inner_text().strip()
                        if len(button_text) < 20:
                            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ '–í–æ–π—Ç–∏': {selector}")
                            screenshot = self._take_screenshot('before_login_button_click')
                            
                            login_button.click()
                            time.sleep(2)
                            
                            screenshot = self._take_screenshot('after_login_button_click')
                            sync_send_photo(screenshot, "‚úÖ –ö–Ω–æ–ø–∫–∞ '–í–æ–π—Ç–∏' –Ω–∞–∂–∞—Ç–∞")
                            
                            logger.info("‚úÖ –ö–Ω–æ–ø–∫–∞ '–í–æ–π—Ç–∏' –Ω–∞–∂–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ")
                            return True
                except PlaywrightTimeout:
                    continue
                except Exception as e:
                    logger.debug(f"–°–µ–ª–µ–∫—Ç–æ—Ä {selector} –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {e}")
                    continue
            
            logger.warning("‚ö†Ô∏è –ö–Ω–æ–ø–∫–∞ '–í–æ–π—Ç–∏' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return False
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ '–í–æ–π—Ç–∏': {e}")
            return False
    
    def verify_login(self) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.
        
        Returns:
            True –µ—Å–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
        """
        try:
            logger.info("–ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é")
            time.sleep(3)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º URL
            current_url = self.page.url
            logger.info(f"üìç –¢–µ–∫—É—â–∏–π URL: {current_url}")
            
            
            # –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç
            screenshot = self._take_screenshot('after_login')
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
            page_title = self.page.title()
            if "–î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω" in page_title or "Access Denied" in page_title:
                logger.error("‚ùå –ë–õ–û–ö–ò–†–û–í–ö–ê: –î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω!")
                sync_send_photo(screenshot, f"‚ùå –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ Ozon: {page_title}")
                sync_send_message(
                    "üç™ <b>COOKIES –£–°–¢–ê–†–ï–õ–ò!</b>\n\n"
                    "‚ùå Ozon –±–ª–æ–∫–∏—Ä—É–µ—Ç –¥–æ—Å—Ç—É–ø —Å —Ç–µ–∫—É—â–∏–º–∏ cookies.\n\n"
                    "üìù <b>–î–µ–π—Å—Ç–≤–∏—è:</b>\n"
                    "1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ–π –º–∞—à–∏–Ω–µ:\n"
                    "   <code>python export_cookies.py</code>\n\n"
                    "2. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ cookies –Ω–∞ —Å–µ—Ä–≤–µ—Ä:\n"
                    "   <code>scp ozon_cookies.json ozon@SERVER:~/ozon_parser/</code>\n\n"
                    "‚è∞ Cookies –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–ª—è—Ç—å –∫–∞–∂–¥—ã–µ 3-7 –¥–Ω–µ–π."
                )
                return False
            
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏ –ù–ï–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            not_auth_indicators = [
                'text="–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã"',
                '[data-widget="myGuest"]',
                'text="–Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏"',
                '[data-widget="loginButton"]',
                'button:has-text("–í–æ–π—Ç–∏")',
                'a:has-text("–í–æ–π—Ç–∏")'
            ]
            
            for indicator in not_auth_indicators:
                try:
                    element = self.page.query_selector(indicator)
                    if element and element.is_visible():
                        logger.warning(f"‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {indicator}")
                         # logger.warning(f"–¢–µ–∫—Å—Ç —ç–ª–µ–º–µ–Ω—Ç–∞: {element.inner_text()[:100]}")
                        sync_send_photo(screenshot, "‚ùå –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
                        return False
                except:
                    pass
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏ —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            success_indicators = [
                'text="–ú–æ–∏ –∑–∞–∫–∞–∑—ã"',
                'text="–ü—Ä–æ—Ñ–∏–ª—å"',
                '[data-test-id="user-menu"]',
                'a[href*="/my/"]',
                'div[class*="userAvatar"]',
                '[data-widget="profileMenu"]',
                'text="–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å"',
                'button:has-text("–ü—Ä–æ—Ñ–∏–ª—å")'
            ]
            
            for indicator in success_indicators:
                try:
                    element = self.page.query_selector(indicator)
                    if element and element.is_visible():
                        logger.success(f"‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –ù–∞–π–¥–µ–Ω –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä: {indicator}")
                        sync_send_photo(screenshot, "‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!")
                        return True
                except:
                    pass
            
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ - —Å—á–∏—Ç–∞–µ–º —á—Ç–æ –ù–ï –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã
            logger.warning("‚ö†Ô∏è –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã - —Å—á–∏—Ç–∞–µ–º —á—Ç–æ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã")
            sync_send_photo(screenshot, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é")
            return False
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
            return False
    
    def login(self, skip_initial_navigation: bool = False) -> bool:
        """
        –ü–æ–ª–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ email —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ–º –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω –ø—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞.
        
        Args:
            skip_initial_navigation: –ï—Å–ª–∏ True, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–∫—Ä—ã—Ç–∏–µ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã (—É–∂–µ –Ω–∞ ozon.ru)
        
        Returns:
            True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            sync_send_message("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–∞ Ozon —á–µ—Ä–µ–∑ email...")
            
            # –®–∞–≥ 1: –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
            if not skip_initial_navigation:
                if not self.open_login_page():
                    sync_send_message("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã")
                    return False
            else:
                logger.info("‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–∫—Ä—ã—Ç–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â—É—é")
            
            # –®–∞–≥ 2: –ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É "–í–æ–π—Ç–∏"
            if not self.click_login_button():
                sync_send_message("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Ñ–æ—Ä–º—ã –≤—Ö–æ–¥–∞")
                return False
            
            # –ü–†–û–í–ï–†–ö–ê: –ú–æ–∂–µ—Ç –±—ã—Ç—å —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã? (cookies —Å—Ä–∞–±–æ—Ç–∞–ª–∏ –ø–æ—Å–ª–µ –∫–ª–∏–∫–∞)
            if self.verify_login():
                logger.success("‚úÖ –£–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã! Cookies —Å—Ä–∞–±–æ—Ç–∞–ª–∏.")
                sync_send_message("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! Cookies –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã.")
                return True
            
            # –ü–†–û–í–ï–†–ö–ê: –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏ –ª–∏–º–∏—Ç –ø–æ–ø—ã—Ç–æ–∫?
            if self.check_rate_limit_error():
                logger.warning("‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞ –ø–æ–ø—ã—Ç–æ–∫ –≤—Ö–æ–¥–∞")
                sync_send_message("‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –ø–æ–ø—ã—Ç–æ–∫ –≤—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ email.\n\n"
                                "–ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥: –≤—Ö–æ–¥ —á–µ—Ä–µ–∑ —Ç–µ–ª–µ—Ñ–æ–Ω —Å QR-–∫–æ–¥–æ–º.")
                
                # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –≤—Ö–æ–¥ —á–µ—Ä–µ–∑ —Ç–µ–ª–µ—Ñ–æ–Ω
                if not self.login_by_phone_with_qr():
                    sync_send_message("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ —á–µ—Ä–µ–∑ —Ç–µ–ª–µ—Ñ–æ–Ω —Å QR-–∫–æ–¥–æ–º")
                    return False
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –≤—Ö–æ–¥–∞
                if not self.verify_login():
                    sync_send_message("‚ùå –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ QR-–∫–æ–¥ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞")
                    return False
                
                sync_send_message("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ QR-–∫–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
                return True
            
            # –®–∞–≥ 3: –ü—ã—Ç–∞–µ–º—Å—è –≤—ã–±—Ä–∞—Ç—å "–í–æ–π—Ç–∏ –ø–æ –ø–æ—á—Ç–µ" (–µ—Å–ª–∏ –µ—Å—Ç—å —Ç–∞–∫–∞—è –æ–ø—Ü–∏—è)
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–º - –ø—Ä–æ–¥–æ–ª–∂–∏–º, —Ç.–∫. —Ñ–æ—Ä–º–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–π
            email_button_found = self.click_email_login_button()
            
            # –ü–†–û–í–ï–†–ö–ê: –ú–æ–∂–µ—Ç —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –ø–æ—Å–ª–µ –∫–ª–∏–∫–∞ email?
            if self.verify_login():
                logger.success("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!")
                sync_send_message("‚úÖ –í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
                return True
            
            if not email_button_found:
                logger.warning("–ö–Ω–æ–ø–∫–∞ email –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –∏ –ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã")
                
                # –ï—â—ë —Ä–∞–∑ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –ø–æ—Å–ª–µ –ø–æ–ø—ã—Ç–∫–∏ –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É
                if self.check_rate_limit_error():
                    logger.warning("‚ö†Ô∏è –õ–∏–º–∏—Ç –ø—Ä–µ–≤—ã—à–µ–Ω, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω")
                    sync_send_message("‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ. –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –≤—Ö–æ–¥ —á–µ—Ä–µ–∑ —Ç–µ–ª–µ—Ñ–æ–Ω —Å QR-–∫–æ–¥–æ–º.")
                    
                    if not self.login_by_phone_with_qr():
                        sync_send_message("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ —á–µ—Ä–µ–∑ —Ç–µ–ª–µ—Ñ–æ–Ω")
                        return False
                    
                    if not self.verify_login():
                        sync_send_message("‚ùå –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞")
                        return False
                    
                    sync_send_message("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
                    return True
                
                sync_send_message("‚ö†Ô∏è –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–±—É—é –≤–≤–µ—Å—Ç–∏ email –Ω–∞–ø—Ä—è–º—É—é...")
            
            # –®–∞–≥ 4: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–ø—á—É –µ—Å–ª–∏ –µ—Å—Ç—å
            if not self.handle_captcha():
                sync_send_message("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–∞–ø—á–∏")
                return False
            
            # –®–∞–≥ 5: –í–≤–æ–¥–∏–º email
            if not self.enter_email():
                sync_send_message("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ email")
                return False
            
            # –ü–†–û–í–ï–†–ö–ê: –ú–æ–∂–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ –±–µ–∑ –∫–æ–¥–∞? (–Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã)
            if self.verify_login():
                logger.success("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞ –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ email!")
                sync_send_message("‚úÖ –í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
                return True
            
            # –®–∞–≥ 6: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–ø—á—É –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ email
            if not self.handle_captcha():
                sync_send_message("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–∞–ø—á–∏")
                return False
            
            # –®–∞–≥ 7: –í–≤–æ–¥–∏–º SMS –∫–æ–¥
            if not self.enter_sms_code():
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç (–¢–û–õ–¨–ö–û –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –≤–≤–µ—Å—Ç–∏ –∫–æ–¥)
                if self.check_rate_limit_error():
                    logger.warning("‚ö†Ô∏è –õ–∏–º–∏—Ç –ø—Ä–µ–≤—ã—à–µ–Ω –ø—Ä–∏ –≤–≤–æ–¥–µ SMS, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω")
                    sync_send_message("‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –ø–æ–ø—ã—Ç–æ–∫. –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –≤—Ö–æ–¥ —á–µ—Ä–µ–∑ —Ç–µ–ª–µ—Ñ–æ–Ω —Å QR-–∫–æ–¥–æ–º.")
                    
                    if not self.login_by_phone_with_qr():
                        return False
                    if not self.verify_login():
                        return False
                    sync_send_message("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
                    return True
                
                sync_send_message("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ SMS –∫–æ–¥–∞")
                return False
            
            # –®–∞–≥ 8: –í–≤–æ–¥–∏–º –∫–æ–¥ –∏–∑ email
            if not self.enter_email_code():
                sync_send_message("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ email –∫–æ–¥–∞")
                return False
            
            # –®–∞–≥ 9: –ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É "–í–æ–π—Ç–∏" –ø–æ—Å–ª–µ email –∫–æ–¥–∞
            if not self.click_submit_code_button():
                logger.warning("‚ö†Ô∏è –ö–Ω–æ–ø–∫–∞ '–í–æ–π—Ç–∏' –ø–æ—Å–ª–µ email –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–±—É–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å...")
                sync_send_message("‚ö†Ô∏è –ö–Ω–æ–ø–∫–∞ '–í–æ–π—Ç–∏' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏. –ü—Ä–æ–≤–µ—Ä—è—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é...")
            
            # –®–∞–≥ 10: –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å
            if not self.verify_login():
                sync_send_message("‚ùå –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞")
                return False
            
            sync_send_message("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            return True
            
        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
            sync_send_message(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
            return False
